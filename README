To build Noodlz on OSX you need llvm, clang and lldb.

Here is an adapted excerpt from the lldb build manual (can be found here http://lldb.llvm.org/build.html):

Building LLDB

We first need to checkout the source trees into the appropriate locations. Both Clang and LLDB build as subprojects of LLVM. This means we will be checking out the source for both Clang and LLDB into the tools subdirectory of LLVM. We will be setting up a directory hierarchy looking something like this:

            WORK  
              `-- llvm
              |   |
              |   `-- tools
              |      |
              |       +-- clang
              |       |
              |       `-- lldb
              |
              `-- nui3
              |
              `-- noodlz
               
Change to the directory where you want to do development work and checkout LLVM:

> svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
Now switch to LLVMâ€™s tools subdirectory and checkout both Clang and LLDB:

> cd $llvm/tools 
> svn co http://llvm.org/svn/llvm-project/cfe/trunk clang 
> svn co http://llvm.org/svn/llvm-project/lldb/trunk lldb
In general, building the LLDB trunk revision requires trunk revisions of both LLVM and Clang.

--------------------
Once you have the sources laid out like above, you need to create a local cryptographic singature in order to sign your lldb framework and be able to run the debugger:
Follow the code signing instructions in lldb/docs/code-signing.txt

(for now I haven't investigated in the way to create a general signature for when we will distribute the debugger).

------
NOODLZ:

You can now launch the Noodlz workspace in Xcode:
WORK/noodlz/Noodlz.xcworkspace

Select the LLDB scheme and build it then go have a cup of coffe. Or watch the all the Lord of the rings movies a couple of times.
Once it is built without error (hopefully) you can select the noodlz project and build it. It should produce a valid Mac application bundle that contains a valid lldb framework.

Warning: for now, the executable I do my tests on is hardcoded in the MainWindow.cpp. Edit it out to point to an existing debugable executable on your machine.

For any question, ask :D

