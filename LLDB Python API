(lldb) scrip help(lldb)
Help on package lldb:

NAME
    lldb - The lldb module contains the public APIs for Python binding.

FILE
    /System/Library/PrivateFrameworks/LLDB.framework/Versions/A/Resources/Python/lldb/__init__.py

DESCRIPTION
    Some of the important classes are describe here:
    
    o SBTarget: Represents the target program running under the debugger.
    o SBProcess: Represents the process associated with the target program.
    o SBThread: Represents a thread of execution. SBProcess contains SBThread(s).
    o SBFrame: Represents one of the stack frames associated with a thread. SBThread
          contains SBFrame(s).
    o SBSymbolContext: A container that stores various debugger related info.
    o SBValue: Represents the value of a variable, a register, or an expression.
    o SBModule: Represents an executable image and its associated object and symbol
          files.  SBTarget conatins SBModule(s).
    o SBBreakpoint: Represents a logical breakpoint and its associated settings.
          SBTarget conatins SBBreakpoint(s).
    o SBSymbol: Represents the symbol possibly associated with a stack frame.
    o SBCompileUnit: Represents a compilation unit, or compiled source file.
    o SBFunction: Represents a generic function, which can be inlined or not.
    o SBBlock: Represents a lexical block. SBFunction contains SBBlock(s).
    o SBLineEntry: Specifies an association with a contiguous range of instructions
          and a source file location. SBCompileUnit contains SBLineEntry(s).

PACKAGE CONTENTS
    _lldb
    embedded_interpreter
    formatters (package)
    macosx (package)
    runtime (package)
    utils (package)

CLASSES
    __builtin__.object
        SBAddress
        SBAttachInfo
        SBBlock
        SBBreakpoint
        SBBreakpointLocation
        SBBroadcaster
        SBCommandInterpreter
        SBCommandReturnObject
        SBCommunication
        SBCompileUnit
        SBData
        SBDebugger
        SBDeclaration
        SBError
        SBEvent
        SBExpressionOptions
        SBFileSpec
        SBFileSpecList
        SBFrame
        SBFunction
        SBHostOS
        SBInputReader
        SBInstruction
        SBInstructionList
        SBLaunchInfo
        SBLineEntry
        SBListener
        SBModule
        SBProcess
        SBSection
        SBSourceManager
        SBStream
        SBStringList
        SBSymbol
        SBSymbolContext
        SBSymbolContextList
        SBTarget
        SBThread
        SBType
        SBTypeCategory
        SBTypeFilter
        SBTypeFormat
        SBTypeList
        SBTypeMember
        SBTypeNameSpecifier
        SBTypeSummary
        SBTypeSynthetic
        SBValue
        SBValueList
        SBWatchpoint
        declaration
        value
    
    class SBAddress(__builtin__.object)
     |  A section + offset based address class.
     |  
     |  The SBAddress class allows addresses to be relative to a section
     |  that can move during runtime due to images (executables, shared
     |  libraries, bundles, frameworks) being loaded at different
     |  addresses than the addresses found in the object file that
     |  represents them on disk. There are currently two types of addresses
     |  for a section:
     |      o file addresses
     |      o load addresses
     |  
     |  File addresses represents the virtual addresses that are in the 'on
     |  disk' object files. These virtual addresses are converted to be
     |  relative to unique sections scoped to the object file so that
     |  when/if the addresses slide when the images are loaded/unloaded
     |  in memory, we can easily track these changes without having to
     |  update every object (compile unit ranges, line tables, function
     |  address ranges, lexical block and inlined subroutine address
     |  ranges, global and static variables) each time an image is loaded or
     |  unloaded.
     |  
     |  Load addresses represents the virtual addresses where each section
     |  ends up getting loaded at runtime. Before executing a program, it
     |  is common for all of the load addresses to be unresolved. When a
     |  DynamicLoader plug-in receives notification that shared libraries
     |  have been loaded/unloaded, the load addresses of the main executable
     |  and any images (shared libraries) will be  resolved/unresolved. When
     |  this happens, breakpoints that are in one of these sections can be
     |  set/cleared.
     |  
     |  See docstring of SBFunction for example usage of SBAddress.
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetAddressClass(self)
     |      GetAddressClass(self) -> AddressClass
     |  
     |  GetBlock(self)
     |      GetBlock(self) -> SBBlock
     |  
     |  GetCompileUnit(self)
     |      GetCompileUnit(self) -> SBCompileUnit
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileAddress(self)
     |      GetFileAddress(self) -> addr_t
     |  
     |  GetFunction(self)
     |      GetFunction(self) -> SBFunction
     |  
     |  GetLineEntry(self)
     |      GetLineEntry(self) -> SBLineEntry
     |  
     |  GetLoadAddress(self, *args)
     |      GetLoadAddress(self, SBTarget target) -> addr_t
     |  
     |  GetModule(self)
     |      GetModule(self) -> SBModule
     |      
     |      GetModule() and the following grab individual objects for a given address and
     |      are less efficient if you want more than one symbol related objects. 
     |      Use one of the following when you want multiple debug symbol related 
     |      objects for an address:
     |         lldb::SBSymbolContext SBAddress::GetSymbolContext (uint32_t resolve_scope);
     |         lldb::SBSymbolContext SBTarget::ResolveSymbolContextForAddress (const SBAddress &addr, uint32_t resolve_scope);
     |      One or more bits from the SymbolContextItem enumerations can be logically
     |      OR'ed together to more efficiently retrieve multiple symbol objects.
     |  
     |  GetOffset(self)
     |      GetOffset(self) -> addr_t
     |  
     |  GetSection(self)
     |      GetSection(self) -> SBSection
     |  
     |  GetSymbol(self)
     |      GetSymbol(self) -> SBSymbol
     |  
     |  GetSymbolContext(self, *args)
     |      GetSymbolContext(self, uint32_t resolve_scope) -> SBSymbolContext
     |      
     |      GetSymbolContext() and the following can lookup symbol information for a given address.
     |      An address might refer to code or data from an existing module, or it
     |      might refer to something on the stack or heap. The following functions
     |      will only return valid values if the address has been resolved to a code
     |      or data address using 'void SBAddress::SetLoadAddress(...)' or 
     |      'lldb::SBAddress SBTarget::ResolveLoadAddress (...)'.
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  OffsetAddress(self, *args)
     |      OffsetAddress(self, addr_t offset) -> bool
     |  
     |  SetAddress(self, *args)
     |      SetAddress(self, SBSection section, addr_t offset)
     |  
     |  SetLoadAddress(self, *args)
     |      SetLoadAddress(self, addr_t load_addr, SBTarget target)
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __get_load_addr_property__(self)
     |      Get the load address for a lldb.SBAddress using the current target.
     |  
     |  __getattr__ lambda self, name
     |  
     |  __hex__(self)
     |      Convert the address to an hex string
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBAddress
     |      __init__(self, SBAddress rhs) -> SBAddress
     |      __init__(self, SBSection section, addr_t offset) -> SBAddress
     |      __init__(self, addr_t load_addr, SBTarget target) -> SBAddress
     |      
     |      Create an address by resolving a load address using the supplied target.
     |  
     |  __int__(self)
     |      Convert an address to a load address if there is a process and that process is alive, or to a file address otherwise.
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __oct__(self)
     |      Convert the address to an octal string
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __set_load_addr_property__(self, load_addr)
     |      Set the load address for a lldb.SBAddress using the current target.
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  block
     |      A read only property that returns an lldb object that represents the block (lldb.SBBlock) that this address resides within.
     |  
     |  compile_unit
     |      A read only property that returns an lldb object that represents the compile unit (lldb.SBCompileUnit) that this address resides within.
     |  
     |  file_addr
     |      A read only property that returns file address for the section as an integer. This is the address that represents the address as it is found in the object file that defines it.
     |  
     |  function
     |      A read only property that returns an lldb object that represents the function (lldb.SBFunction) that this address resides within.
     |  
     |  line_entry
     |      A read only property that returns an lldb object that represents the line entry (lldb.SBLineEntry) that this address resides within.
     |  
     |  load_addr
     |      A read/write property that gets/sets the SBAddress using load address. The setter resolves SBAddress using the SBTarget from lldb.target.
     |  
     |  module
     |      A read only property that returns an lldb object that represents the module (lldb.SBModule) that this address resides within.
     |  
     |  offset
     |      A read only property that returns the section offset in bytes as an integer.
     |  
     |  section
     |      A read only property that returns an lldb object that represents the section (lldb.SBSection) that this address resides within.
     |  
     |  symbol
     |      A read only property that returns an lldb object that represents the symbol (lldb.SBSymbol) that this address resides within.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBAddress>
     |      delete_SBAddress(SBAddress self)
     |  
     |  __swig_getmethods__ = {'block': <function GetBlock>, 'compile_unit': <...
     |  
     |  __swig_setmethods__ = {'load_addr': <function __set_load_addr_property...
    
    class SBAttachInfo(__builtin__.object)
     |  Proxy of C++ lldb::SBAttachInfo class
     |  
     |  Methods defined here:
     |  
     |  EffectiveGroupIDIsValid(self)
     |      EffectiveGroupIDIsValid(self) -> bool
     |  
     |  EffectiveUserIDIsValid(self)
     |      EffectiveUserIDIsValid(self) -> bool
     |  
     |  GetEffectiveGroupID(self)
     |      GetEffectiveGroupID(self) -> uint32_t
     |  
     |  GetEffectiveUserID(self)
     |      GetEffectiveUserID(self) -> uint32_t
     |  
     |  GetGroupID(self)
     |      GetGroupID(self) -> uint32_t
     |  
     |  GetIgnoreExisting(self)
     |      GetIgnoreExisting(self) -> bool
     |  
     |  GetParentProcessID(self)
     |      GetParentProcessID(self) -> pid_t
     |  
     |  GetProcessID(self)
     |      GetProcessID(self) -> pid_t
     |  
     |  GetProcessPluginName(self)
     |      GetProcessPluginName(self) -> str
     |  
     |  GetResumeCount(self)
     |      GetResumeCount(self) -> uint32_t
     |  
     |  GetUserID(self)
     |      GetUserID(self) -> uint32_t
     |  
     |  GetWaitForLaunch(self)
     |      GetWaitForLaunch(self) -> bool
     |  
     |  GroupIDIsValid(self)
     |      GroupIDIsValid(self) -> bool
     |  
     |  ParentProcessIDIsValid(self)
     |      ParentProcessIDIsValid(self) -> bool
     |  
     |  SetEffectiveGroupID(self, *args)
     |      SetEffectiveGroupID(self, uint32_t gid)
     |  
     |  SetEffectiveUserID(self, *args)
     |      SetEffectiveUserID(self, uint32_t uid)
     |  
     |  SetExecutable(self, *args)
     |      SetExecutable(self, str path)
     |      SetExecutable(self, SBFileSpec exe_file)
     |  
     |  SetGroupID(self, *args)
     |      SetGroupID(self, uint32_t gid)
     |  
     |  SetIgnoreExisting(self, *args)
     |      SetIgnoreExisting(self, bool b)
     |  
     |  SetParentProcessID(self, *args)
     |      SetParentProcessID(self, pid_t pid)
     |  
     |  SetProcessID(self, *args)
     |      SetProcessID(self, pid_t pid)
     |  
     |  SetProcessPluginName(self, *args)
     |      SetProcessPluginName(self, str plugin_name)
     |  
     |  SetResumeCount(self, *args)
     |      SetResumeCount(self, uint32_t c)
     |  
     |  SetUserID(self, *args)
     |      SetUserID(self, uint32_t uid)
     |  
     |  SetWaitForLaunch(self, *args)
     |      SetWaitForLaunch(self, bool b)
     |  
     |  UserIDIsValid(self)
     |      UserIDIsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBAttachInfo
     |      __init__(self, pid_t pid) -> SBAttachInfo
     |      __init__(self, str path, bool wait_for) -> SBAttachInfo
     |      __init__(self, SBAttachInfo rhs) -> SBAttachInfo
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBAttachInfo>
     |      delete_SBAttachInfo(SBAttachInfo self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBBlock(__builtin__.object)
     |  Represents a lexical block. SBFunction contains SBBlock(s).
     |  
     |  Methods defined here:
     |  
     |  GetContainingInlinedBlock(self)
     |      GetContainingInlinedBlock(self) -> SBBlock
     |      
     |      Get the inlined block that is or contains this block.
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFirstChild(self)
     |      GetFirstChild(self) -> SBBlock
     |      
     |      Get the first child block.
     |  
     |  GetInlinedCallSiteColumn(self)
     |      GetInlinedCallSiteColumn(self) -> uint32_t
     |      
     |      Get the call site column if this block represents an inlined function;
     |      otherwise, return 0.
     |  
     |  GetInlinedCallSiteFile(self)
     |      GetInlinedCallSiteFile(self) -> SBFileSpec
     |      
     |      Get the call site file if this block represents an inlined function;
     |      otherwise, return an invalid file spec.
     |  
     |  GetInlinedCallSiteLine(self)
     |      GetInlinedCallSiteLine(self) -> uint32_t
     |      
     |      Get the call site line if this block represents an inlined function;
     |      otherwise, return 0.
     |  
     |  GetInlinedName(self)
     |      GetInlinedName(self) -> str
     |      
     |      Get the function name if this block represents an inlined function;
     |      otherwise, return None.
     |  
     |  GetNumRanges(self)
     |      GetNumRanges(self) -> uint32_t
     |  
     |  GetParent(self)
     |      GetParent(self) -> SBBlock
     |      
     |      Get the parent block.
     |  
     |  GetRangeEndAddress(self, *args)
     |      GetRangeEndAddress(self, uint32_t idx) -> SBAddress
     |  
     |  GetRangeIndexForBlockAddress(self, *args)
     |      GetRangeIndexForBlockAddress(self, SBAddress block_addr) -> uint32_t
     |  
     |  GetRangeStartAddress(self, *args)
     |      GetRangeStartAddress(self, uint32_t idx) -> SBAddress
     |  
     |  GetSibling(self)
     |      GetSibling(self) -> SBBlock
     |      
     |      Get the sibling block for this block.
     |  
     |  GetVariables(self, *args)
     |      GetVariables(self, SBFrame frame, bool arguments, bool locals, bool statics, 
     |          DynamicValueType use_dynamic) -> SBValueList
     |      GetVariables(self, SBTarget target, bool arguments, bool locals, bool statics) -> SBValueList
     |  
     |  IsInlined(self)
     |      IsInlined(self) -> bool
     |      
     |      Does this block represent an inlined function?
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBBlock
     |      __init__(self, SBBlock rhs) -> SBBlock
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_call_site(self)
     |  
     |  get_range_at_index(self, idx)
     |  
     |  get_ranges_access_object(self)
     |      An accessor function that returns a ranges_access() object which allows lazy block address ranges access.
     |  
     |  get_ranges_array(self)
     |      An accessor function that returns an array object that contains all ranges in this block object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  call_site
     |      A read only property that returns a lldb.declaration object that contains the inlined call site file, line and column.
     |  
     |  first_child
     |      A read only property that returns the same result as GetFirstChild().
     |  
     |  inlined_block
     |      A read only property that returns the same result as GetContainingInlinedBlock().
     |  
     |  name
     |      A read only property that returns the same result as GetInlinedName().
     |  
     |  num_ranges
     |      A read only property that returns the same result as GetNumRanges().
     |  
     |  parent
     |      A read only property that returns the same result as GetParent().
     |  
     |  range
     |      A read only property that allows item access to the address ranges for a block by integer (range = block.range[0]) and by lldb.SBAdddress (find the range that contains the specified lldb.SBAddress like "pc_range = lldb.frame.block.range[frame.addr]").
     |  
     |  ranges
     |      A read only property that returns a list() object that contains all of the address ranges for the block.
     |  
     |  sibling
     |      A read only property that returns the same result as GetSibling().
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBBlock>
     |      delete_SBBlock(SBBlock self)
     |  
     |  __swig_getmethods__ = {'call_site': <function get_call_site>, 'first_c...
     |  
     |  __swig_setmethods__ = {}
     |  
     |  ranges_access = <class 'lldb.ranges_access'>
     |      A helper object that will lazily hand out an array of lldb.SBAddress that represent address ranges for a block.
    
    class SBBreakpoint(__builtin__.object)
     |  Represents a logical breakpoint and its associated settings.
     |  
     |  For example (from test/functionalities/breakpoint/breakpoint_ignore_count/
     |  TestBreakpointIgnoreCount.py),
     |  
     |      def breakpoint_ignore_count_python(self):
     |          '''Use Python APIs to set breakpoint ignore count.'''
     |          exe = os.path.join(os.getcwd(), 'a.out')
     |  
     |          # Create a target by the debugger.
     |          target = self.dbg.CreateTarget(exe)
     |          self.assertTrue(target, VALID_TARGET)
     |  
     |          # Now create a breakpoint on main.c by name 'c'.
     |          breakpoint = target.BreakpointCreateByName('c', 'a.out')
     |          self.assertTrue(breakpoint and
     |                          breakpoint.GetNumLocations() == 1,
     |                          VALID_BREAKPOINT)
     |  
     |          # Get the breakpoint location from breakpoint after we verified that,
     |          # indeed, it has one location.
     |          location = breakpoint.GetLocationAtIndex(0)
     |          self.assertTrue(location and
     |                          location.IsEnabled(),
     |                          VALID_BREAKPOINT_LOCATION)
     |  
     |          # Set the ignore count on the breakpoint location.
     |          location.SetIgnoreCount(2)
     |          self.assertTrue(location.GetIgnoreCount() == 2,
     |                          'SetIgnoreCount() works correctly')
     |  
     |          # Now launch the process, and do not stop at entry point.
     |          process = target.LaunchSimple(None, None, os.getcwd())
     |          self.assertTrue(process, PROCESS_IS_VALID)
     |  
     |          # Frame#0 should be on main.c:37, frame#1 should be on main.c:25, and
     |          # frame#2 should be on main.c:48.
     |          #lldbutil.print_stacktraces(process)
     |          from lldbutil import get_stopped_thread
     |          thread = get_stopped_thread(process, lldb.eStopReasonBreakpoint)
     |          self.assertTrue(thread != None, 'There should be a thread stopped due to breakpoint')
     |          frame0 = thread.GetFrameAtIndex(0)
     |          frame1 = thread.GetFrameAtIndex(1)
     |          frame2 = thread.GetFrameAtIndex(2)
     |          self.assertTrue(frame0.GetLineEntry().GetLine() == self.line1 and
     |                          frame1.GetLineEntry().GetLine() == self.line3 and
     |                          frame2.GetLineEntry().GetLine() == self.line4,
     |                          STOPPED_DUE_TO_BREAKPOINT_IGNORE_COUNT)
     |  
     |          # The hit count for the breakpoint should be 3.
     |          self.assertTrue(breakpoint.GetHitCount() == 3)
     |  
     |          process.Continue()
     |  
     |  SBBreakpoint supports breakpoint location iteration, for example,
     |  
     |      for bl in breakpoint:
     |          print 'breakpoint location load addr: %s' % hex(bl.GetLoadAddress())
     |          print 'breakpoint location condition: %s' % hex(bl.GetCondition())
     |  
     |  and rich comparion methods which allow the API program to use,
     |  
     |      if aBreakpoint == bBreakpoint:
     |          ...
     |  
     |  to compare two breakpoints for equality.
     |  
     |  Methods defined here:
     |  
     |  ClearAllBreakpointSites(self)
     |      ClearAllBreakpointSites(self)
     |  
     |  FindLocationByAddress(self, *args)
     |      FindLocationByAddress(self, addr_t vm_addr) -> SBBreakpointLocation
     |  
     |  FindLocationByID(self, *args)
     |      FindLocationByID(self, break_id_t bp_loc_id) -> SBBreakpointLocation
     |  
     |  FindLocationIDByAddress(self, *args)
     |      FindLocationIDByAddress(self, addr_t vm_addr) -> break_id_t
     |  
     |  GetCondition(self)
     |      GetCondition(self) -> str
     |      
     |      Get the condition expression for the breakpoint.
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetHitCount(self)
     |      GetHitCount(self) -> uint32_t
     |  
     |  GetID(self)
     |      GetID(self) -> break_id_t
     |  
     |  GetIgnoreCount(self)
     |      GetIgnoreCount(self) -> uint32_t
     |  
     |  GetLocationAtIndex(self, *args)
     |      GetLocationAtIndex(self, uint32_t index) -> SBBreakpointLocation
     |  
     |  GetNumLocations(self)
     |      GetNumLocations(self) -> size_t
     |  
     |  GetNumResolvedLocations(self)
     |      GetNumResolvedLocations(self) -> size_t
     |  
     |  GetQueueName(self)
     |      GetQueueName(self) -> str
     |  
     |  GetThreadID(self)
     |      GetThreadID(self) -> tid_t
     |  
     |  GetThreadIndex(self)
     |      GetThreadIndex(self) -> uint32_t
     |  
     |  GetThreadName(self)
     |      GetThreadName(self) -> str
     |  
     |  IsEnabled(self)
     |      IsEnabled(self) -> bool
     |  
     |  IsInternal(self)
     |      IsInternal(self) -> bool
     |  
     |  IsOneShot(self)
     |      IsOneShot(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetCallback(self, *args)
     |      SetCallback(self, BreakpointHitCallback callback, void baton)
     |  
     |  SetCondition(self, *args)
     |      SetCondition(self, str condition)
     |      
     |      The breakpoint stops only if the condition expression evaluates to true.
     |  
     |  SetEnabled(self, *args)
     |      SetEnabled(self, bool enable)
     |  
     |  SetIgnoreCount(self, *args)
     |      SetIgnoreCount(self, uint32_t count)
     |  
     |  SetOneShot(self, *args)
     |      SetOneShot(self, bool one_shot)
     |  
     |  SetQueueName(self, *args)
     |      SetQueueName(self, str queue_name)
     |  
     |  SetThreadID(self, *args)
     |      SetThreadID(self, tid_t sb_thread_id)
     |  
     |  SetThreadIndex(self, *args)
     |      SetThreadIndex(self, uint32_t index)
     |  
     |  SetThreadName(self, *args)
     |      SetThreadName(self, str thread_name)
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBBreakpoint
     |      __init__(self, SBBreakpoint rhs) -> SBBreakpoint
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  EventIsBreakpointEvent(*args)
     |      EventIsBreakpointEvent(SBEvent event) -> bool
     |  
     |  GetBreakpointEventTypeFromEvent(*args)
     |      GetBreakpointEventTypeFromEvent(SBEvent event) -> BreakpointEventType
     |  
     |  GetBreakpointFromEvent(*args)
     |      GetBreakpointFromEvent(SBEvent event) -> SBBreakpoint
     |  
     |  GetBreakpointLocationAtIndexFromEvent(*args)
     |      GetBreakpointLocationAtIndexFromEvent(SBEvent event, uint32_t loc_idx) -> SBBreakpointLocation
     |  
     |  GetNumBreakpointLocationsFromEvent(*args)
     |      GetNumBreakpointLocationsFromEvent(SBEvent event_sp) -> uint32_t
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBBreakpoint>
     |      delete_SBBreakpoint(SBBreakpoint self)
     |  
     |  __swig_getmethods__ = {'EventIsBreakpointEvent': <function <lambda>>, ...
     |  
     |  __swig_setmethods__ = {}
    
    class SBBreakpointLocation(__builtin__.object)
     |  Represents one unique instance (by address) of a logical breakpoint.
     |  
     |  A breakpoint location is defined by the breakpoint that produces it,
     |  and the address that resulted in this particular instantiation.
     |  Each breakpoint location has its settable options.
     |  
     |  SBBreakpoint contains SBBreakpointLocation(s). See docstring of SBBreakpoint
     |  for retrieval of an SBBreakpointLocation from an SBBreakpoint.
     |  
     |  Methods defined here:
     |  
     |  GetAddress(self)
     |      GetAddress(self) -> SBAddress
     |  
     |  GetBreakpoint(self)
     |      GetBreakpoint(self) -> SBBreakpoint
     |  
     |  GetCondition(self)
     |      GetCondition(self) -> str
     |      
     |      Get the condition expression for the breakpoint location.
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel level) -> bool
     |  
     |  GetID(self)
     |      GetID(self) -> break_id_t
     |  
     |  GetIgnoreCount(self)
     |      GetIgnoreCount(self) -> uint32_t
     |  
     |  GetLoadAddress(self)
     |      GetLoadAddress(self) -> addr_t
     |  
     |  GetQueueName(self)
     |      GetQueueName(self) -> str
     |  
     |  GetThreadID(self)
     |      GetThreadID(self) -> tid_t
     |  
     |  GetThreadIndex(self)
     |      GetThreadIndex(self) -> uint32_t
     |  
     |  GetThreadName(self)
     |      GetThreadName(self) -> str
     |  
     |  IsEnabled(self)
     |      IsEnabled(self) -> bool
     |  
     |  IsResolved(self)
     |      IsResolved(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetCondition(self, *args)
     |      SetCondition(self, str condition)
     |      
     |      The breakpoint location stops only if the condition expression evaluates
     |      to true.
     |  
     |  SetEnabled(self, *args)
     |      SetEnabled(self, bool enabled)
     |  
     |  SetIgnoreCount(self, *args)
     |      SetIgnoreCount(self, uint32_t n)
     |  
     |  SetQueueName(self, *args)
     |      SetQueueName(self, str queue_name)
     |  
     |  SetThreadID(self, *args)
     |      SetThreadID(self, tid_t sb_thread_id)
     |  
     |  SetThreadIndex(self, *args)
     |      SetThreadIndex(self, uint32_t index)
     |  
     |  SetThreadName(self, *args)
     |      SetThreadName(self, str thread_name)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBBreakpointLocation
     |      __init__(self, SBBreakpointLocation rhs) -> SBBreakpointLocation
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBBreakpointLocation>
     |      delete_SBBreakpointLocation(SBBreakpointLocation self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBBroadcaster(__builtin__.object)
     |  Represents an entity which can broadcast events. A default broadcaster is
     |  associated with an SBCommandInterpreter, SBProcess, and SBTarget.  For
     |  example, use
     |  
     |      broadcaster = process.GetBroadcaster()
     |  
     |  to retrieve the process's broadcaster.
     |  
     |  See also SBEvent for example usage of interacting with a broadcaster.
     |  
     |  Methods defined here:
     |  
     |  AddInitialEventsToListener(self, *args)
     |      AddInitialEventsToListener(self, SBListener listener, uint32_t requested_events)
     |  
     |  AddListener(self, *args)
     |      AddListener(self, SBListener listener, uint32_t event_mask) -> uint32_t
     |  
     |  BroadcastEvent(self, *args)
     |      BroadcastEvent(self, SBEvent event, bool unique = False)
     |      BroadcastEvent(self, SBEvent event)
     |  
     |  BroadcastEventByType(self, *args)
     |      BroadcastEventByType(self, uint32_t event_type, bool unique = False)
     |      BroadcastEventByType(self, uint32_t event_type)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  EventTypeHasListeners(self, *args)
     |      EventTypeHasListeners(self, uint32_t event_type) -> bool
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  RemoveListener(self, *args)
     |      RemoveListener(self, SBListener listener, uint32_t event_mask = 4294967295U) -> bool
     |      RemoveListener(self, SBListener listener) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBBroadcaster
     |      __init__(self, str name) -> SBBroadcaster
     |      __init__(self, SBBroadcaster rhs) -> SBBroadcaster
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBBroadcaster>
     |      delete_SBBroadcaster(SBBroadcaster self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBCommandInterpreter(__builtin__.object)
     |  SBCommandInterpreter handles/interprets commands for lldb.  You get the
     |  command interpreter from the SBDebugger instance. For example (from test/
     |  python_api/interpreter/TestCommandInterpreterAPI.py),
     |  
     |      def command_interpreter_api(self):
     |          '''Test the SBCommandInterpreter APIs.'''
     |          exe = os.path.join(os.getcwd(), 'a.out')
     |  
     |          # Create a target by the debugger.
     |          target = self.dbg.CreateTarget(exe)
     |          self.assertTrue(target, VALID_TARGET)
     |  
     |          # Retrieve the associated command interpreter from our debugger.
     |          ci = self.dbg.GetCommandInterpreter()
     |          self.assertTrue(ci, VALID_COMMAND_INTERPRETER)
     |  
     |          # Exercise some APIs....
     |  
     |          self.assertTrue(ci.HasCommands())
     |          self.assertTrue(ci.HasAliases())
     |          self.assertTrue(ci.HasAliasOptions())
     |          self.assertTrue(ci.CommandExists('breakpoint'))
     |          self.assertTrue(ci.CommandExists('target'))
     |          self.assertTrue(ci.CommandExists('platform'))
     |          self.assertTrue(ci.AliasExists('file'))
     |          self.assertTrue(ci.AliasExists('run'))
     |          self.assertTrue(ci.AliasExists('bt'))
     |  
     |          res = lldb.SBCommandReturnObject()
     |          ci.HandleCommand('breakpoint set -f main.c -l %d' % self.line, res)
     |          self.assertTrue(res.Succeeded())
     |          ci.HandleCommand('process launch', res)
     |          self.assertTrue(res.Succeeded())
     |  
     |          process = ci.GetProcess()
     |          self.assertTrue(process)
     |  
     |          ...
     |  
     |  The HandleCommand() instance method takes two args: the command string and
     |  an SBCommandReturnObject instance which encapsulates the result of command
     |  execution.
     |  
     |  Methods defined here:
     |  
     |  AliasExists(self, *args)
     |      AliasExists(self, str cmd) -> bool
     |  
     |  CommandExists(self, *args)
     |      CommandExists(self, str cmd) -> bool
     |  
     |  GetBroadcaster(self)
     |      GetBroadcaster(self) -> SBBroadcaster
     |  
     |  GetDebugger(self)
     |      GetDebugger(self) -> SBDebugger
     |  
     |  GetProcess(self)
     |      GetProcess(self) -> SBProcess
     |  
     |  HandleCommand(self, *args)
     |      HandleCommand(self, str command_line, SBCommandReturnObject result, bool add_to_history = False) -> ReturnStatus
     |      HandleCommand(self, str command_line, SBCommandReturnObject result) -> ReturnStatus
     |  
     |  HandleCompletion(self, *args)
     |      HandleCompletion(self, str current_line, uint32_t cursor_pos, int match_start_point, 
     |          int max_return_elements, SBStringList matches) -> int
     |  
     |  HasAliasOptions(self)
     |      HasAliasOptions(self) -> bool
     |  
     |  HasAliases(self)
     |      HasAliases(self) -> bool
     |  
     |  HasCommands(self)
     |      HasCommands(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SourceInitFileInCurrentWorkingDirectory(self, *args)
     |      SourceInitFileInCurrentWorkingDirectory(self, SBCommandReturnObject result)
     |  
     |  SourceInitFileInHomeDirectory(self, *args)
     |      SourceInitFileInHomeDirectory(self, SBCommandReturnObject result)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self, SBCommandInterpreter rhs) -> SBCommandInterpreter
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetArgumentDescriptionAsCString(*args)
     |      GetArgumentDescriptionAsCString(CommandArgumentType arg_type) -> str
     |  
     |  GetArgumentTypeAsCString(*args)
     |      GetArgumentTypeAsCString(CommandArgumentType arg_type) -> str
     |  
     |  GetBroadcasterClass()
     |      GetBroadcasterClass() -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBCommandInterpreter>
     |      delete_SBCommandInterpreter(SBCommandInterpreter self)
     |  
     |  __swig_getmethods__ = {'GetArgumentDescriptionAsCString': <function <l...
     |  
     |  __swig_setmethods__ = {}
     |  
     |  eBroadcastBitAsynchronousErrorData = 16
     |  
     |  eBroadcastBitAsynchronousOutputData = 8
     |  
     |  eBroadcastBitQuitCommandReceived = 4
     |  
     |  eBroadcastBitResetPrompt = 2
     |  
     |  eBroadcastBitThreadShouldExit = 1
    
    class SBCommandReturnObject(__builtin__.object)
     |  Represents a container which holds the result from command execution.
     |  It works with SBCommandInterpreter.HandleCommand() to encapsulate the result
     |  of command execution.
     |  
     |  See SBCommandInterpreter for example usage of SBCommandReturnObject.
     |  
     |  Methods defined here:
     |  
     |  AppendMessage(self, *args)
     |      AppendMessage(self, str message)
     |  
     |  AppendWarning(self, *args)
     |      AppendWarning(self, str message)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetError(self, *args)
     |      GetError(self) -> str
     |      GetError(self, bool if_no_immediate) -> str
     |  
     |  GetErrorSize(self)
     |      GetErrorSize(self) -> size_t
     |  
     |  GetOutput(self, *args)
     |      GetOutput(self) -> str
     |      GetOutput(self, bool only_if_no_immediate) -> str
     |  
     |  GetOutputSize(self)
     |      GetOutputSize(self) -> size_t
     |  
     |  GetStatus(self)
     |      GetStatus(self) -> ReturnStatus
     |  
     |  HasResult(self)
     |      HasResult(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Printf(self, *args)
     |      Printf(self, str format, v(...) *args) -> size_t
     |  
     |  PutCString(self, *args)
     |      PutCString(self, str string, int len = -1)
     |      PutCString(self, str string)
     |  
     |  PutError(self, *args)
     |      PutError(self, FILE fh) -> size_t
     |  
     |  PutOutput(self, *args)
     |      PutOutput(self, FILE fh) -> size_t
     |  
     |  SetImmediateErrorFile(self, *args)
     |      SetImmediateErrorFile(self, FILE fh)
     |  
     |  SetImmediateOutputFile(self, *args)
     |      SetImmediateOutputFile(self, FILE fh)
     |  
     |  SetStatus(self, *args)
     |      SetStatus(self, ReturnStatus status)
     |  
     |  Succeeded(self)
     |      Succeeded(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBCommandReturnObject
     |      __init__(self, SBCommandReturnObject rhs) -> SBCommandReturnObject
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBCommandReturnObject>
     |      delete_SBCommandReturnObject(SBCommandReturnObject self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBCommunication(__builtin__.object)
     |  Proxy of C++ lldb::SBCommunication class
     |  
     |  Methods defined here:
     |  
     |  AdoptFileDesriptor(self, *args)
     |      AdoptFileDesriptor(self, int fd, bool owns_fd) -> ConnectionStatus
     |  
     |  Connect(self, *args)
     |      Connect(self, str url) -> ConnectionStatus
     |  
     |  Disconnect(self)
     |      Disconnect(self) -> ConnectionStatus
     |  
     |  GetBroadcaster(self)
     |      GetBroadcaster(self) -> SBBroadcaster
     |  
     |  GetCloseOnEOF(self)
     |      GetCloseOnEOF(self) -> bool
     |  
     |  IsConnected(self)
     |      IsConnected(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Read(self, *args)
     |      Read(self, void dst, size_t dst_len, uint32_t timeout_usec, ConnectionStatus status) -> size_t
     |  
     |  ReadThreadIsRunning(self)
     |      ReadThreadIsRunning(self) -> bool
     |  
     |  ReadThreadStart(self)
     |      ReadThreadStart(self) -> bool
     |  
     |  ReadThreadStop(self)
     |      ReadThreadStop(self) -> bool
     |  
     |  SetCloseOnEOF(self, *args)
     |      SetCloseOnEOF(self, bool b)
     |  
     |  SetReadThreadBytesReceivedCallback(self, *args)
     |      SetReadThreadBytesReceivedCallback(self, ReadThreadBytesReceived callback, void callback_baton) -> bool
     |  
     |  Write(self, *args)
     |      Write(self, void src, size_t src_len, ConnectionStatus status) -> size_t
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBCommunication
     |      __init__(self, str broadcaster_name) -> SBCommunication
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetBroadcasterClass()
     |      GetBroadcasterClass() -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBCommunication>
     |      delete_SBCommunication(SBCommunication self)
     |  
     |  __swig_getmethods__ = {'GetBroadcasterClass': <function <lambda>>}
     |  
     |  __swig_setmethods__ = {}
     |  
     |  eAllEventBits = -1
     |  
     |  eBroadcastBitDisconnected = 1
     |  
     |  eBroadcastBitPacketAvailable = 16
     |  
     |  eBroadcastBitReadThreadDidExit = 4
     |  
     |  eBroadcastBitReadThreadGotBytes = 2
     |  
     |  eBroadcastBitReadThreadShouldExit = 8
    
    class SBCompileUnit(__builtin__.object)
     |  Represents a compilation unit, or compiled source file.
     |  
     |  SBCompileUnit supports line entry iteration. For example,
     |  
     |      # Now get the SBSymbolContext from this frame.  We want everything. :-)
     |      context = frame0.GetSymbolContext(lldb.eSymbolContextEverything)
     |      ...
     |  
     |      compileUnit = context.GetCompileUnit()
     |  
     |      for lineEntry in compileUnit:
     |          print 'line entry: %s:%d' % (str(lineEntry.GetFileSpec()),
     |                                      lineEntry.GetLine())
     |          print 'start addr: %s' % str(lineEntry.GetStartAddress())
     |          print 'end   addr: %s' % str(lineEntry.GetEndAddress())
     |  
     |  produces:
     |  
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:20
     |  start addr: a.out[0x100000d98]
     |  end   addr: a.out[0x100000da3]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:21
     |  start addr: a.out[0x100000da3]
     |  end   addr: a.out[0x100000da9]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:22
     |  start addr: a.out[0x100000da9]
     |  end   addr: a.out[0x100000db6]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:23
     |  start addr: a.out[0x100000db6]
     |  end   addr: a.out[0x100000dbc]
     |  ...
     |  
     |  See also SBSymbolContext and SBLineEntry
     |  
     |  Methods defined here:
     |  
     |  FindLineEntryIndex(self, *args)
     |      FindLineEntryIndex(self, uint32_t start_idx, uint32_t line, SBFileSpec inline_file_spec) -> uint32_t
     |      FindLineEntryIndex(self, uint32_t start_idx, uint32_t line, SBFileSpec inline_file_spec, 
     |          bool exact) -> uint32_t
     |  
     |  FindSupportFileIndex(self, *args)
     |      FindSupportFileIndex(self, uint32_t start_idx, SBFileSpec sb_file, bool full) -> uint32_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileSpec(self)
     |      GetFileSpec(self) -> SBFileSpec
     |  
     |  GetLineEntryAtIndex(self, *args)
     |      GetLineEntryAtIndex(self, uint32_t idx) -> SBLineEntry
     |  
     |  GetNumLineEntries(self)
     |      GetNumLineEntries(self) -> uint32_t
     |  
     |  GetNumSupportFiles(self)
     |      GetNumSupportFiles(self) -> uint32_t
     |  
     |  GetSupportFileAtIndex(self, *args)
     |      GetSupportFileAtIndex(self, uint32_t idx) -> SBFileSpec
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBCompileUnit
     |      __init__(self, SBCompileUnit rhs) -> SBCompileUnit
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  file
     |      A read only property that returns the same result an lldb object that represents the source file (lldb.SBFileSpec) for the compile unit.
     |  
     |  num_line_entries
     |      A read only property that returns the number of line entries in a compile unit as an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBCompileUnit>
     |      delete_SBCompileUnit(SBCompileUnit self)
     |  
     |  __swig_getmethods__ = {'file': <function GetFileSpec>, 'num_line_entri...
     |  
     |  __swig_setmethods__ = {}
    
    class SBData(__builtin__.object)
     |  Proxy of C++ lldb::SBData class
     |  
     |  Methods defined here:
     |  
     |  Append(self, *args)
     |      Append(self, SBData rhs) -> bool
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetAddress(self, *args)
     |      GetAddress(self, SBError error, uint32_t offset) -> addr_t
     |  
     |  GetAddressByteSize(self)
     |      GetAddressByteSize(self) -> uint8_t
     |  
     |  GetByteOrder(self)
     |      GetByteOrder(self) -> ByteOrder
     |  
     |  GetByteSize(self)
     |      GetByteSize(self) -> size_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, addr_t base_addr) -> bool
     |  
     |  GetDouble(self, *args)
     |      GetDouble(self, SBError error, uint32_t offset) -> double
     |  
     |  GetFloat(self, *args)
     |      GetFloat(self, SBError error, uint32_t offset) -> float
     |  
     |  GetLongDouble(self, *args)
     |      GetLongDouble(self, SBError error, uint32_t offset) -> long double
     |  
     |  GetSignedInt16(self, *args)
     |      GetSignedInt16(self, SBError error, uint32_t offset) -> int16_t
     |  
     |  GetSignedInt32(self, *args)
     |      GetSignedInt32(self, SBError error, uint32_t offset) -> int32_t
     |  
     |  GetSignedInt64(self, *args)
     |      GetSignedInt64(self, SBError error, uint32_t offset) -> int64_t
     |  
     |  GetSignedInt8(self, *args)
     |      GetSignedInt8(self, SBError error, uint32_t offset) -> int8_t
     |  
     |  GetString(self, *args)
     |      GetString(self, SBError error, uint32_t offset) -> str
     |  
     |  GetUnsignedInt16(self, *args)
     |      GetUnsignedInt16(self, SBError error, uint32_t offset) -> uint16_t
     |  
     |  GetUnsignedInt32(self, *args)
     |      GetUnsignedInt32(self, SBError error, uint32_t offset) -> uint32_t
     |  
     |  GetUnsignedInt64(self, *args)
     |      GetUnsignedInt64(self, SBError error, uint32_t offset) -> uint64_t
     |  
     |  GetUnsignedInt8(self, *args)
     |      GetUnsignedInt8(self, SBError error, uint32_t offset) -> uint8_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  ReadRawData(self, *args)
     |      ReadRawData(self, SBError error, uint32_t offset, void buf) -> size_t
     |  
     |  SetAddressByteSize(self, *args)
     |      SetAddressByteSize(self, uint8_t addr_byte_size)
     |  
     |  SetByteOrder(self, *args)
     |      SetByteOrder(self, ByteOrder endian)
     |  
     |  SetData(self, *args)
     |      SetData(self, SBError error, void buf, ByteOrder endian, uint8_t addr_size)
     |  
     |  SetDataFromCString(self, *args)
     |      SetDataFromCString(self, str data) -> bool
     |  
     |  SetDataFromDoubleArray(self, *args)
     |      SetDataFromDoubleArray(self, double array) -> bool
     |  
     |  SetDataFromSInt32Array(self, *args)
     |      SetDataFromSInt32Array(self, int32_t array) -> bool
     |  
     |  SetDataFromSInt64Array(self, *args)
     |      SetDataFromSInt64Array(self, int64_t array) -> bool
     |  
     |  SetDataFromUInt32Array(self, *args)
     |      SetDataFromUInt32Array(self, uint32_t array) -> bool
     |  
     |  SetDataFromUInt64Array(self, *args)
     |      SetDataFromUInt64Array(self, uint64_t array) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBData
     |      __init__(self, SBData rhs) -> SBData
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  CreateDataFromCString(*args)
     |      CreateDataFromCString(ByteOrder endian, uint32_t addr_byte_size, str data) -> SBData
     |  
     |  CreateDataFromDoubleArray(*args)
     |      CreateDataFromDoubleArray(ByteOrder endian, uint32_t addr_byte_size, double array) -> SBData
     |  
     |  CreateDataFromSInt32Array(*args)
     |      CreateDataFromSInt32Array(ByteOrder endian, uint32_t addr_byte_size, int32_t array) -> SBData
     |  
     |  CreateDataFromSInt64Array(*args)
     |      CreateDataFromSInt64Array(ByteOrder endian, uint32_t addr_byte_size, int64_t array) -> SBData
     |  
     |  CreateDataFromUInt32Array(*args)
     |      CreateDataFromUInt32Array(ByteOrder endian, uint32_t addr_byte_size, uint32_t array) -> SBData
     |  
     |  CreateDataFromUInt64Array(*args)
     |      CreateDataFromUInt64Array(ByteOrder endian, uint32_t addr_byte_size, uint64_t array) -> SBData
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  byte_order
     |      A read/write property getting and setting the endianness of this SBData (data.byte_order = lldb.eByteOrderLittle).
     |  
     |  double
     |      A read only property that returns an array-like object out of which you can read double values.
     |  
     |  doubles
     |      A read only property that returns an array with all the contents of this SBData represented as double values.
     |  
     |  float
     |      A read only property that returns an array-like object out of which you can read float values.
     |  
     |  floats
     |      A read only property that returns an array with all the contents of this SBData represented as float values.
     |  
     |  sint16
     |      A read only property that returns an array-like object out of which you can read sint16 values.
     |  
     |  sint16s
     |      A read only property that returns an array with all the contents of this SBData represented as sint16 values.
     |  
     |  sint32
     |      A read only property that returns an array-like object out of which you can read sint32 values.
     |  
     |  sint32s
     |      A read only property that returns an array with all the contents of this SBData represented as sint32 values.
     |  
     |  sint64
     |      A read only property that returns an array-like object out of which you can read sint64 values.
     |  
     |  sint64s
     |      A read only property that returns an array with all the contents of this SBData represented as sint64 values.
     |  
     |  sint8
     |      A read only property that returns an array-like object out of which you can read sint8 values.
     |  
     |  sint8s
     |      A read only property that returns an array with all the contents of this SBData represented as sint8 values.
     |  
     |  size
     |      A read only property that returns the size the same result as GetByteSize().
     |  
     |  uint16
     |      A read only property that returns an array-like object out of which you can read uint16 values.
     |  
     |  uint16s
     |      A read only property that returns an array with all the contents of this SBData represented as uint16 values.
     |  
     |  uint32
     |      A read only property that returns an array-like object out of which you can read uint32 values.
     |  
     |  uint32s
     |      A read only property that returns an array with all the contents of this SBData represented as uint32 values.
     |  
     |  uint64
     |      A read only property that returns an array-like object out of which you can read uint64 values.
     |  
     |  uint64s
     |      A read only property that returns an array with all the contents of this SBData represented as uint64 values.
     |  
     |  uint8
     |      A read only property that returns an array-like object out of which you can read uint8 values.
     |  
     |  uint8s
     |      A read only property that returns an array with all the contents of this SBData represented as uint8 values.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBData>
     |      delete_SBData(SBData self)
     |  
     |  __swig_getmethods__ = {'CreateDataFromCString': <function <lambda>>, '...
     |  
     |  __swig_setmethods__ = {'byte_order': <function SetByteOrder>}
     |  
     |  read_data_helper = <class lldb.read_data_helper>
    
    class SBDebugger(__builtin__.object)
     |  SBDebugger is the primordial object that creates SBTargets and provides
     |  access to them.  It also manages the overall debugging experiences.
     |  
     |  For example (from example/disasm.py),
     |  
     |  import lldb
     |  import os
     |  import sys
     |  
     |  def disassemble_instructions (insts):
     |      for i in insts:
     |          print i
     |  
     |  ...
     |  
     |  # Create a new debugger instance
     |  debugger = lldb.SBDebugger.Create()
     |  
     |  # When we step or continue, don't return from the function until the process 
     |  # stops. We do this by setting the async mode to false.
     |  debugger.SetAsync (False)
     |  
     |  # Create a target from a file and arch
     |  print 'Creating a target for '%s'' % exe
     |  
     |  target = debugger.CreateTargetWithFileAndArch (exe, lldb.LLDB_ARCH_DEFAULT)
     |  
     |  if target:
     |      # If the target is valid set a breakpoint at main
     |      main_bp = target.BreakpointCreateByName (fname, target.GetExecutable().GetFilename());
     |  
     |      print main_bp
     |  
     |      # Launch the process. Since we specified synchronous mode, we won't return
     |      # from this function until we hit the breakpoint at main
     |      process = target.LaunchSimple (None, None, os.getcwd())
     |      
     |      # Make sure the launch went ok
     |      if process:
     |          # Print some simple process info
     |          state = process.GetState ()
     |          print process
     |          if state == lldb.eStateStopped:
     |              # Get the first thread
     |              thread = process.GetThreadAtIndex (0)
     |              if thread:
     |                  # Print some simple thread info
     |                  print thread
     |                  # Get the first frame
     |                  frame = thread.GetFrameAtIndex (0)
     |                  if frame:
     |                      # Print some simple frame info
     |                      print frame
     |                      function = frame.GetFunction()
     |                      # See if we have debug info (a function)
     |                      if function:
     |                          # We do have a function, print some info for the function
     |                          print function
     |                          # Now get all instructions for this function and print them
     |                          insts = function.GetInstructions(target)
     |                          disassemble_instructions (insts)
     |                      else:
     |                          # See if we have a symbol in the symbol table for where we stopped
     |                          symbol = frame.GetSymbol();
     |                          if symbol:
     |                              # We do have a symbol, print some info for the symbol
     |                              print symbol
     |                              # Now get all instructions for this symbol and print them
     |                              insts = symbol.GetInstructions(target)
     |                              disassemble_instructions (insts)
     |  
     |                      registerList = frame.GetRegisters()
     |                      print 'Frame registers (size of register set = %d):' % registerList.GetSize()
     |                      for value in registerList:
     |                          #print value
     |                          print '%s (number of children = %d):' % (value.GetName(), value.GetNumChildren())
     |                          for child in value:
     |                              print 'Name: ', child.GetName(), ' Value: ', child.GetValue(frame)
     |  
     |              print 'Hit the breakpoint at main, enter to continue and wait for program to exit or 'Ctrl-D'/'quit' to terminate the program'
     |              next = sys.stdin.readline()
     |              if not next or next.rstrip('
     |  ') == 'quit':
     |                  print 'Terminating the inferior process...'
     |                  process.Kill()
     |              else:
     |                  # Now continue to the program exit
     |                  process.Continue()
     |                  # When we return from the above function we will hopefully be at the
     |                  # program exit. Print out some process info
     |                  print process
     |          elif state == lldb.eStateExited:
     |              print 'Didn't hit the breakpoint at main, program has exited...'
     |          else:
     |              print 'Unexpected process state: %s, killing process...' % debugger.StateAsCString (state)
     |              process.Kill()
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  CreateCategory(self, *args)
     |      CreateCategory(self, str category_name) -> SBTypeCategory
     |  
     |  CreateTarget(self, *args)
     |      CreateTarget(self, str filename, str target_triple, str platform_name, 
     |          bool add_dependent_modules, SBError sb_error) -> SBTarget
     |      CreateTarget(self, str filename) -> SBTarget
     |  
     |  CreateTargetWithFileAndArch(self, *args)
     |      CreateTargetWithFileAndArch(self, str filename, str archname) -> SBTarget
     |  
     |  CreateTargetWithFileAndTargetTriple(self, *args)
     |      CreateTargetWithFileAndTargetTriple(self, str filename, str target_triple) -> SBTarget
     |  
     |  DeleteCategory(self, *args)
     |      DeleteCategory(self, str category_name) -> bool
     |  
     |  DeleteTarget(self, *args)
     |      DeleteTarget(self, SBTarget target) -> bool
     |      
     |      Return true if target is deleted from the target list of the debugger.
     |  
     |  DispatchInput(self, *args)
     |      DispatchInput(self, void data)
     |  
     |  DispatchInputEndOfFile(self)
     |      DispatchInputEndOfFile(self)
     |  
     |  DispatchInputInterrupt(self)
     |      DispatchInputInterrupt(self)
     |  
     |  EnableLog(self, *args)
     |      EnableLog(self, str channel, str types) -> bool
     |  
     |  FindTargetWithFileAndArch(self, *args)
     |      FindTargetWithFileAndArch(self, str filename, str arch) -> SBTarget
     |  
     |  FindTargetWithProcessID(self, *args)
     |      FindTargetWithProcessID(self, pid_t pid) -> SBTarget
     |  
     |  GetAsync(self)
     |      GetAsync(self) -> bool
     |  
     |  GetCategory(self, *args)
     |      GetCategory(self, str category_name) -> SBTypeCategory
     |  
     |  GetCategoryAtIndex(self, *args)
     |      GetCategoryAtIndex(self, uint32_t arg0) -> SBTypeCategory
     |  
     |  GetCloseInputOnEOF(self)
     |      GetCloseInputOnEOF(self) -> bool
     |  
     |  GetCommandInterpreter(self)
     |      GetCommandInterpreter(self) -> SBCommandInterpreter
     |  
     |  GetDefaultCategory(self)
     |      GetDefaultCategory(self) -> SBTypeCategory
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetErrorFileHandle(self)
     |      GetErrorFileHandle(self) -> FILE
     |  
     |  GetFilterForType(self, *args)
     |      GetFilterForType(self, SBTypeNameSpecifier arg0) -> SBTypeFilter
     |  
     |  GetFormatForType(self, *args)
     |      GetFormatForType(self, SBTypeNameSpecifier arg0) -> SBTypeFormat
     |  
     |  GetID(self)
     |      GetID(self) -> user_id_t
     |  
     |  GetIndexOfTarget(self, *args)
     |      GetIndexOfTarget(self, SBTarget target) -> uint32_t
     |  
     |  GetInputFileHandle(self)
     |      GetInputFileHandle(self) -> FILE
     |  
     |  GetInstanceName(self)
     |      GetInstanceName(self) -> str
     |  
     |  GetListener(self)
     |      GetListener(self) -> SBListener
     |  
     |  GetNumCategories(self)
     |      GetNumCategories(self) -> uint32_t
     |  
     |  GetNumTargets(self)
     |      GetNumTargets(self) -> uint32_t
     |  
     |  GetOutputFileHandle(self)
     |      GetOutputFileHandle(self) -> FILE
     |  
     |  GetPrompt(self)
     |      GetPrompt(self) -> str
     |  
     |  GetScriptLanguage(self)
     |      GetScriptLanguage(self) -> ScriptLanguage
     |  
     |  GetScriptingLanguage(self, *args)
     |      GetScriptingLanguage(self, str script_language_name) -> ScriptLanguage
     |  
     |  GetSelectedTarget(self)
     |      GetSelectedTarget(self) -> SBTarget
     |  
     |  GetSourceManager(self)
     |      GetSourceManager(self) -> SBSourceManager
     |  
     |  GetSummaryForType(self, *args)
     |      GetSummaryForType(self, SBTypeNameSpecifier arg0) -> SBTypeSummary
     |  
     |  GetSyntheticForType(self, *args)
     |      GetSyntheticForType(self, SBTypeNameSpecifier arg0) -> SBTypeSynthetic
     |  
     |  GetTargetAtIndex(self, *args)
     |      GetTargetAtIndex(self, uint32_t idx) -> SBTarget
     |  
     |  GetTerminalWidth(self)
     |      GetTerminalWidth(self) -> uint32_t
     |  
     |  GetUseExternalEditor(self)
     |      GetUseExternalEditor(self) -> bool
     |  
     |  HandleCommand(self, *args)
     |      HandleCommand(self, str command)
     |  
     |  HandleProcessEvent(self, *args)
     |      HandleProcessEvent(self, SBProcess process, SBEvent event, FILE out, FILE err)
     |  
     |  InputReaderIsTopReader(self, *args)
     |      InputReaderIsTopReader(self, SBInputReader reader) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  NotifyTopInputReader(self, *args)
     |      NotifyTopInputReader(self, InputReaderAction notification)
     |  
     |  PushInputReader(self, *args)
     |      PushInputReader(self, SBInputReader reader)
     |  
     |  SetAsync(self, *args)
     |      SetAsync(self, bool b)
     |  
     |  SetCloseInputOnEOF(self, *args)
     |      SetCloseInputOnEOF(self, bool b)
     |  
     |  SetCurrentPlatform(self, *args)
     |      SetCurrentPlatform(self, str platform_name) -> SBError
     |  
     |  SetCurrentPlatformSDKRoot(self, *args)
     |      SetCurrentPlatformSDKRoot(self, str sysroot) -> bool
     |  
     |  SetErrorFileHandle(self, *args)
     |      SetErrorFileHandle(self, FILE f, bool transfer_ownership)
     |  
     |  SetInputFileHandle(self, *args)
     |      SetInputFileHandle(self, FILE f, bool transfer_ownership)
     |  
     |  SetLoggingCallback(self, *args)
     |      SetLoggingCallback(self, LogOutputCallback log_callback)
     |  
     |  SetOutputFileHandle(self, *args)
     |      SetOutputFileHandle(self, FILE f, bool transfer_ownership)
     |  
     |  SetPrompt(self, *args)
     |      SetPrompt(self, str prompt)
     |  
     |  SetScriptLanguage(self, *args)
     |      SetScriptLanguage(self, ScriptLanguage script_lang)
     |  
     |  SetSelectedTarget(self, *args)
     |      SetSelectedTarget(self, SBTarget target)
     |  
     |  SetTerminalWidth(self, *args)
     |      SetTerminalWidth(self, uint32_t term_width)
     |  
     |  SetUseExternalEditor(self, *args)
     |      SetUseExternalEditor(self, bool input) -> bool
     |  
     |  SkipLLDBInitFiles(self, *args)
     |      SkipLLDBInitFiles(self, bool b)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBDebugger
     |      __init__(self, SBDebugger rhs) -> SBDebugger
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(*args)
     |      Create() -> SBDebugger
     |      Create(bool source_init_files) -> SBDebugger
     |      Create(bool source_init_files, LogOutputCallback log_callback) -> SBDebugger
     |  
     |  Destroy(*args)
     |      Destroy(SBDebugger debugger)
     |  
     |  FindDebuggerWithID(*args)
     |      FindDebuggerWithID(int id) -> SBDebugger
     |  
     |  GetDefaultArchitecture(*args)
     |      GetDefaultArchitecture(str arch_name, size_t arch_name_len) -> bool
     |  
     |  GetInternalVariableValue(*args)
     |      GetInternalVariableValue(str var_name, str debugger_instance_name) -> SBStringList
     |  
     |  GetVersionString()
     |      GetVersionString() -> str
     |  
     |  Initialize()
     |      Initialize()
     |  
     |  MemoryPressureDetected()
     |      MemoryPressureDetected()
     |  
     |  SetDefaultArchitecture(*args)
     |      SetDefaultArchitecture(str arch_name) -> bool
     |  
     |  SetInternalVariable(*args)
     |      SetInternalVariable(str var_name, str value, str debugger_instance_name) -> SBError
     |  
     |  StateAsCString(*args)
     |      StateAsCString(StateType state) -> str
     |  
     |  StateIsRunningState(*args)
     |      StateIsRunningState(StateType state) -> bool
     |  
     |  StateIsStoppedState(*args)
     |      StateIsStoppedState(StateType state) -> bool
     |  
     |  Terminate()
     |      Terminate()
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBDebugger>
     |      delete_SBDebugger(SBDebugger self)
     |  
     |  __swig_getmethods__ = {'Create': <function <lambda>>, 'Destroy': <func...
     |  
     |  __swig_setmethods__ = {}
    
    class SBDeclaration(__builtin__.object)
     |  Specifies an association with a line and column for a variable.
     |  
     |  Methods defined here:
     |  
     |  GetColumn(self)
     |      GetColumn(self) -> uint32_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileSpec(self)
     |      GetFileSpec(self) -> SBFileSpec
     |  
     |  GetLine(self)
     |      GetLine(self) -> uint32_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetColumn(self, *args)
     |      SetColumn(self, uint32_t column)
     |  
     |  SetFileSpec(self, *args)
     |      SetFileSpec(self, SBFileSpec filespec)
     |  
     |  SetLine(self, *args)
     |      SetLine(self, uint32_t line)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBDeclaration
     |      __init__(self, SBDeclaration rhs) -> SBDeclaration
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  column
     |      A read only property that returns the 1 based column number for this line entry, a return value of zero indicates that no column information is available.
     |  
     |  file
     |      A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this line entry.
     |  
     |  ling
     |      A read only property that returns the 1 based line number for this line entry, a return value of zero indicates that no line information is available.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBDeclaration>
     |      delete_SBDeclaration(SBDeclaration self)
     |  
     |  __swig_getmethods__ = {'column': <function GetColumn>, 'file': <functi...
     |  
     |  __swig_setmethods__ = {}
    
    class SBError(__builtin__.object)
     |  Represents a container for holding any error code.
     |  
     |  For example (from test/python_api/hello_world/TestHelloWorld.py),
     |  
     |      def hello_world_attach_with_id_api(self):
     |          '''Create target, spawn a process, and attach to it by id.'''
     |  
     |          target = self.dbg.CreateTarget(self.exe)
     |  
     |          # Spawn a new process and don't display the stdout if not in TraceOn() mode.
     |          import subprocess
     |          popen = subprocess.Popen([self.exe, 'abc', 'xyz'],
     |                                   stdout = open(os.devnull, 'w') if not self.TraceOn() else None)
     |  
     |          listener = lldb.SBListener('my.attach.listener')
     |          error = lldb.SBError()
     |          process = target.AttachToProcessWithID(listener, popen.pid, error)
     |  
     |          self.assertTrue(error.Success() and process, PROCESS_IS_VALID)
     |  
     |          # Let's check the stack traces of the attached process.
     |          import lldbutil
     |          stacktraces = lldbutil.print_stacktraces(process, string_buffer=True)
     |          self.expect(stacktraces, exe=False,
     |              substrs = ['main.c:%d' % self.line2,
     |                         '(int)argc=3'])
     |  
     |          listener = lldb.SBListener('my.attach.listener')
     |          error = lldb.SBError()
     |          process = target.AttachToProcessWithID(listener, popen.pid, error)
     |  
     |          self.assertTrue(error.Success() and process, PROCESS_IS_VALID)
     |  
     |  checks that after the attach, there is no error condition by asserting
     |  that error.Success() is True and we get back a valid process object.
     |  
     |  And (from test/python_api/event/TestEvent.py),
     |  
     |          # Now launch the process, and do not stop at entry point.
     |          error = lldb.SBError()
     |          process = target.Launch(listener, None, None, None, None, None, None, 0, False, error)
     |          self.assertTrue(error.Success() and process, PROCESS_IS_VALID)
     |  
     |  checks that after calling the target.Launch() method there's no error
     |  condition and we get back a void process object.
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  Fail(self)
     |      Fail(self) -> bool
     |  
     |  GetCString(self)
     |      GetCString(self) -> str
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetError(self)
     |      GetError(self) -> uint32_t
     |  
     |  GetType(self)
     |      GetType(self) -> ErrorType
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetError(self, *args)
     |      SetError(self, uint32_t err, ErrorType type)
     |  
     |  SetErrorString(self, *args)
     |      SetErrorString(self, str err_str)
     |  
     |  SetErrorStringWithFormat(self, *args)
     |      SetErrorStringWithFormat(self, str format, v(...) *args) -> int
     |  
     |  SetErrorToErrno(self)
     |      SetErrorToErrno(self)
     |  
     |  SetErrorToGenericError(self)
     |      SetErrorToGenericError(self)
     |  
     |  Success(self)
     |      Success(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBError
     |      __init__(self, SBError rhs) -> SBError
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  description
     |      A read only property that returns the same result as GetCString().
     |  
     |  fail
     |      A read only property that returns the same result as Fail().
     |  
     |  success
     |      A read only property that returns the same result as Success().
     |  
     |  type
     |      A read only property that returns the same result as GetType().
     |  
     |  value
     |      A read only property that returns the same result as GetError().
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBError>
     |      delete_SBError(SBError self)
     |  
     |  __swig_getmethods__ = {'description': <function GetCString>, 'fail': <...
     |  
     |  __swig_setmethods__ = {}
    
    class SBEvent(__builtin__.object)
     |  API clients can register to receive events.
     |  
     |  For example, check out the following output:
     |  
     |  Try wait for event...
     |  Event description: 0x103d0bb70 Event: broadcaster = 0x1009c8410, type = 0x00000001, data = { process = 0x1009c8400 (pid = 21528), state = running}
     |  Event data flavor: Process::ProcessEventData
     |  Process state: running
     |  
     |  Try wait for event...
     |  Event description: 0x103a700a0 Event: broadcaster = 0x1009c8410, type = 0x00000001, data = { process = 0x1009c8400 (pid = 21528), state = stopped}
     |  Event data flavor: Process::ProcessEventData
     |  Process state: stopped
     |  
     |  Try wait for event...
     |  Event description: 0x103d0d4a0 Event: broadcaster = 0x1009c8410, type = 0x00000001, data = { process = 0x1009c8400 (pid = 21528), state = exited}
     |  Event data flavor: Process::ProcessEventData
     |  Process state: exited
     |  
     |  Try wait for event...
     |  timeout occurred waiting for event...
     |  
     |  from test/python_api/event/TestEventspy:
     |  
     |      def do_listen_for_and_print_event(self):
     |          '''Create a listener and use SBEvent API to print the events received.'''
     |          exe = os.path.join(os.getcwd(), 'a.out')
     |  
     |          # Create a target by the debugger.
     |          target = self.dbg.CreateTarget(exe)
     |          self.assertTrue(target, VALID_TARGET)
     |  
     |          # Now create a breakpoint on main.c by name 'c'.
     |          breakpoint = target.BreakpointCreateByName('c', 'a.out')
     |  
     |          # Now launch the process, and do not stop at the entry point.
     |          process = target.LaunchSimple(None, None, os.getcwd())
     |          self.assertTrue(process.GetState() == lldb.eStateStopped,
     |                          PROCESS_STOPPED)
     |  
     |          # Get a handle on the process's broadcaster.
     |          broadcaster = process.GetBroadcaster()
     |  
     |          # Create an empty event object.
     |          event = lldb.SBEvent()
     |  
     |          # Create a listener object and register with the broadcaster.
     |          listener = lldb.SBListener('my listener')
     |          rc = broadcaster.AddListener(listener, lldb.SBProcess.eBroadcastBitStateChanged)
     |          self.assertTrue(rc, 'AddListener successfully retruns')
     |  
     |          traceOn = self.TraceOn()
     |          if traceOn:
     |              lldbutil.print_stacktraces(process)
     |  
     |          # Create MyListeningThread class to wait for any kind of event.
     |          import threading
     |          class MyListeningThread(threading.Thread):
     |              def run(self):
     |                  count = 0
     |                  # Let's only try at most 4 times to retrieve any kind of event.
     |                  # After that, the thread exits.
     |                  while not count > 3:
     |                      if traceOn:
     |                          print 'Try wait for event...'
     |                      if listener.WaitForEventForBroadcasterWithType(5,
     |                                                                     broadcaster,
     |                                                                     lldb.SBProcess.eBroadcastBitStateChanged,
     |                                                                     event):
     |                          if traceOn:
     |                              desc = lldbutil.get_description(event)
     |                              print 'Event description:', desc
     |                              print 'Event data flavor:', event.GetDataFlavor()
     |                              print 'Process state:', lldbutil.state_type_to_str(process.GetState())
     |                              print
     |                      else:
     |                          if traceOn:
     |                              print 'timeout occurred waiting for event...'
     |                      count = count + 1
     |                  return
     |  
     |          # Let's start the listening thread to retrieve the events.
     |          my_thread = MyListeningThread()
     |          my_thread.start()
     |  
     |          # Use Python API to continue the process.  The listening thread should be
     |          # able to receive the state changed events.
     |          process.Continue()
     |  
     |          # Use Python API to kill the process.  The listening thread should be
     |          # able to receive the state changed event, too.
     |          process.Kill()
     |  
     |          # Wait until the 'MyListeningThread' terminates.
     |          my_thread.join()
     |  
     |  Methods defined here:
     |  
     |  BroadcasterMatchesRef(self, *args)
     |      BroadcasterMatchesRef(self, SBBroadcaster broadcaster) -> bool
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetBroadcaster(self)
     |      GetBroadcaster(self) -> SBBroadcaster
     |  
     |  GetBroadcasterClass(self)
     |      GetBroadcasterClass(self) -> str
     |  
     |  GetDataFlavor(self)
     |      GetDataFlavor(self) -> str
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetType(self)
     |      GetType(self) -> uint32_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBEvent
     |      __init__(self, SBEvent rhs) -> SBEvent
     |      __init__(self, int type, str data) -> SBEvent (make an event that contains a C string)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetCStringFromEvent(*args)
     |      GetCStringFromEvent(SBEvent event) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBEvent>
     |      delete_SBEvent(SBEvent self)
     |  
     |  __swig_getmethods__ = {'GetCStringFromEvent': <function <lambda>>}
     |  
     |  __swig_setmethods__ = {}
    
    class SBExpressionOptions(__builtin__.object)
     |  A container for options to use when evaluating expressions.
     |  
     |  Methods defined here:
     |  
     |  GetCoerceResultToId(self)
     |      GetCoerceResultToId(self) -> bool
     |  
     |  GetFetchDynamicValue(self)
     |      GetFetchDynamicValue(self) -> DynamicValueType
     |  
     |  GetTimeoutInMicroSeconds(self)
     |      GetTimeoutInMicroSeconds(self) -> uint32_t
     |  
     |  GetTryAllThreads(self)
     |      GetTryAllThreads(self) -> bool
     |  
     |  GetUnwindOnError(self)
     |      GetUnwindOnError(self) -> bool
     |  
     |  SetCoerceResultToId(self, coerce=True)
     |      SetCoerceResultToId(self, bool coerce = True)
     |      SetCoerceResultToId(self)
     |      
     |      Sets whether to coerce the expression result to ObjC id type after evaluation.
     |  
     |  SetFetchDynamicValue(self, *args)
     |      SetFetchDynamicValue(self, DynamicValueType dynamic = eDynamicCanRunTarget)
     |      SetFetchDynamicValue(self)
     |      
     |      Sets whether to cast the expression result to its dynamic type.
     |  
     |  SetTimeoutInMicroSeconds(self, timeout=0)
     |      SetTimeoutInMicroSeconds(self, uint32_t timeout = 0)
     |      SetTimeoutInMicroSeconds(self)
     |      
     |      Sets the timeout in microseconds to run the expression for. If try all threads is set to true and the expression doesn't complete within the specified timeout, all threads will be resumed for the same timeout to see if the expresson will finish.
     |  
     |  SetTryAllThreads(self, run_others=True)
     |      SetTryAllThreads(self, bool run_others = True)
     |      SetTryAllThreads(self)
     |      
     |      Sets whether to run all threads if the expression does not complete on one thread.
     |  
     |  SetUnwindOnError(self, unwind=False)
     |      SetUnwindOnError(self, bool unwind = False)
     |      SetUnwindOnError(self)
     |      
     |      Sets whether to unwind the expression stack on error.
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBExpressionOptions
     |      __init__(self, SBExpressionOptions rhs) -> SBExpressionOptions
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBExpressionOptions>
     |      delete_SBExpressionOptions(SBExpressionOptions self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBFileSpec(__builtin__.object)
     |  Represents a file specfication that divides the path into a directory and
     |  basename.  The string values of the paths are put into uniqued string pools
     |  for fast comparisons and efficient memory usage.
     |  
     |  For example, the following code
     |  
     |          lineEntry = context.GetLineEntry()
     |          self.expect(lineEntry.GetFileSpec().GetDirectory(), 'The line entry should have the correct directory',
     |                      exe=False,
     |              substrs = [self.mydir])
     |          self.expect(lineEntry.GetFileSpec().GetFilename(), 'The line entry should have the correct filename',
     |                      exe=False,
     |              substrs = ['main.c'])
     |          self.assertTrue(lineEntry.GetLine() == self.line,
     |                          'The line entry's line number should match ')
     |  
     |  gets the line entry from the symbol context when a thread is stopped.
     |  It gets the file spec corresponding to the line entry and checks that
     |  the filename and the directory matches wat we expect.
     |  
     |  Methods defined here:
     |  
     |  Exists(self)
     |      Exists(self) -> bool
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetDirectory(self)
     |      GetDirectory(self) -> str
     |  
     |  GetFilename(self)
     |      GetFilename(self) -> str
     |  
     |  GetPath(self, *args)
     |      GetPath(self, str dst_path, size_t dst_len) -> uint32_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  ResolveExecutableLocation(self)
     |      ResolveExecutableLocation(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __get_fullpath__(self)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBFileSpec
     |      __init__(self, SBFileSpec rhs) -> SBFileSpec
     |      __init__(self, str path) -> SBFileSpec
     |      __init__(self, str path, bool resolve) -> SBFileSpec
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ResolvePath(*args)
     |      ResolvePath(str src_path, str dst_path, size_t dst_len) -> int
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  basename
     |      A read only property that returns the path basename as a python string.
     |  
     |  dirname
     |      A read only property that returns the path directory name as a python string.
     |  
     |  exists
     |      A read only property that returns a boolean value that indicates if the file exists.
     |  
     |  fullpath
     |      A read only property that returns the fullpath as a python string.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBFileSpec>
     |      delete_SBFileSpec(SBFileSpec self)
     |  
     |  __swig_getmethods__ = {'ResolvePath': <function <lambda>>, 'basename':...
     |  
     |  __swig_setmethods__ = {}
    
    class SBFileSpecList(__builtin__.object)
     |  Proxy of C++ lldb::SBFileSpecList class
     |  
     |  Methods defined here:
     |  
     |  Append(self, *args)
     |      Append(self, SBFileSpec sb_file)
     |  
     |  AppendIfUnique(self, *args)
     |      AppendIfUnique(self, SBFileSpec sb_file) -> bool
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  FindFileIndex(self, *args)
     |      FindFileIndex(self, uint32_t idx, SBFileSpec sb_file, bool full) -> uint32_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileSpecAtIndex(self, *args)
     |      GetFileSpecAtIndex(self, uint32_t idx) -> SBFileSpec
     |  
     |  GetSize(self)
     |      GetSize(self) -> uint32_t
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBFileSpecList
     |      __init__(self, SBFileSpecList rhs) -> SBFileSpecList
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBFileSpecList>
     |      delete_SBFileSpecList(SBFileSpecList self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBFrame(__builtin__.object)
     |  Represents one of the stack frames associated with a thread.
     |  SBThread contains SBFrame(s). For example (from test/lldbutil.py),
     |  
     |  def print_stacktrace(thread, string_buffer = False):
     |      '''Prints a simple stack trace of this thread.'''
     |  
     |      ...
     |  
     |      for i in range(depth):
     |          frame = thread.GetFrameAtIndex(i)
     |          function = frame.GetFunction()
     |  
     |          load_addr = addrs[i].GetLoadAddress(target)
     |          if not function:
     |              file_addr = addrs[i].GetFileAddress()
     |              start_addr = frame.GetSymbol().GetStartAddress().GetFileAddress()
     |              symbol_offset = file_addr - start_addr
     |              print >> output, '  frame #{num}: {addr:#016x} {mod}`{symbol} + {offset}'.format(
     |                  num=i, addr=load_addr, mod=mods[i], symbol=symbols[i], offset=symbol_offset)
     |          else:
     |              print >> output, '  frame #{num}: {addr:#016x} {mod}`{func} at {file}:{line} {args}'.format(
     |                  num=i, addr=load_addr, mod=mods[i],
     |                  func='%s [inlined]' % funcs[i] if frame.IsInlined() else funcs[i],
     |                  file=files[i], line=lines[i],
     |                  args=get_args_as_string(frame, showFuncName=False) if not frame.IsInlined() else '()')
     |  
     |      ...
     |  
     |  And,
     |  
     |      for frame in thread:
     |          print frame
     |  
     |  See also SBThread.
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  Disassemble(self)
     |      Disassemble(self) -> str
     |  
     |  EvaluateExpression(self, *args)
     |      EvaluateExpression(self, str expr) -> SBValue
     |      EvaluateExpression(self, str expr, DynamicValueType use_dynamic) -> SBValue
     |      EvaluateExpression(self, str expr, DynamicValueType use_dynamic, bool unwind_on_error) -> SBValue
     |      EvaluateExpression(self, str expr, SBExpressionOptions options) -> SBValue
     |      
     |      The version that doesn't supply a 'use_dynamic' value will use the
     |      target's default.
     |  
     |  FindValue(self, *args)
     |      FindValue(self, str name, ValueType value_type) -> SBValue
     |      FindValue(self, str name, ValueType value_type, DynamicValueType use_dynamic) -> SBValue
     |      
     |      Find variables, register sets, registers, or persistent variables using
     |      the frame as the scope.
     |      
     |      The version that doesn't supply a 'use_dynamic' value will use the
     |      target's default.
     |  
     |  FindVariable(self, *args)
     |      FindVariable(self, str var_name) -> SBValue
     |      FindVariable(self, str var_name, DynamicValueType use_dynamic) -> SBValue
     |      
     |      The version that doesn't supply a 'use_dynamic' value will use the
     |      target's default.
     |  
     |  GetBlock(self)
     |      GetBlock(self) -> SBBlock
     |      
     |      Gets the deepest block that contains the frame PC.
     |      
     |      See also GetFrameBlock().
     |  
     |  GetCompileUnit(self)
     |      GetCompileUnit(self) -> SBCompileUnit
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFP(self)
     |      GetFP(self) -> addr_t
     |  
     |  GetFrameBlock(self)
     |      GetFrameBlock(self) -> SBBlock
     |      
     |      Gets the lexical block that defines the stack frame. Another way to think
     |      of this is it will return the block that contains all of the variables
     |      for a stack frame. Inlined functions are represented as SBBlock objects
     |      that have inlined function information: the name of the inlined function,
     |      where it was called from. The block that is returned will be the first 
     |      block at or above the block for the PC (SBFrame::GetBlock()) that defines
     |      the scope of the frame. When a function contains no inlined functions,
     |      this will be the top most lexical block that defines the function. 
     |      When a function has inlined functions and the PC is currently
     |      in one of those inlined functions, this method will return the inlined
     |      block that defines this frame. If the PC isn't currently in an inlined
     |      function, the lexical block that defines the function is returned.
     |  
     |  GetFrameID(self)
     |      GetFrameID(self) -> uint32_t
     |  
     |  GetFunction(self)
     |      GetFunction(self) -> SBFunction
     |  
     |  GetFunctionName(self)
     |      GetFunctionName(self) -> str
     |      
     |      Get the appropriate function name for this frame. Inlined functions in
     |      LLDB are represented by Blocks that have inlined function information, so
     |      just looking at the SBFunction or SBSymbol for a frame isn't enough.
     |      This function will return the appriopriate function, symbol or inlined
     |      function name for the frame.
     |      
     |      This function returns:
     |      - the name of the inlined function (if there is one)
     |      - the name of the concrete function (if there is one)
     |      - the name of the symbol (if there is one)
     |      - NULL
     |      
     |      See also IsInlined().
     |  
     |  GetLineEntry(self)
     |      GetLineEntry(self) -> SBLineEntry
     |  
     |  GetModule(self)
     |      GetModule(self) -> SBModule
     |  
     |  GetPC(self)
     |      GetPC(self) -> addr_t
     |  
     |  GetPCAddress(self)
     |      GetPCAddress(self) -> SBAddress
     |  
     |  GetRegisters(self)
     |      GetRegisters(self) -> SBValueList
     |  
     |  GetSP(self)
     |      GetSP(self) -> addr_t
     |  
     |  GetSymbol(self)
     |      GetSymbol(self) -> SBSymbol
     |  
     |  GetSymbolContext(self, *args)
     |      GetSymbolContext(self, uint32_t resolve_scope) -> SBSymbolContext
     |  
     |  GetThread(self)
     |      GetThread(self) -> SBThread
     |  
     |  GetValueForVariablePath(self, *args)
     |      GetValueForVariablePath(self, str var_path) -> SBValue
     |      GetValueForVariablePath(self, str var_path, DynamicValueType use_dynamic) -> SBValue
     |      
     |      Get a lldb.SBValue for a variable path. 
     |      
     |      Variable paths can include access to pointer or instance members:
     |          rect_ptr->origin.y
     |          pt.x
     |      Pointer dereferences:
     |          *this->foo_ptr
     |          **argv
     |      Address of:
     |          &pt
     |          &my_array[3].x
     |      Array accesses and treating pointers as arrays:
     |          int_array[1]
     |          pt_ptr[22].x
     |      
     |      Unlike EvaluateExpression() which returns lldb.SBValue objects
     |      with constant copies of the values at the time of evaluation,
     |      the result of this function is a value that will continue to
     |      track the current value of the value as execution progresses
     |      in the current frame.
     |  
     |  GetVariables(self, *args)
     |      GetVariables(self, bool arguments, bool locals, bool statics, bool in_scope_only) -> SBValueList
     |      GetVariables(self, bool arguments, bool locals, bool statics, bool in_scope_only, 
     |          DynamicValueType use_dynamic) -> SBValueList
     |      
     |      The version that doesn't supply a 'use_dynamic' value will use the
     |      target's default.
     |  
     |  IsEqual(self, *args)
     |      IsEqual(self, SBFrame rhs) -> bool
     |  
     |  IsInlined(self)
     |      IsInlined(self) -> bool
     |      
     |      Return true if this frame represents an inlined function.
     |      
     |      See also GetFunctionName().
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetPC(self, *args)
     |      SetPC(self, addr_t new_pc) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBFrame
     |      __init__(self, SBFrame rhs) -> SBFrame
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_all_variables(self)
     |  
     |  get_arguments(self)
     |  
     |  get_locals(self)
     |  
     |  get_statics(self)
     |  
     |  var(self, var_expr_path)
     |      Calls through to lldb.SBFrame.GetValueForVariablePath() and returns 
     |      a value that represents the variable expression path
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns the program counter (PC) as a section offset address (lldb.SBAddress).
     |  
     |  args
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the argument variables in this stack frame.
     |  
     |  arguments
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the argument variables in this stack frame.
     |  
     |  block
     |      A read only property that returns an lldb object that represents the block (lldb.SBBlock) for this stack frame.
     |  
     |  compile_unit
     |      A read only property that returns an lldb object that represents the compile unit (lldb.SBCompileUnit) for this stack frame.
     |  
     |  disassembly
     |      A read only property that returns the disassembly for this stack frame as a python string.
     |  
     |  fp
     |      A read only property that returns the frame pointer (FP) as an unsigned integer.
     |  
     |  function
     |      A read only property that returns an lldb object that represents the function (lldb.SBFunction) for this stack frame.
     |  
     |  idx
     |      A read only property that returns the zero based stack frame index.
     |  
     |  is_inlined
     |      A read only property that returns an boolean that indicates if the block frame is an inlined function.
     |  
     |  line_entry
     |      A read only property that returns an lldb object that represents the line table entry (lldb.SBLineEntry) for this stack frame.
     |  
     |  locals
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the local variables in this stack frame.
     |  
     |  module
     |      A read only property that returns an lldb object that represents the module (lldb.SBModule) for this stack frame.
     |  
     |  name
     |      A read only property that retuns the name for the function that this frame represents. Inlined stack frame might have a concrete function that differs from the name of the inlined function (a named lldb.SBBlock).
     |  
     |  pc
     |      GetPC(self) -> addr_t
     |  
     |  registers
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the CPU registers for this stack frame.
     |  
     |  regs
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the CPU registers for this stack frame.
     |  
     |  sp
     |      A read only property that returns the stack pointer (SP) as an unsigned integer.
     |  
     |  statics
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the static variables in this stack frame.
     |  
     |  symbol
     |      A read only property that returns an lldb object that represents the symbol (lldb.SBSymbol) for this stack frame.
     |  
     |  thread
     |      A read only property that returns an lldb object that represents the thread (lldb.SBThread) for this stack frame.
     |  
     |  variables
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the variables in this stack frame.
     |  
     |  vars
     |      A read only property that returns a list() that contains a collection of lldb.SBValue objects that represent the variables in this stack frame.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBFrame>
     |      delete_SBFrame(SBFrame self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetPCAddress>, 'args': <funct...
     |  
     |  __swig_setmethods__ = {'pc': <function SetPC>}
    
    class SBFunction(__builtin__.object)
     |  Represents a generic function, which can be inlined or not.
     |  
     |  For example (from test/lldbutil.py, but slightly modified for doc purpose),
     |  
     |          ...
     |  
     |          frame = thread.GetFrameAtIndex(i)
     |          addr = frame.GetPCAddress()
     |          load_addr = addr.GetLoadAddress(target)
     |          function = frame.GetFunction()
     |          mod_name = frame.GetModule().GetFileSpec().GetFilename()
     |  
     |          if not function:
     |              # No debug info for 'function'.
     |              symbol = frame.GetSymbol()
     |              file_addr = addr.GetFileAddress()
     |              start_addr = symbol.GetStartAddress().GetFileAddress()
     |              symbol_name = symbol.GetName()
     |              symbol_offset = file_addr - start_addr
     |              print >> output, '  frame #{num}: {addr:#016x} {mod}`{symbol} + {offset}'.format(
     |                  num=i, addr=load_addr, mod=mod_name, symbol=symbol_name, offset=symbol_offset)
     |          else:
     |              # Debug info is available for 'function'.
     |              func_name = frame.GetFunctionName()
     |              file_name = frame.GetLineEntry().GetFileSpec().GetFilename()
     |              line_num = frame.GetLineEntry().GetLine()
     |              print >> output, '  frame #{num}: {addr:#016x} {mod}`{func} at {file}:{line} {args}'.format(
     |                  num=i, addr=load_addr, mod=mod_name,
     |                  func='%s [inlined]' % func_name] if frame.IsInlined() else func_name,
     |                  file=file_name, line=line_num, args=get_args_as_string(frame, showFuncName=False))
     |  
     |          ...
     |  
     |  Methods defined here:
     |  
     |  GetBlock(self)
     |      GetBlock(self) -> SBBlock
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetEndAddress(self)
     |      GetEndAddress(self) -> SBAddress
     |  
     |  GetInstructions(self, *args)
     |      GetInstructions(self, SBTarget target) -> SBInstructionList
     |  
     |  GetMangledName(self)
     |      GetMangledName(self) -> str
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetPrologueByteSize(self)
     |      GetPrologueByteSize(self) -> uint32_t
     |  
     |  GetStartAddress(self)
     |      GetStartAddress(self) -> SBAddress
     |  
     |  GetType(self)
     |      GetType(self) -> SBType
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBFunction
     |      __init__(self, SBFunction rhs) -> SBFunction
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_instructions_from_current_target(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb object that represents the start address (lldb.SBAddress) for this function.
     |  
     |  block
     |      A read only property that returns an lldb object that represents the top level lexical block (lldb.SBBlock) for this function.
     |  
     |  end_addr
     |      A read only property that returns an lldb object that represents the end address (lldb.SBAddress) for this function.
     |  
     |  instructions
     |      A read only property that returns an lldb object that represents the instructions (lldb.SBInstructionList) for this function.
     |  
     |  mangled
     |      A read only property that returns the mangled (linkage) name for this function as a string.
     |  
     |  name
     |      A read only property that returns the name for this function as a string.
     |  
     |  prologue_size
     |      A read only property that returns the size in bytes of the prologue instructions as an unsigned integer.
     |  
     |  type
     |      A read only property that returns an lldb object that represents the return type (lldb.SBType) for this function.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBFunction>
     |      delete_SBFunction(SBFunction self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetStartAddress>, 'block': <f...
     |  
     |  __swig_setmethods__ = {}
    
    class SBHostOS(__builtin__.object)
     |  Proxy of C++ lldb::SBHostOS class
     |  
     |  Methods defined here:
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self)
     |      __init__(self) -> SBHostOS
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetProgramFileSpec()
     |      GetProgramFileSpec() -> SBFileSpec
     |  
     |  ThreadCancel(*args)
     |      ThreadCancel(thread_t thread, SBError err) -> bool
     |  
     |  ThreadCreate(*args)
     |      ThreadCreate(str name, void thread_function, void thread_arg, SBError err) -> thread_t
     |  
     |  ThreadCreated(*args)
     |      ThreadCreated(str name)
     |  
     |  ThreadDetach(*args)
     |      ThreadDetach(thread_t thread, SBError err) -> bool
     |  
     |  ThreadJoin(*args)
     |      ThreadJoin(thread_t thread, void result, SBError err) -> bool
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBHostOS>
     |      delete_SBHostOS(SBHostOS self)
     |  
     |  __swig_getmethods__ = {'GetProgramFileSpec': <function <lambda>>, 'Thr...
     |  
     |  __swig_setmethods__ = {}
    
    class SBInputReader(__builtin__.object)
     |  Proxy of C++ lldb::SBInputReader class
     |  
     |  Methods defined here:
     |  
     |  GetGranularity(self)
     |      GetGranularity(self) -> InputReaderGranularity
     |  
     |  Initialize(self, *args)
     |      Initialize(self, SBDebugger debugger, Callback callback, InputReaderGranularity granularity, 
     |          str end_token, str prompt, 
     |          bool echo) -> SBError
     |  
     |  IsActive(self)
     |      IsActive(self) -> bool
     |  
     |  IsDone(self)
     |      IsDone(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetIsDone(self, *args)
     |      SetIsDone(self, bool value)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBInputReader
     |      __init__(self, SBInputReader rhs) -> SBInputReader
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBInputReader>
     |      delete_SBInputReader(SBInputReader self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBInstruction(__builtin__.object)
     |  Proxy of C++ lldb::SBInstruction class
     |  
     |  Methods defined here:
     |  
     |  DoesBranch(self)
     |      DoesBranch(self) -> bool
     |  
     |  DumpEmulation(self, *args)
     |      DumpEmulation(self, str triple) -> bool
     |  
     |  EmulateWithFrame(self, *args)
     |      EmulateWithFrame(self, SBFrame frame, uint32_t evaluate_options) -> bool
     |  
     |  GetAddress(self)
     |      GetAddress(self) -> SBAddress
     |  
     |  GetAddressClass(self)
     |      GetAddressClass(self) -> AddressClass
     |  
     |  GetByteSize(self)
     |      GetByteSize(self) -> size_t
     |  
     |  GetComment(self, *args)
     |      GetComment(self, SBTarget target) -> str
     |  
     |  GetData(self, *args)
     |      GetData(self, SBTarget target) -> SBData
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetMnemonic(self, *args)
     |      GetMnemonic(self, SBTarget target) -> str
     |  
     |  GetOperands(self, *args)
     |      GetOperands(self, SBTarget target) -> str
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Print(self, *args)
     |      Print(self, FILE out)
     |  
     |  TestEmulation(self, *args)
     |      TestEmulation(self, SBStream output_stream, str test_file) -> bool
     |  
     |  __comment_property__(self)
     |  
     |  __del__ lambda self
     |  
     |  __file_addr_property__(self)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBInstruction
     |      __init__(self, SBInstruction rhs) -> SBInstruction
     |  
     |  __load_adrr_property__(self)
     |  
     |  __mnemonic_property__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __operands_property__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb object that represents the address (lldb.SBAddress) for this instruction.
     |  
     |  comment
     |      A read only property that returns the comment for this instruction as a string.
     |  
     |  is_branch
     |      A read only property that returns a boolean value that indicates if this instruction is a branch instruction.
     |  
     |  mnemonic
     |      A read only property that returns the mnemonic for this instruction as a string.
     |  
     |  operands
     |      A read only property that returns the operands for this instruction as a string.
     |  
     |  size
     |      A read only property that returns the size in bytes for this instruction as an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBInstruction>
     |      delete_SBInstruction(SBInstruction self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetAddress>, 'comment': <func...
     |  
     |  __swig_setmethods__ = {}
    
    class SBInstructionList(__builtin__.object)
     |  Represents a list of machine instructions.  SBFunction and SBSymbol have
     |  GetInstructions() methods which return SBInstructionList instances.
     |  
     |  SBInstructionList supports instruction (SBInstruction instance) iteration.
     |  For example (see also SBDebugger for a more complete example),
     |  
     |  def disassemble_instructions (insts):
     |      for i in insts:
     |          print i
     |  
     |  defines a function which takes an SBInstructionList instance and prints out
     |  the machine instructions in assembly format.
     |  
     |  Methods defined here:
     |  
     |  AppendInstruction(self, *args)
     |      AppendInstruction(self, SBInstruction inst)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  DumpEmulationForAllInstructions(self, *args)
     |      DumpEmulationForAllInstructions(self, str triple) -> bool
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetInstructionAtIndex(self, *args)
     |      GetInstructionAtIndex(self, uint32_t idx) -> SBInstruction
     |  
     |  GetSize(self)
     |      GetSize(self) -> size_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Print(self, *args)
     |      Print(self, FILE out)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __getitem__(self, key)
     |      Access instructions by integer index for array access or by lldb.SBAddress to find an instruction that matches a section offset address object.
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBInstructionList
     |      __init__(self, SBInstructionList rhs) -> SBInstructionList
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |      Access len of the instruction list.
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBInstructionList>
     |      delete_SBInstructionList(SBInstructionList self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBLaunchInfo(__builtin__.object)
     |  Proxy of C++ lldb::SBLaunchInfo class
     |  
     |  Methods defined here:
     |  
     |  AddCloseFileAction(self, *args)
     |      AddCloseFileAction(self, int fd) -> bool
     |  
     |  AddDuplicateFileAction(self, *args)
     |      AddDuplicateFileAction(self, int fd, int dup_fd) -> bool
     |  
     |  AddOpenFileAction(self, *args)
     |      AddOpenFileAction(self, int fd, str path, bool read, bool write) -> bool
     |  
     |  AddSuppressFileAction(self, *args)
     |      AddSuppressFileAction(self, int fd, bool read, bool write) -> bool
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetArgumentAtIndex(self, *args)
     |      GetArgumentAtIndex(self, uint32_t idx) -> str
     |  
     |  GetEnvironmentEntryAtIndex(self, *args)
     |      GetEnvironmentEntryAtIndex(self, uint32_t idx) -> str
     |  
     |  GetGroupID(self)
     |      GetGroupID(self) -> uint32_t
     |  
     |  GetLaunchFlags(self)
     |      GetLaunchFlags(self) -> uint32_t
     |  
     |  GetNumArguments(self)
     |      GetNumArguments(self) -> uint32_t
     |  
     |  GetNumEnvironmentEntries(self)
     |      GetNumEnvironmentEntries(self) -> uint32_t
     |  
     |  GetProcessPluginName(self)
     |      GetProcessPluginName(self) -> str
     |  
     |  GetResumeCount(self)
     |      GetResumeCount(self) -> uint32_t
     |  
     |  GetShell(self)
     |      GetShell(self) -> str
     |  
     |  GetUserID(self)
     |      GetUserID(self) -> uint32_t
     |  
     |  GetWorkingDirectory(self)
     |      GetWorkingDirectory(self) -> str
     |  
     |  GroupIDIsValid(self)
     |      GroupIDIsValid(self) -> bool
     |  
     |  SetArguments(self, *args)
     |      SetArguments(self, list argv, bool append)
     |  
     |  SetEnvironmentEntries(self, *args)
     |      SetEnvironmentEntries(self, list envp, bool append)
     |  
     |  SetGroupID(self, *args)
     |      SetGroupID(self, uint32_t gid)
     |  
     |  SetLaunchFlags(self, *args)
     |      SetLaunchFlags(self, uint32_t flags)
     |  
     |  SetProcessPluginName(self, *args)
     |      SetProcessPluginName(self, str plugin_name)
     |  
     |  SetResumeCount(self, *args)
     |      SetResumeCount(self, uint32_t c)
     |  
     |  SetShell(self, *args)
     |      SetShell(self, str path)
     |  
     |  SetUserID(self, *args)
     |      SetUserID(self, uint32_t uid)
     |  
     |  SetWorkingDirectory(self, *args)
     |      SetWorkingDirectory(self, str working_dir)
     |  
     |  UserIDIsValid(self)
     |      UserIDIsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self, list argv) -> SBLaunchInfo
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBLaunchInfo>
     |      delete_SBLaunchInfo(SBLaunchInfo self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBLineEntry(__builtin__.object)
     |  Specifies an association with a contiguous range of instructions and
     |  a source file location. SBCompileUnit contains SBLineEntry(s). For example,
     |  
     |      for lineEntry in compileUnit:
     |          print 'line entry: %s:%d' % (str(lineEntry.GetFileSpec()),
     |                                      lineEntry.GetLine())
     |          print 'start addr: %s' % str(lineEntry.GetStartAddress())
     |          print 'end   addr: %s' % str(lineEntry.GetEndAddress())
     |  
     |  produces:
     |  
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:20
     |  start addr: a.out[0x100000d98]
     |  end   addr: a.out[0x100000da3]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:21
     |  start addr: a.out[0x100000da3]
     |  end   addr: a.out[0x100000da9]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:22
     |  start addr: a.out[0x100000da9]
     |  end   addr: a.out[0x100000db6]
     |  line entry: /Volumes/data/lldb/svn/trunk/test/python_api/symbol-context/main.c:23
     |  start addr: a.out[0x100000db6]
     |  end   addr: a.out[0x100000dbc]
     |  ...
     |  
     |  See also SBCompileUnit.
     |  
     |  Methods defined here:
     |  
     |  GetColumn(self)
     |      GetColumn(self) -> uint32_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetEndAddress(self)
     |      GetEndAddress(self) -> SBAddress
     |  
     |  GetFileSpec(self)
     |      GetFileSpec(self) -> SBFileSpec
     |  
     |  GetLine(self)
     |      GetLine(self) -> uint32_t
     |  
     |  GetStartAddress(self)
     |      GetStartAddress(self) -> SBAddress
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetColumn(self, *args)
     |      SetColumn(self, uint32_t column)
     |  
     |  SetFileSpec(self, *args)
     |      SetFileSpec(self, SBFileSpec filespec)
     |  
     |  SetLine(self, *args)
     |      SetLine(self, uint32_t line)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBLineEntry
     |      __init__(self, SBLineEntry rhs) -> SBLineEntry
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb object that represents the start address (lldb.SBAddress) for this line entry.
     |  
     |  column
     |      A read only property that returns the 1 based column number for this line entry, a return value of zero indicates that no column information is available.
     |  
     |  end_addr
     |      A read only property that returns an lldb object that represents the end address (lldb.SBAddress) for this line entry.
     |  
     |  file
     |      A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this line entry.
     |  
     |  ling
     |      A read only property that returns the 1 based line number for this line entry, a return value of zero indicates that no line information is available.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBLineEntry>
     |      delete_SBLineEntry(SBLineEntry self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetStartAddress>, 'column': <...
     |  
     |  __swig_setmethods__ = {}
    
    class SBListener(__builtin__.object)
     |  API clients can register its own listener to debugger events.
     |  
     |  See aslo SBEvent for example usage of creating and adding a listener.
     |  
     |  Methods defined here:
     |  
     |  AddEvent(self, *args)
     |      AddEvent(self, SBEvent event)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetNextEvent(self, *args)
     |      GetNextEvent(self, SBEvent sb_event) -> bool
     |  
     |  GetNextEventForBroadcaster(self, *args)
     |      GetNextEventForBroadcaster(self, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
     |  
     |  GetNextEventForBroadcasterWithType(self, *args)
     |      GetNextEventForBroadcasterWithType(self, SBBroadcaster broadcaster, uint32_t event_type_mask, 
     |          SBEvent sb_event) -> bool
     |  
     |  HandleBroadcastEvent(self, *args)
     |      HandleBroadcastEvent(self, SBEvent event) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  PeekAtNextEvent(self, *args)
     |      PeekAtNextEvent(self, SBEvent sb_event) -> bool
     |  
     |  PeekAtNextEventForBroadcaster(self, *args)
     |      PeekAtNextEventForBroadcaster(self, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
     |  
     |  PeekAtNextEventForBroadcasterWithType(self, *args)
     |      PeekAtNextEventForBroadcasterWithType(self, SBBroadcaster broadcaster, uint32_t event_type_mask, 
     |          SBEvent sb_event) -> bool
     |  
     |  StartListeningForEventClass(self, *args)
     |      StartListeningForEventClass(self, SBDebugger debugger, str broadcaster_class, uint32_t event_mask) -> uint32_t
     |  
     |  StartListeningForEvents(self, *args)
     |      StartListeningForEvents(self, SBBroadcaster broadcaster, uint32_t event_mask) -> uint32_t
     |  
     |  StopListeningForEventClass(self, *args)
     |      StopListeningForEventClass(self, SBDebugger debugger, str broadcaster_class, uint32_t event_mask) -> uint32_t
     |  
     |  StopListeningForEvents(self, *args)
     |      StopListeningForEvents(self, SBBroadcaster broadcaster, uint32_t event_mask) -> bool
     |  
     |  WaitForEvent(self, *args)
     |      WaitForEvent(self, uint32_t num_seconds, SBEvent event) -> bool
     |  
     |  WaitForEventForBroadcaster(self, *args)
     |      WaitForEventForBroadcaster(self, uint32_t num_seconds, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
     |  
     |  WaitForEventForBroadcasterWithType(self, *args)
     |      WaitForEventForBroadcasterWithType(self, uint32_t num_seconds, SBBroadcaster broadcaster, uint32_t event_type_mask, 
     |          SBEvent sb_event) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBListener
     |      __init__(self, str name) -> SBListener
     |      __init__(self, SBListener rhs) -> SBListener
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBListener>
     |      delete_SBListener(SBListener self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBModule(__builtin__.object)
     |  Represents an executable image and its associated object and symbol files.
     |  
     |  The module is designed to be able to select a single slice of an
     |  executable image as it would appear on disk and during program
     |  execution.
     |  
     |  You can retrieve SBModule from SBSymbolContext, which in turn is available
     |  from SBFrame.
     |  
     |  SBModule supports symbol iteration, for example,
     |  
     |      for symbol in module:
     |          name = symbol.GetName()
     |          saddr = symbol.GetStartAddress()
     |          eaddr = symbol.GetEndAddress()
     |  
     |  and rich comparion methods which allow the API program to use,
     |  
     |      if thisModule == thatModule:
     |          print 'This module is the same as that module'
     |  
     |  to test module equality.  A module also contains object file sections, namely
     |  SBSection.  SBModule supports section iteration through section_iter(), for
     |  example,
     |  
     |      print 'Number of sections: %d' % module.GetNumSections()
     |      for sec in module.section_iter():
     |          print sec
     |  
     |  And to iterate the symbols within a SBSection, use symbol_in_section_iter(),
     |  
     |      # Iterates the text section and prints each symbols within each sub-section.
     |      for subsec in text_sec:
     |          print INDENT + repr(subsec)
     |          for sym in exe_module.symbol_in_section_iter(subsec):
     |              print INDENT2 + repr(sym)
     |              print INDENT2 + 'symbol type: %s' % symbol_type_to_str(sym.GetType())
     |  
     |  produces this following output:
     |  
     |      [0x0000000100001780-0x0000000100001d5c) a.out.__TEXT.__text
     |          id = {0x00000004}, name = 'mask_access(MaskAction, unsigned int)', range = [0x00000001000017c0-0x0000000100001870)
     |          symbol type: code
     |          id = {0x00000008}, name = 'thread_func(void*)', range = [0x0000000100001870-0x00000001000019b0)
     |          symbol type: code
     |          id = {0x0000000c}, name = 'main', range = [0x00000001000019b0-0x0000000100001d5c)
     |          symbol type: code
     |          id = {0x00000023}, name = 'start', address = 0x0000000100001780
     |          symbol type: code
     |      [0x0000000100001d5c-0x0000000100001da4) a.out.__TEXT.__stubs
     |          id = {0x00000024}, name = '__stack_chk_fail', range = [0x0000000100001d5c-0x0000000100001d62)
     |          symbol type: trampoline
     |          id = {0x00000028}, name = 'exit', range = [0x0000000100001d62-0x0000000100001d68)
     |          symbol type: trampoline
     |          id = {0x00000029}, name = 'fflush', range = [0x0000000100001d68-0x0000000100001d6e)
     |          symbol type: trampoline
     |          id = {0x0000002a}, name = 'fgets', range = [0x0000000100001d6e-0x0000000100001d74)
     |          symbol type: trampoline
     |          id = {0x0000002b}, name = 'printf', range = [0x0000000100001d74-0x0000000100001d7a)
     |          symbol type: trampoline
     |          id = {0x0000002c}, name = 'pthread_create', range = [0x0000000100001d7a-0x0000000100001d80)
     |          symbol type: trampoline
     |          id = {0x0000002d}, name = 'pthread_join', range = [0x0000000100001d80-0x0000000100001d86)
     |          symbol type: trampoline
     |          id = {0x0000002e}, name = 'pthread_mutex_lock', range = [0x0000000100001d86-0x0000000100001d8c)
     |          symbol type: trampoline
     |          id = {0x0000002f}, name = 'pthread_mutex_unlock', range = [0x0000000100001d8c-0x0000000100001d92)
     |          symbol type: trampoline
     |          id = {0x00000030}, name = 'rand', range = [0x0000000100001d92-0x0000000100001d98)
     |          symbol type: trampoline
     |          id = {0x00000031}, name = 'strtoul', range = [0x0000000100001d98-0x0000000100001d9e)
     |          symbol type: trampoline
     |          id = {0x00000032}, name = 'usleep', range = [0x0000000100001d9e-0x0000000100001da4)
     |          symbol type: trampoline
     |      [0x0000000100001da4-0x0000000100001e2c) a.out.__TEXT.__stub_helper
     |      [0x0000000100001e2c-0x0000000100001f10) a.out.__TEXT.__cstring
     |      [0x0000000100001f10-0x0000000100001f68) a.out.__TEXT.__unwind_info
     |      [0x0000000100001f68-0x0000000100001ff8) a.out.__TEXT.__eh_frame
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  FindFirstType(self, *args)
     |      FindFirstType(self, str name) -> SBType
     |  
     |  FindFunctions(self, *args)
     |      FindFunctions(self, str name, uint32_t name_type_mask = eFunctionNameTypeAny) -> SBSymbolContextList
     |      FindFunctions(self, str name) -> SBSymbolContextList
     |      
     |      Find functions by name.
     |      
     |      @param[in] name
     |          The name of the function we are looking for.
     |      
     |      @param[in] name_type_mask
     |          A logical OR of one or more FunctionNameType enum bits that
     |          indicate what kind of names should be used when doing the
     |          lookup. Bits include fully qualified names, base names,
     |          C++ methods, or ObjC selectors. 
     |          See FunctionNameType for more details.
     |      
     |      @return
     |          A symbol context list that gets filled in with all of the
     |          matches.
     |  
     |  FindGlobalVariables(self, *args)
     |      FindGlobalVariables(self, SBTarget target, str name, uint32_t max_matches) -> SBValueList
     |      
     |      Find global and static variables by name.
     |      
     |      @param[in] target
     |          A valid SBTarget instance representing the debuggee.
     |      
     |      @param[in] name
     |          The name of the global or static variable we are looking
     |          for.
     |      
     |      @param[in] max_matches
     |          Allow the number of matches to be limited to max_matches.
     |      
     |      @return
     |          A list of matched variables in an SBValueList.
     |  
     |  FindSection(self, *args)
     |      FindSection(self, str sect_name) -> SBSection
     |  
     |  FindSymbol(self, *args)
     |      FindSymbol(self, str name, SymbolType type = eSymbolTypeAny) -> SBSymbol
     |      FindSymbol(self, str name) -> SBSymbol
     |  
     |  FindSymbols(self, *args)
     |      FindSymbols(self, str name, SymbolType type = eSymbolTypeAny) -> SBSymbolContextList
     |      FindSymbols(self, str name) -> SBSymbolContextList
     |  
     |  FindTypes(self, *args)
     |      FindTypes(self, str type) -> SBTypeList
     |  
     |  GetAddressByteSize(self)
     |      GetAddressByteSize(self) -> uint32_t
     |  
     |  GetBasicType(self, *args)
     |      GetBasicType(self, BasicType type) -> SBType
     |  
     |  GetByteOrder(self)
     |      GetByteOrder(self) -> ByteOrder
     |  
     |  GetCompileUnitAtIndex(self, *args)
     |      GetCompileUnitAtIndex(self, uint32_t arg0) -> SBCompileUnit
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileSpec(self)
     |      GetFileSpec(self) -> SBFileSpec
     |      
     |      Get const accessor for the module file specification.
     |      
     |      This function returns the file for the module on the host system
     |      that is running LLDB. This can differ from the path on the 
     |      platform since we might be doing remote debugging.
     |      
     |      @return
     |          A const reference to the file specification object.
     |  
     |  GetNumCompileUnits(self)
     |      GetNumCompileUnits(self) -> uint32_t
     |  
     |  GetNumSections(self)
     |      GetNumSections(self) -> size_t
     |  
     |  GetNumSymbols(self)
     |      GetNumSymbols(self) -> size_t
     |  
     |  GetPlatformFileSpec(self)
     |      GetPlatformFileSpec(self) -> SBFileSpec
     |      
     |      Get accessor for the module platform file specification.
     |      
     |      Platform file refers to the path of the module as it is known on
     |      the remote system on which it is being debugged. For local 
     |      debugging this is always the same as Module::GetFileSpec(). But
     |      remote debugging might mention a file '/usr/lib/liba.dylib'
     |      which might be locally downloaded and cached. In this case the
     |      platform file could be something like:
     |      '/tmp/lldb/platform-cache/remote.host.computer/usr/lib/liba.dylib'
     |      The file could also be cached in a local developer kit directory.
     |      
     |      @return
     |          A const reference to the file specification object.
     |  
     |  GetSectionAtIndex(self, *args)
     |      GetSectionAtIndex(self, size_t idx) -> SBSection
     |  
     |  GetSymbolAtIndex(self, *args)
     |      GetSymbolAtIndex(self, size_t idx) -> SBSymbol
     |  
     |  GetTriple(self)
     |      GetTriple(self) -> str
     |  
     |  GetUUIDString(self)
     |      GetUUIDString(self) -> str
     |      
     |      Returns the UUID of the module as a Python string.
     |  
     |  GetVersion(self)
     |      GetVersion(self) -> uint32_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  ResolveFileAddress(self, *args)
     |      ResolveFileAddress(self, addr_t vm_addr) -> SBAddress
     |  
     |  ResolveSymbolContextForAddress(self, *args)
     |      ResolveSymbolContextForAddress(self, SBAddress addr, uint32_t resolve_scope) -> SBSymbolContext
     |  
     |  SetPlatformFileSpec(self, *args)
     |      SetPlatformFileSpec(self, SBFileSpec platform_file) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBModule
     |      __init__(self, SBModule rhs) -> SBModule
     |      __init__(self, SBProcess process, addr_t header_addr) -> SBModule
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  compile_unit_iter(self)
     |  
     |  get_sections_access_object(self)
     |      An accessor function that returns a sections_access() object which allows lazy section array access.
     |  
     |  get_sections_array(self)
     |      An accessor function that returns an array object that contains all sections in this module object.
     |  
     |  get_symbols_access_object(self)
     |      An accessor function that returns a symbols_access() object which allows lazy symbol access from a lldb.SBModule object.
     |  
     |  get_symbols_array(self)
     |      An accessor function that returns a list() that contains all symbols in a lldb.SBModule object.
     |  
     |  get_uuid(self)
     |  
     |  section_iter(self)
     |  
     |  symbol_in_section_iter(self, section)
     |      Given a module and its contained section, returns an iterator on the
     |      symbols within the section.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr_size
     |      A read only property that returns the size in bytes of an address for this module.
     |  
     |  byte_order
     |      A read only property that returns an lldb enumeration value (lldb.eByteOrderLittle, lldb.eByteOrderBig, lldb.eByteOrderInvalid) that represents the byte order for this module.
     |  
     |  file
     |      A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this object file for this module as it is represented where it is being debugged.
     |  
     |  num_sections
     |      A read only property that returns number of sections in the module as an integer.
     |  
     |  num_symbols
     |      A read only property that returns number of symbols in the module symbol table as an integer.
     |  
     |  platform_file
     |      A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this object file for this module as it is represented on the current host system.
     |  
     |  section
     |      A read only property that can be used to access symbols by index ("section = module.section[0]"), name ("sections = module.section['main']"), or using a regular expression ("sections = module.section[re.compile(...)]"). The return value is a single lldb.SBSection object for array access, and a list() of lldb.SBSection objects for name and regular expression access
     |  
     |  sections
     |      A read only property that returns a list() of lldb.SBSection objects contained in this module.
     |  
     |  symbol
     |      A read only property that can be used to access symbols by index ("symbol = module.symbol[0]"), name ("symbols = module.symbol['main']"), or using a regular expression ("symbols = module.symbol[re.compile(...)]"). The return value is a single lldb.SBSymbol object for array access, and a list() of lldb.SBSymbol objects for name and regular expression access
     |  
     |  symbols
     |      A read only property that returns a list() of lldb.SBSymbol objects contained in this module.
     |  
     |  triple
     |      A read only property that returns the target triple (arch-vendor-os) for this module.
     |  
     |  uuid
     |      A read only property that returns a standard python uuid.UUID object that represents the UUID of this module.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBModule>
     |      delete_SBModule(SBModule self)
     |  
     |  __swig_getmethods__ = {'addr_size': <function GetAddressByteSize>, 'by...
     |  
     |  __swig_setmethods__ = {}
     |  
     |  sections_access = <class 'lldb.sections_access'>
     |  
     |  
     |  symbols_access = <class 'lldb.symbols_access'>
    
    class SBProcess(__builtin__.object)
     |  Represents the process associated with the target program.
     |  
     |  SBProcess supports thread iteration. For example (from test/lldbutil.py),
     |  
     |  # ==================================================
     |  # Utility functions related to Threads and Processes
     |  # ==================================================
     |  
     |  def get_stopped_threads(process, reason):
     |      '''Returns the thread(s) with the specified stop reason in a list.
     |  
     |      The list can be empty if no such thread exists.
     |      '''
     |      threads = []
     |      for t in process:
     |          if t.GetStopReason() == reason:
     |              threads.append(t)
     |      return threads
     |  
     |  ...
     |  
     |  Methods defined here:
     |  
     |  AppendEventStateReport(self, *args)
     |      AppendEventStateReport(self, SBEvent event, SBCommandReturnObject result)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  Continue(self)
     |      Continue(self) -> SBError
     |  
     |  Destroy(self)
     |      Destroy(self) -> SBError
     |      
     |      Kills the process and shuts down all threads that were spawned to
     |      track and monitor process.
     |  
     |  Detach(self)
     |      Detach(self) -> SBError
     |  
     |  GetAddressByteSize(self)
     |      GetAddressByteSize(self) -> uint32_t
     |  
     |  GetAsyncProfileData(self, *args)
     |      GetAsyncProfileData(self, str dst) -> size_t
     |  
     |  GetBroadcaster(self)
     |      GetBroadcaster(self) -> SBBroadcaster
     |  
     |  GetByteOrder(self)
     |      GetByteOrder(self) -> ByteOrder
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetExitDescription(self)
     |      GetExitDescription(self) -> str
     |  
     |  GetExitStatus(self)
     |      GetExitStatus(self) -> int
     |  
     |  GetNumSupportedHardwareWatchpoints(self, *args)
     |      GetNumSupportedHardwareWatchpoints(self, SBError error) -> uint32_t
     |  
     |  GetNumThreads(self)
     |      GetNumThreads(self) -> uint32_t
     |  
     |  GetPluginName(self)
     |      GetPluginName(self) -> str
     |  
     |  GetProcessID(self)
     |      GetProcessID(self) -> pid_t
     |  
     |  GetSTDERR(self, *args)
     |      Reads data from the current process's stderr stream. API client specifies
     |      the size of the buffer to read data into. It returns the byte buffer in a
     |      Python string.
     |  
     |  GetSTDOUT(self, *args)
     |      Reads data from the current process's stdout stream. API client specifies
     |      the size of the buffer to read data into. It returns the byte buffer in a
     |      Python string.
     |  
     |  GetSelectedThread(self)
     |      Returns the currently selected thread.
     |  
     |  GetShortPluginName(self)
     |      GetShortPluginName(self) -> str
     |  
     |  GetState(self)
     |      GetState(self) -> StateType
     |  
     |  GetTarget(self)
     |      GetTarget(self) -> SBTarget
     |  
     |  GetThreadAtIndex(self, *args)
     |      Returns the INDEX'th thread from the list of current threads.  The index
     |      of a thread is only valid for the current stop.  For a persistent thread
     |      identifier use either the thread ID or the IndexID.  See help on SBThread
     |      for more details.
     |  
     |  GetThreadByID(self, *args)
     |      Returns the thread with the given thread ID.
     |  
     |  GetThreadByIndexID(self, *args)
     |      Returns the thread with the given thread IndexID.
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Kill(self)
     |      Kill(self) -> SBError
     |  
     |  LoadImage(self, *args)
     |      LoadImage(self, SBFileSpec image_spec, SBError error) -> uint32_t
     |  
     |  PutSTDIN(self, *args)
     |      Writes data into the current process's stdin. API client specifies a Python
     |      string as the only argument.
     |  
     |  ReadCStringFromMemory(self, *args)
     |      Reads a NULL terminated C string from the current process's address space.
     |      It returns a python string of the exact length, or truncates the string if
     |      the maximum stracter limit is reached. Example:
     |      
     |      # Read a C string of at most 256 bytes from address '0x1000' 
     |      error = lldb.SBError()
     |      cstring = process.ReadCStringFromMemory(0x1000, 256, error)
     |      if error.Success():
     |          print 'cstring: ', cstring
     |      else
     |          print 'error: ', error
     |  
     |  ReadMemory(self, *args)
     |      Reads memory from the current process's address space and removes any
     |      traps that may have been inserted into the memory. It returns the byte
     |      buffer in a Python string. Example:
     |      
     |      # Read 4 bytes from address 'addr' and assume error.Success() is True.
     |      content = process.ReadMemory(addr, 4, error)
     |      # Use 'ascii' encoding as each byte of 'content' is within [0..255].
     |      new_bytes = bytearray(content, 'ascii')
     |  
     |  ReadPointerFromMemory(self, *args)
     |      Reads a pointer from memory from an address and returns the value. Example:
     |      
     |      # Read a pointer from address 0x1000
     |      error = lldb.SBError()
     |      ptr = ReadPointerFromMemory(0x1000, error)
     |      if error.Success():
     |          print 'pointer: 0x%x' % ptr
     |      else
     |          print 'error: ', error
     |  
     |  ReadUnsignedFromMemory(self, *args)
     |      Reads an unsigned integer from memory given a byte size and an address. 
     |      Returns the unsigned integer that was read. Example:
     |      
     |      # Read a 4 byte unsigned integer from address 0x1000
     |      error = lldb.SBError()
     |      uint = ReadUnsignedFromMemory(0x1000, 4, error)
     |      if error.Success():
     |          print 'integer: %u' % uint
     |      else
     |          print 'error: ', error
     |  
     |  RemoteAttachToProcessWithID(self, *args)
     |      RemoteAttachToProcessWithID(self, pid_t pid, SBError error) -> bool
     |      
     |      Remote connection related functions. These will fail if the
     |      process is not in eStateConnected. They are intended for use
     |      when connecting to an externally managed debugserver instance.
     |  
     |  RemoteLaunch(self, *args)
     |      RemoteLaunch(self, list argv, list envp, str stdin_path, str stdout_path, 
     |          str stderr_path, str working_directory, 
     |          uint32_t launch_flags, bool stop_at_entry, 
     |          SBError error) -> bool
     |      
     |      See SBTarget.Launch for argument description and usage.
     |  
     |  ReportEventState(self, *args)
     |      ReportEventState(self, SBEvent event, FILE out)
     |  
     |  SendAsyncInterrupt(self)
     |      SendAsyncInterrupt(self)
     |  
     |  SetSelectedThread(self, *args)
     |      SetSelectedThread(self, SBThread thread) -> bool
     |  
     |  SetSelectedThreadByID(self, *args)
     |      SetSelectedThreadByID(self, tid_t tid) -> bool
     |  
     |  SetSelectedThreadByIndexID(self, *args)
     |      SetSelectedThreadByIndexID(self, uint32_t index_id) -> bool
     |  
     |  Signal(self, *args)
     |      Signal(self, int signal) -> SBError
     |      
     |      Sends the process a unix signal.
     |  
     |  Stop(self)
     |      Stop(self) -> SBError
     |  
     |  UnloadImage(self, *args)
     |      UnloadImage(self, uint32_t image_token) -> SBError
     |  
     |  WriteMemory(self, *args)
     |      Writes memory to the current process's address space and maintains any
     |      traps that might be present due to software breakpoints. Example:
     |      
     |      # Create a Python string from the byte array.
     |      new_value = str(bytes)
     |      result = process.WriteMemory(addr, new_value, error)
     |      if not error.Success() or result != len(bytes):
     |          print 'SBProcess.WriteMemory() failed!'
     |  
     |  __del__ lambda self
     |  
     |  __get_is_alive__(self)
     |      Returns "True" if the process is currently alive, "False" otherwise
     |  
     |  __get_is_running__(self)
     |      Returns "True" if the process is currently stopped, "False" otherwise
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBProcess
     |      __init__(self, SBProcess rhs) -> SBProcess
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_process_thread_list(self)
     |      An accessor function that returns a list() that contains all threads in a lldb.SBProcess object.
     |  
     |  get_threads_access_object(self)
     |      An accessor function that returns a modules_access() object which allows lazy thread access from a lldb.SBProcess object.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  EventIsProcessEvent(*args)
     |      EventIsProcessEvent(SBEvent event) -> bool
     |  
     |  GetBroadcasterClassName()
     |      GetBroadcasterClassName() -> str
     |  
     |  GetProcessFromEvent(*args)
     |      GetProcessFromEvent(SBEvent event) -> SBProcess
     |  
     |  GetRestartedFromEvent(*args)
     |      GetRestartedFromEvent(SBEvent event) -> bool
     |  
     |  GetStateFromEvent(*args)
     |      GetStateFromEvent(SBEvent event) -> StateType
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  broadcaster
     |      A read only property that an lldb object that represents the broadcaster (lldb.SBBroadcaster) for this process.
     |  
     |  exit_description
     |      A read only property that returns an exit description as a string of this process when the process state is lldb.eStateExited.
     |  
     |  exit_state
     |      A read only property that returns an exit status as an integer of this process when the process state is lldb.eStateExited.
     |  
     |  id
     |      A read only property that returns the process ID as an integer.
     |  
     |  is_alive
     |      A read only property that returns a boolean value that indicates if this process is currently alive.
     |  
     |  is_running
     |      A read only property that returns a boolean value that indicates if this process is currently running.
     |  
     |  is_stopped
     |      A read only property that returns a boolean value that indicates if this process is currently stopped.
     |  
     |  num_threads
     |      A read only property that returns the number of threads in this process as an integer.
     |  
     |  selected_thread
     |      A read/write property that gets/sets the currently selected thread in this process. The getter returns a lldb.SBThread object and the setter takes an lldb.SBThread object.
     |  
     |  state
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eState") that represents the current state of this process (running, stopped, exited, etc.).
     |  
     |  target
     |      A read only property that an lldb object that represents the target (lldb.SBTarget) that owns this process.
     |  
     |  thread
     |      A read only property that returns an object that can access threads by thread index (thread = lldb.process.thread[12]).
     |  
     |  threads
     |      A read only property that returns a list() of lldb.SBThread objects for this process.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBProcess>
     |      delete_SBProcess(SBProcess self)
     |  
     |  __swig_getmethods__ = {'EventIsProcessEvent': <function <lambda>>, 'Ge...
     |  
     |  __swig_setmethods__ = {'selected_thread': <function SetSelectedThread>...
     |  
     |  eBroadcastBitInterrupt = 2
     |  
     |  eBroadcastBitProfileData = 16
     |  
     |  eBroadcastBitSTDERR = 8
     |  
     |  eBroadcastBitSTDOUT = 4
     |  
     |  eBroadcastBitStateChanged = 1
     |  
     |  threads_access = <class 'lldb.threads_access'>
     |      A helper object that will lazily hand out thread for a process when supplied an index.
    
    class SBSection(__builtin__.object)
     |  Represents an executable image section.
     |  
     |  SBSection supports iteration through its subsection, represented as SBSection
     |  as well.  For example,
     |  
     |      for sec in exe_module:
     |          if sec.GetName() == '__TEXT':
     |              print sec
     |              break
     |      print INDENT + 'Number of subsections: %d' % sec.GetNumSubSections()
     |      for subsec in sec:
     |          print INDENT + repr(subsec)
     |  
     |  produces:
     |  
     |  [0x0000000100000000-0x0000000100002000) a.out.__TEXT
     |      Number of subsections: 6
     |      [0x0000000100001780-0x0000000100001d5c) a.out.__TEXT.__text
     |      [0x0000000100001d5c-0x0000000100001da4) a.out.__TEXT.__stubs
     |      [0x0000000100001da4-0x0000000100001e2c) a.out.__TEXT.__stub_helper
     |      [0x0000000100001e2c-0x0000000100001f10) a.out.__TEXT.__cstring
     |      [0x0000000100001f10-0x0000000100001f68) a.out.__TEXT.__unwind_info
     |      [0x0000000100001f68-0x0000000100001ff8) a.out.__TEXT.__eh_frame
     |  
     |  See also SBModule.
     |  
     |  Methods defined here:
     |  
     |  FindSubSection(self, *args)
     |      FindSubSection(self, str sect_name) -> SBSection
     |  
     |  GetByteSize(self)
     |      GetByteSize(self) -> addr_t
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFileAddress(self)
     |      GetFileAddress(self) -> addr_t
     |  
     |  GetFileByteSize(self)
     |      GetFileByteSize(self) -> uint64_t
     |  
     |  GetFileOffset(self)
     |      GetFileOffset(self) -> uint64_t
     |  
     |  GetLoadAddress(self, *args)
     |      GetLoadAddress(self, SBTarget target) -> addr_t
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetNumSubSections(self)
     |      GetNumSubSections(self) -> size_t
     |  
     |  GetSectionData(self, *args)
     |      GetSectionData(self) -> SBData
     |      GetSectionData(self, uint64_t offset, uint64_t size) -> SBData
     |  
     |  GetSectionType(self)
     |      GetSectionType(self) -> SectionType
     |  
     |  GetSubSectionAtIndex(self, *args)
     |      GetSubSectionAtIndex(self, size_t idx) -> SBSection
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBSection
     |      __init__(self, SBSection rhs) -> SBSection
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_addr(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb object that represents the start address (lldb.SBAddress) for this section.
     |  
     |  data
     |      A read only property that returns an lldb object that represents the bytes for this section (lldb.SBData) for this section.
     |  
     |  file_addr
     |      A read only property that returns an integer that represents the starting "file" address for this section, or the address of the section in the object file in which it is defined.
     |  
     |  file_offset
     |      A read only property that returns the file offset in bytes of this section as an integer.
     |  
     |  file_size
     |      A read only property that returns the file size in bytes of this section as an integer.
     |  
     |  name
     |      A read only property that returns the name of this section as a string.
     |  
     |  size
     |      A read only property that returns the size in bytes of this section as an integer.
     |  
     |  type
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eSectionType") that represents the type of this section (code, data, etc.).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBSection>
     |      delete_SBSection(SBSection self)
     |  
     |  __swig_getmethods__ = {'addr': <function get_addr>, 'data': <function ...
     |  
     |  __swig_setmethods__ = {}
    
    class SBSourceManager(__builtin__.object)
     |      Represents a central authority for displaying source code.
     |  
     |      For example (from test/source-manager/TestSourceManager.py),
     |  
     |              # Create the filespec for 'main.c'.
     |              filespec = lldb.SBFileSpec('main.c', False)
     |              source_mgr = self.dbg.GetSourceManager()
     |              # Use a string stream as the destination.
     |              stream = lldb.SBStream()
     |              source_mgr.DisplaySourceLinesWithLineNumbers(filespec,
     |                                                           self.line,
     |                                                           2, # context before
     |                                                           2, # context after
     |                                                           '=>', # prefix for current line
     |                                                           stream)
     |  
     |              #    2    
     |              #    3    int main(int argc, char const *argv[]) {
     |              # => 4        printf('Hello world.
     |  '); // Set break point at this line.
     |              #    5        return 0;
     |              #    6    }
     |              self.expect(stream.GetData(), 'Source code displayed correctly',
     |                          exe=False,
     |                  patterns = ['=> %d.*Hello world' % self.line])
     |  
     |  Methods defined here:
     |  
     |  DisplaySourceLinesWithLineNumbers(self, *args)
     |      DisplaySourceLinesWithLineNumbers(self, SBFileSpec file, uint32_t line, uint32_t context_before, 
     |          uint32_t context_after, str current_line_cstr, 
     |          SBStream s) -> size_t
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self, SBSourceManager rhs) -> SBSourceManager
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBSourceManager>
     |      delete_SBSourceManager(SBSourceManager self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBStream(__builtin__.object)
     |      Represents a destination for streaming data output to. By default, a string
     |      stream is created.
     |  
     |      For example (from test/source-manager/TestSourceManager.py),
     |  
     |              # Create the filespec for 'main.c'.
     |              filespec = lldb.SBFileSpec('main.c', False)
     |              source_mgr = self.dbg.GetSourceManager()
     |              # Use a string stream as the destination.
     |              stream = lldb.SBStream()
     |              source_mgr.DisplaySourceLinesWithLineNumbers(filespec,
     |                                                           self.line,
     |                                                           2, # context before
     |                                                           2, # context after
     |                                                           '=>', # prefix for current line
     |                                                           stream)
     |  
     |              #    2    
     |              #    3    int main(int argc, char const *argv[]) {
     |              # => 4        printf('Hello world.
     |  '); // Set break point at this line.
     |              #    5        return 0;
     |              #    6    }
     |              self.expect(stream.GetData(), 'Source code displayed correctly',
     |                          exe=False,
     |                  patterns = ['=> %d.*Hello world' % self.line])
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |      
     |      If the stream is redirected to a file, forget about the file and if
     |      ownership of the file was transfered to this object, close the file.
     |      If the stream is backed by a local cache, clear this cache.
     |  
     |  GetData(self)
     |      GetData(self) -> str
     |      
     |      If this stream is not redirected to a file, it will maintain a local
     |      cache for the stream data which can be accessed using this accessor.
     |  
     |  GetSize(self)
     |      GetSize(self) -> size_t
     |      
     |      If this stream is not redirected to a file, it will maintain a local
     |      cache for the stream output whose length can be accessed using this 
     |      accessor.
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Print(self, *args)
     |      Print(self, str str)
     |  
     |  RedirectToFile(self, *args)
     |      RedirectToFile(self, str path, bool append)
     |  
     |  RedirectToFileDescriptor(self, *args)
     |      RedirectToFileDescriptor(self, int fd, bool transfer_fh_ownership)
     |  
     |  RedirectToFileHandle(self, *args)
     |      RedirectToFileHandle(self, FILE fh, bool transfer_fh_ownership)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self)
     |      __init__(self) -> SBStream
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBStream>
     |      delete_SBStream(SBStream self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBStringList(__builtin__.object)
     |  Proxy of C++ lldb::SBStringList class
     |  
     |  Methods defined here:
     |  
     |  AppendList(self, *args)
     |      AppendList(self, str strv, int strc)
     |      AppendList(self, SBStringList strings)
     |  
     |  AppendString(self, *args)
     |      AppendString(self, str str)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetSize(self)
     |      GetSize(self) -> uint32_t
     |  
     |  GetStringAtIndex(self, *args)
     |      GetStringAtIndex(self, size_t idx) -> str
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBStringList
     |      __init__(self, SBStringList rhs) -> SBStringList
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBStringList>
     |      delete_SBStringList(SBStringList self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBSymbol(__builtin__.object)
     |  Represents the symbol possibly associated with a stack frame.
     |  SBModule contains SBSymbol(s). SBSymbol can also be retrived from SBFrame.
     |  
     |  See also SBModule and SBFrame.
     |  
     |  Methods defined here:
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetEndAddress(self)
     |      GetEndAddress(self) -> SBAddress
     |  
     |  GetInstructions(self, *args)
     |      GetInstructions(self, SBTarget target) -> SBInstructionList
     |  
     |  GetMangledName(self)
     |      GetMangledName(self) -> str
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetPrologueByteSize(self)
     |      GetPrologueByteSize(self) -> uint32_t
     |  
     |  GetStartAddress(self)
     |      GetStartAddress(self) -> SBAddress
     |  
     |  GetType(self)
     |      GetType(self) -> SymbolType
     |  
     |  IsExternal(self)
     |      IsExternal(self) -> bool
     |  
     |  IsSynthetic(self)
     |      IsSynthetic(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBSymbol
     |      __init__(self, SBSymbol rhs) -> SBSymbol
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_instructions_from_current_target(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb object that represents the start address (lldb.SBAddress) for this symbol.
     |  
     |  end_addr
     |      A read only property that returns an lldb object that represents the end address (lldb.SBAddress) for this symbol.
     |  
     |  external
     |      A read only property that returns a boolean value that indicates if this symbol is externally visiable (exported) from the module that contains it.
     |  
     |  instructions
     |      A read only property that returns an lldb object that represents the instructions (lldb.SBInstructionList) for this symbol.
     |  
     |  mangled
     |      A read only property that returns the mangled (linkage) name for this symbol as a string.
     |  
     |  name
     |      A read only property that returns the name for this symbol as a string.
     |  
     |  prologue_size
     |      A read only property that returns the size in bytes of the prologue instructions as an unsigned integer.
     |  
     |  synthetic
     |      A read only property that returns a boolean value that indicates if this symbol was synthetically created from information in module that contains it.
     |  
     |  type
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eSymbolType") that represents the type of this symbol.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBSymbol>
     |      delete_SBSymbol(SBSymbol self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetStartAddress>, 'end_addr':...
     |  
     |  __swig_setmethods__ = {}
    
    class SBSymbolContext(__builtin__.object)
     |  A context object that provides access to core debugger entities.
     |  
     |  Manay debugger functions require a context when doing lookups. This class
     |  provides a common structure that can be used as the result of a query that
     |  can contain a single result.
     |  
     |  For example,
     |  
     |          exe = os.path.join(os.getcwd(), 'a.out')
     |  
     |          # Create a target for the debugger.
     |          target = self.dbg.CreateTarget(exe)
     |  
     |          # Now create a breakpoint on main.c by name 'c'.
     |          breakpoint = target.BreakpointCreateByName('c', 'a.out')
     |  
     |          # Now launch the process, and do not stop at entry point.
     |          process = target.LaunchSimple(None, None, os.getcwd())
     |  
     |          # The inferior should stop on 'c'.
     |          from lldbutil import get_stopped_thread
     |          thread = get_stopped_thread(process, lldb.eStopReasonBreakpoint)
     |          frame0 = thread.GetFrameAtIndex(0)
     |  
     |          # Now get the SBSymbolContext from this frame.  We want everything. :-)
     |          context = frame0.GetSymbolContext(lldb.eSymbolContextEverything)
     |  
     |          # Get the module.
     |          module = context.GetModule()
     |          ...
     |  
     |          # And the compile unit associated with the frame.
     |          compileUnit = context.GetCompileUnit()
     |          ...
     |  
     |  Methods defined here:
     |  
     |  GetBlock(self)
     |      GetBlock(self) -> SBBlock
     |  
     |  GetCompileUnit(self)
     |      GetCompileUnit(self) -> SBCompileUnit
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFunction(self)
     |      GetFunction(self) -> SBFunction
     |  
     |  GetLineEntry(self)
     |      GetLineEntry(self) -> SBLineEntry
     |  
     |  GetModule(self)
     |      GetModule(self) -> SBModule
     |  
     |  GetParentOfInlinedScope(self, *args)
     |      GetParentOfInlinedScope(self, SBAddress curr_frame_pc, SBAddress parent_frame_addr) -> SBSymbolContext
     |  
     |  GetSymbol(self)
     |      GetSymbol(self) -> SBSymbol
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetBlock(self, *args)
     |      SetBlock(self, SBBlock block)
     |  
     |  SetCompileUnit(self, *args)
     |      SetCompileUnit(self, SBCompileUnit compile_unit)
     |  
     |  SetFunction(self, *args)
     |      SetFunction(self, SBFunction function)
     |  
     |  SetLineEntry(self, *args)
     |      SetLineEntry(self, SBLineEntry line_entry)
     |  
     |  SetModule(self, *args)
     |      SetModule(self, SBModule module)
     |  
     |  SetSymbol(self, *args)
     |      SetSymbol(self, SBSymbol symbol)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBSymbolContext
     |      __init__(self, SBSymbolContext rhs) -> SBSymbolContext
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  block
     |      A read/write property that allows the getting/setting of the block (lldb.SBBlock) in this symbol context.
     |  
     |  compile_unit
     |      A read/write property that allows the getting/setting of the compile unit (lldb.SBCompileUnit) in this symbol context.
     |  
     |  function
     |      A read/write property that allows the getting/setting of the function (lldb.SBFunction) in this symbol context.
     |  
     |  line_entry
     |      A read/write property that allows the getting/setting of the line entry (lldb.SBLineEntry) in this symbol context.
     |  
     |  module
     |      A read/write property that allows the getting/setting of the module (lldb.SBModule) in this symbol context.
     |  
     |  symbol
     |      A read/write property that allows the getting/setting of the symbol (lldb.SBSymbol) in this symbol context.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBSymbolContext>
     |      delete_SBSymbolContext(SBSymbolContext self)
     |  
     |  __swig_getmethods__ = {'block': <function GetBlock>, 'compile_unit': <...
     |  
     |  __swig_setmethods__ = {'block': <function SetBlock>, 'compile_unit': <...
    
    class SBSymbolContextList(__builtin__.object)
     |  Represents a list of symbol context object. See also SBSymbolContext.
     |  
     |  For example (from test/python_api/target/TestTargetAPI.py),
     |  
     |      def find_functions(self, exe_name):
     |          '''Exercise SBTaget.FindFunctions() API.'''
     |          exe = os.path.join(os.getcwd(), exe_name)
     |  
     |          # Create a target by the debugger.
     |          target = self.dbg.CreateTarget(exe)
     |          self.assertTrue(target, VALID_TARGET)
     |  
     |          list = lldb.SBSymbolContextList()
     |          num = target.FindFunctions('c', lldb.eFunctionNameTypeAuto, False, list)
     |          self.assertTrue(num == 1 and list.GetSize() == 1)
     |  
     |          for sc in list:
     |              self.assertTrue(sc.GetModule().GetFileSpec().GetFilename() == exe_name)
     |              self.assertTrue(sc.GetSymbol().GetName() == 'c')
     |  
     |  Methods defined here:
     |  
     |  Append(self, *args)
     |      Append(self, SBSymbolContext sc)
     |      Append(self, SBSymbolContextList sc_list)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetContextAtIndex(self, *args)
     |      GetContextAtIndex(self, uint32_t idx) -> SBSymbolContext
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetSize(self)
     |      GetSize(self) -> uint32_t
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBSymbolContextList
     |      __init__(self, SBSymbolContextList rhs) -> SBSymbolContextList
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_block_array(self)
     |  
     |  get_compile_unit_array(self)
     |  
     |  get_function_array(self)
     |  
     |  get_line_entry_array(self)
     |  
     |  get_module_array(self)
     |  
     |  get_symbol_array(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  blocks
     |      Returns a list() of lldb.SBBlock objects, one for each block in each SBSymbolContext object in this list.
     |  
     |  compile_units
     |      Returns a list() of lldb.SBCompileUnit objects, one for each compile unit in each SBSymbolContext object in this list.
     |  
     |  functions
     |      Returns a list() of lldb.SBFunction objects, one for each function in each SBSymbolContext object in this list.
     |  
     |  line_entries
     |      Returns a list() of lldb.SBLineEntry objects, one for each line entry in each SBSymbolContext object in this list.
     |  
     |  modules
     |      Returns a list() of lldb.SBModule objects, one for each module in each SBSymbolContext object in this list.
     |  
     |  symbols
     |      Returns a list() of lldb.SBSymbol objects, one for each symbol in each SBSymbolContext object in this list.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBSymbolContextList>
     |      delete_SBSymbolContextList(SBSymbolContextList self)
     |  
     |  __swig_getmethods__ = {'blocks': <function get_block_array>, 'compile_...
     |  
     |  __swig_setmethods__ = {}
    
    class SBTarget(__builtin__.object)
     |  Represents the target program running under the debugger.
     |  
     |  SBTarget supports module, breakpoint, and watchpoint iterations. For example,
     |  
     |      for m in target.module_iter():
     |          print m
     |  
     |  produces:
     |  
     |  (x86_64) /Volumes/data/lldb/svn/trunk/test/python_api/lldbutil/iter/a.out
     |  (x86_64) /usr/lib/dyld
     |  (x86_64) /usr/lib/libstdc++.6.dylib
     |  (x86_64) /usr/lib/libSystem.B.dylib
     |  (x86_64) /usr/lib/system/libmathCommon.A.dylib
     |  (x86_64) /usr/lib/libSystem.B.dylib(__commpage)
     |  
     |  and,
     |  
     |      for b in target.breakpoint_iter():
     |          print b
     |  
     |  produces:
     |  
     |  SBBreakpoint: id = 1, file ='main.cpp', line = 66, locations = 1
     |  SBBreakpoint: id = 2, file ='main.cpp', line = 85, locations = 1
     |  
     |  and,
     |  
     |      for wp_loc in target.watchpoint_iter():
     |          print wp_loc
     |  
     |  produces:
     |  
     |  Watchpoint 1: addr = 0x1034ca048 size = 4 state = enabled type = rw
     |      declare @ '/Volumes/data/lldb/svn/trunk/test/python_api/watchpoint/main.c:12'
     |      hw_index = 0  hit_count = 2     ignore_count = 0
     |  
     |  Methods defined here:
     |  
     |  AddModule(self, *args)
     |      AddModule(self, SBModule module) -> bool
     |      AddModule(self, str path, str triple, str uuid) -> SBModule
     |      AddModule(self, str path, str triple, str uuid_cstr, str symfile) -> SBModule
     |  
     |  Attach(self, *args)
     |      Attach(self, SBAttachInfo attach_info, SBError error) -> SBProcess
     |  
     |  AttachToProcessWithID(self, *args)
     |      AttachToProcessWithID(self, SBListener listener, pid_t pid, SBError error) -> SBProcess
     |      
     |      Attach to process with pid.
     |      
     |      @param[in] listener
     |          An optional listener that will receive all process events.
     |          If listener is valid then listener will listen to all
     |          process events. If not valid, then this target's debugger
     |          (SBTarget::GetDebugger()) will listen to all process events.
     |      
     |      @param[in] pid
     |          The process ID to attach to.
     |      
     |      @param[out]
     |          An error explaining what went wrong if attach fails.
     |      
     |      @return
     |           A process object for the attached process.
     |  
     |  AttachToProcessWithName(self, *args)
     |      AttachToProcessWithName(self, SBListener listener, str name, bool wait_for, SBError error) -> SBProcess
     |      
     |      Attach to process with name.
     |      
     |      @param[in] listener
     |          An optional listener that will receive all process events.
     |          If listener is valid then listener will listen to all
     |          process events. If not valid, then this target's debugger
     |          (SBTarget::GetDebugger()) will listen to all process events.
     |      
     |      @param[in] name
     |          Basename of process to attach to.
     |      
     |      @param[in] wait_for
     |          If true wait for a new instance of 'name' to be launched.
     |      
     |      @param[out]
     |          An error explaining what went wrong if attach fails.
     |      
     |      @return
     |           A process object for the attached process.
     |  
     |  BreakpointCreateByAddress(self, *args)
     |      BreakpointCreateByAddress(self, addr_t address) -> SBBreakpoint
     |  
     |  BreakpointCreateByLocation(self, *args)
     |      BreakpointCreateByLocation(self, str file, uint32_t line) -> SBBreakpoint
     |      BreakpointCreateByLocation(self, SBFileSpec file_spec, uint32_t line) -> SBBreakpoint
     |  
     |  BreakpointCreateByName(self, *args)
     |      BreakpointCreateByName(self, str symbol_name, str module_name = None) -> SBBreakpoint
     |      BreakpointCreateByName(self, str symbol_name) -> SBBreakpoint
     |      BreakpointCreateByName(self, str symbol_name, uint32_t func_name_type, SBFileSpecList module_list, 
     |          SBFileSpecList comp_unit_list) -> SBBreakpoint
     |  
     |  BreakpointCreateByNames(self, *args)
     |      BreakpointCreateByNames(self, str symbol_name, uint32_t num_names, uint32_t name_type_mask, 
     |          SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
     |  
     |  BreakpointCreateByRegex(self, *args)
     |      BreakpointCreateByRegex(self, str symbol_name_regex, str module_name = None) -> SBBreakpoint
     |      BreakpointCreateByRegex(self, str symbol_name_regex) -> SBBreakpoint
     |  
     |  BreakpointCreateBySourceRegex(self, *args)
     |      BreakpointCreateBySourceRegex(self, str source_regex, SBFileSpec source_file, str module_name = None) -> SBBreakpoint
     |      BreakpointCreateBySourceRegex(self, str source_regex, SBFileSpec source_file) -> SBBreakpoint
     |  
     |  BreakpointCreateForException(self, *args)
     |      BreakpointCreateForException(self, LanguageType language, bool catch_bp, bool throw_bp) -> SBBreakpoint
     |  
     |  BreakpointDelete(self, *args)
     |      BreakpointDelete(self, break_id_t break_id) -> bool
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  ClearModuleLoadAddress(self, *args)
     |      ClearModuleLoadAddress(self, SBModule module) -> SBError
     |  
     |  ClearSectionLoadAddress(self, *args)
     |      ClearSectionLoadAddress(self, SBSection section) -> SBError
     |  
     |  ConnectRemote(self, *args)
     |      ConnectRemote(self, SBListener listener, str url, str plugin_name, SBError error) -> SBProcess
     |      
     |      Connect to a remote debug server with url.
     |      
     |      @param[in] listener
     |          An optional listener that will receive all process events.
     |          If listener is valid then listener will listen to all
     |          process events. If not valid, then this target's debugger
     |          (SBTarget::GetDebugger()) will listen to all process events.
     |      
     |      @param[in] url
     |          The url to connect to, e.g., 'connect://localhost:12345'.
     |      
     |      @param[in] plugin_name
     |          The plugin name to be used; can be NULL.
     |      
     |      @param[out]
     |          An error explaining what went wrong if the connect fails.
     |      
     |      @return
     |           A process object for the connected process.
     |  
     |  DeleteAllBreakpoints(self)
     |      DeleteAllBreakpoints(self) -> bool
     |  
     |  DeleteAllWatchpoints(self)
     |      DeleteAllWatchpoints(self) -> bool
     |  
     |  DeleteWatchpoint(self, *args)
     |      DeleteWatchpoint(self, watch_id_t watch_id) -> bool
     |  
     |  DisableAllBreakpoints(self)
     |      DisableAllBreakpoints(self) -> bool
     |  
     |  DisableAllWatchpoints(self)
     |      DisableAllWatchpoints(self) -> bool
     |  
     |  EnableAllBreakpoints(self)
     |      EnableAllBreakpoints(self) -> bool
     |  
     |  EnableAllWatchpoints(self)
     |      EnableAllWatchpoints(self) -> bool
     |  
     |  FindBreakpointByID(self, *args)
     |      FindBreakpointByID(self, break_id_t break_id) -> SBBreakpoint
     |  
     |  FindFirstType(self, *args)
     |      FindFirstType(self, str type) -> SBType
     |  
     |  FindFunctions(self, *args)
     |      FindFunctions(self, str name, uint32_t name_type_mask = eFunctionNameTypeAny) -> SBSymbolContextList
     |      FindFunctions(self, str name) -> SBSymbolContextList
     |      
     |      Find functions by name.
     |      
     |      @param[in] name
     |          The name of the function we are looking for.
     |      
     |      @param[in] name_type_mask
     |          A logical OR of one or more FunctionNameType enum bits that
     |          indicate what kind of names should be used when doing the
     |          lookup. Bits include fully qualified names, base names,
     |          C++ methods, or ObjC selectors. 
     |          See FunctionNameType for more details.
     |      
     |      @return
     |          A lldb::SBSymbolContextList that gets filled in with all of 
     |          the symbol contexts for all the matches.
     |  
     |  FindGlobalVariables(self, *args)
     |      FindGlobalVariables(self, str name, uint32_t max_matches) -> SBValueList
     |      
     |      Find global and static variables by name.
     |      
     |      @param[in] name
     |          The name of the global or static variable we are looking
     |          for.
     |      
     |      @param[in] max_matches
     |          Allow the number of matches to be limited to max_matches.
     |      
     |      @return
     |          A list of matched variables in an SBValueList.
     |  
     |  FindModule(self, *args)
     |      FindModule(self, SBFileSpec file_spec) -> SBModule
     |  
     |  FindSymbols(self, *args)
     |      FindSymbols(self, str name, SymbolType type = eSymbolTypeAny) -> SBSymbolContextList
     |      FindSymbols(self, str name) -> SBSymbolContextList
     |  
     |  FindTypes(self, *args)
     |      FindTypes(self, str type) -> SBTypeList
     |  
     |  FindWatchpointByID(self, *args)
     |      FindWatchpointByID(self, watch_id_t watch_id) -> SBWatchpoint
     |  
     |  GetAddressByteSize(self)
     |      GetAddressByteSize(self) -> uint32_t
     |  
     |  GetBasicType(self, *args)
     |      GetBasicType(self, BasicType type) -> SBType
     |  
     |  GetBreakpointAtIndex(self, *args)
     |      GetBreakpointAtIndex(self, uint32_t idx) -> SBBreakpoint
     |  
     |  GetBroadcaster(self)
     |      GetBroadcaster(self) -> SBBroadcaster
     |  
     |  GetByteOrder(self)
     |      GetByteOrder(self) -> ByteOrder
     |  
     |  GetDebugger(self)
     |      GetDebugger(self) -> SBDebugger
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetExecutable(self)
     |      GetExecutable(self) -> SBFileSpec
     |  
     |  GetInstructions(self, *args)
     |      GetInstructions(self, SBAddress base_addr, void buf) -> SBInstructionList
     |  
     |  GetModuleAtIndex(self, *args)
     |      GetModuleAtIndex(self, uint32_t idx) -> SBModule
     |  
     |  GetNumBreakpoints(self)
     |      GetNumBreakpoints(self) -> uint32_t
     |  
     |  GetNumModules(self)
     |      GetNumModules(self) -> uint32_t
     |  
     |  GetNumWatchpoints(self)
     |      GetNumWatchpoints(self) -> uint32_t
     |  
     |  GetProcess(self)
     |      GetProcess(self) -> SBProcess
     |  
     |  GetSourceManager(self)
     |      GetSourceManager(self) -> SBSourceManager
     |  
     |  GetTriple(self)
     |      GetTriple(self) -> str
     |  
     |  GetWatchpointAtIndex(self, *args)
     |      GetWatchpointAtIndex(self, uint32_t idx) -> SBWatchpoint
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Launch(self, *args)
     |      Launch(self, SBListener listener, list argv, list envp, str stdin_path, 
     |          str stdout_path, str stderr_path, 
     |          str working_directory, uint32_t launch_flags, 
     |          bool stop_at_entry, SBError error) -> SBProcess
     |      Launch(self, SBLaunchInfo launch_info, SBError error) -> SBProcess
     |      
     |      Launch a new process.
     |      
     |      Launch a new process by spawning a new process using the
     |      target object's executable module's file as the file to launch.
     |      Arguments are given in argv, and the environment variables
     |      are in envp. Standard input and output files can be
     |      optionally re-directed to stdin_path, stdout_path, and
     |      stderr_path.
     |      
     |      @param[in] listener
     |          An optional listener that will receive all process events.
     |          If listener is valid then listener will listen to all
     |          process events. If not valid, then this target's debugger
     |          (SBTarget::GetDebugger()) will listen to all process events. 
     |      
     |      @param[in] argv
     |          The argument array.
     |      
     |      @param[in] envp
     |          The environment array.
     |      
     |      @param[in] launch_flags
     |          Flags to modify the launch (@see lldb::LaunchFlags)
     |      
     |      @param[in] stdin_path
     |          The path to use when re-directing the STDIN of the new
     |          process. If all stdXX_path arguments are NULL, a pseudo
     |          terminal will be used.
     |      
     |      @param[in] stdout_path
     |          The path to use when re-directing the STDOUT of the new
     |          process. If all stdXX_path arguments are NULL, a pseudo
     |          terminal will be used.
     |      
     |      @param[in] stderr_path
     |          The path to use when re-directing the STDERR of the new
     |          process. If all stdXX_path arguments are NULL, a pseudo
     |          terminal will be used.
     |      
     |      @param[in] working_directory
     |          The working directory to have the child process run in
     |      
     |      @param[in] launch_flags
     |          Some launch options specified by logical OR'ing 
     |          lldb::LaunchFlags enumeration values together.
     |      
     |      @param[in] stop_at_endtry
     |          If false do not stop the inferior at the entry point.
     |      
     |      @param[out]
     |          An error object. Contains the reason if there is some failure.
     |      
     |      @return
     |           A process object for the newly created process.
     |      
     |      For example,
     |      
     |          process = target.Launch(self.dbg.GetListener(), None, None,
     |                                  None, '/tmp/stdout.txt', None,
     |                                  None, 0, False, error)
     |      
     |      launches a new process by passing nothing for both the args and the envs
     |      and redirect the standard output of the inferior to the /tmp/stdout.txt
     |      file. It does not specify a working directory so that the debug server
     |      will use its idea of what the current working directory is for the
     |      inferior. Also, we ask the debugger not to stop the inferior at the
     |      entry point. If no breakpoint is specified for the inferior, it should
     |      run to completion if no user interaction is required.
     |  
     |  LaunchSimple(self, *args)
     |      LaunchSimple(self, list argv, list envp, str working_directory) -> SBProcess
     |      
     |      Launch a new process with sensible defaults.
     |      
     |      @param[in] argv
     |          The argument array.
     |      
     |      @param[in] envp
     |          The environment array.
     |      
     |      @param[in] working_directory
     |          The working directory to have the child process run in
     |      
     |      Default: listener
     |          Set to the target's debugger (SBTarget::GetDebugger())
     |      
     |      Default: launch_flags
     |          Empty launch flags
     |      
     |      Default: stdin_path
     |      Default: stdout_path
     |      Default: stderr_path
     |          A pseudo terminal will be used.
     |      
     |      @return
     |           A process object for the newly created process.
     |      
     |      For example,
     |      
     |          process = target.LaunchSimple(['X', 'Y', 'Z'], None, os.getcwd())
     |      
     |      launches a new process by passing 'X', 'Y', 'Z' as the args to the
     |      executable.
     |  
     |  ReadInstructions(self, *args)
     |      ReadInstructions(self, SBAddress base_addr, uint32_t count) -> SBInstructionList
     |  
     |  RemoveModule(self, *args)
     |      RemoveModule(self, SBModule module) -> bool
     |  
     |  ResolveLoadAddress(self, *args)
     |      ResolveLoadAddress(self, addr_t vm_addr) -> SBAddress
     |  
     |  ResolveSymbolContextForAddress(self, *args)
     |      ResolveSymbolContextForAddress(self, SBAddress addr, uint32_t resolve_scope) -> SBSymbolContext
     |  
     |  SetModuleLoadAddress(self, *args)
     |      SetModuleLoadAddress(self, SBModule module, int64_t sections_offset) -> SBError
     |  
     |  SetSectionLoadAddress(self, *args)
     |      SetSectionLoadAddress(self, SBSection section, addr_t section_base_addr) -> SBError
     |  
     |  WatchAddress(self, *args)
     |      WatchAddress(self, addr_t addr, size_t size, bool read, bool write, SBError error) -> SBWatchpoint
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTarget
     |      __init__(self, SBTarget rhs) -> SBTarget
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  breakpoint_iter(self)
     |  
     |  get_modules_access_object(self)
     |      An accessor function that returns a modules_access() object which allows lazy module access from a lldb.SBTarget object.
     |  
     |  get_modules_array(self)
     |      An accessor function that returns a list() that contains all modules in a lldb.SBTarget object.
     |  
     |  module_iter(self)
     |  
     |  watchpoint_iter(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  GetBroadcasterClassName()
     |      GetBroadcasterClassName() -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr_size
     |      A read only property that returns the size in bytes of an address for this target.
     |  
     |  broadcaster
     |      A read only property that an lldb object that represents the broadcaster (lldb.SBBroadcaster) for this target.
     |  
     |  byte_order
     |      A read only property that returns an lldb enumeration value (lldb.eByteOrderLittle, lldb.eByteOrderBig, lldb.eByteOrderInvalid) that represents the byte order for this target.
     |  
     |  debugger
     |      A read only property that returns an lldb object that represents the debugger (lldb.SBDebugger) that owns this target.
     |  
     |  executable
     |      A read only property that returns an lldb object that represents the main executable module (lldb.SBModule) for this target.
     |  
     |  module
     |      A read only property that returns an object that implements python operator overloading with the square brackets().\n    target.module[<int>] allows array access to any modules.\n    target.module[<str>] allows access to modules by basename, full path, or uuid string value.\n    target.module[uuid.UUID()] allows module access by UUID.\n    target.module[re] allows module access using a regular expression that matches the module full path.
     |  
     |  modules
     |      A read only property that returns a list() of lldb.SBModule objects contained in this target. This list is a list all modules that the target currently is tracking (the main executable and all dependent shared libraries).
     |  
     |  num_breakpoints
     |      A read only property that returns the number of breakpoints that this target has as an integer.
     |  
     |  num_watchpoints
     |      A read only property that returns the number of watchpoints that this target has as an integer.
     |  
     |  process
     |      A read only property that returns an lldb object that represents the process (lldb.SBProcess) that this target owns.
     |  
     |  triple
     |      A read only property that returns the target triple (arch-vendor-os) for this target as a string.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTarget>
     |      delete_SBTarget(SBTarget self)
     |  
     |  __swig_getmethods__ = {'GetBroadcasterClassName': <function <lambda>>,...
     |  
     |  __swig_setmethods__ = {}
     |  
     |  eBroadcastBitBreakpointChanged = 1
     |  
     |  eBroadcastBitModulesLoaded = 2
     |  
     |  eBroadcastBitModulesUnloaded = 4
     |  
     |  modules_access = <class 'lldb.modules_access'>
     |      A helper object that will lazily hand out lldb.SBModule objects for a target when supplied an index, or by full or partial path.
    
    class SBThread(__builtin__.object)
     |  Represents a thread of execution. SBProcess contains SBThread(s).
     |  
     |  SBThreads can be referred to by their ID, which maps to the system specific thread
     |  identifier, or by IndexID.  The ID may or may not be unique depending on whether the
     |  system reuses its thread identifiers.  The IndexID is a monotonically increasing identifier
     |  that will always uniquely reference a particular thread, and when that thread goes
     |  away it will not be reused.
     |  
     |  SBThread supports frame iteration. For example (from test/python_api/
     |  lldbutil/iter/TestLLDBIterator.py),
     |  
     |          from lldbutil import print_stacktrace
     |          stopped_due_to_breakpoint = False
     |          for thread in process:
     |              if self.TraceOn():
     |                  print_stacktrace(thread)
     |              ID = thread.GetThreadID()
     |              if thread.GetStopReason() == lldb.eStopReasonBreakpoint:
     |                  stopped_due_to_breakpoint = True
     |              for frame in thread:
     |                  self.assertTrue(frame.GetThread().GetThreadID() == ID)
     |                  if self.TraceOn():
     |                      print frame
     |  
     |          self.assertTrue(stopped_due_to_breakpoint)
     |  
     |  See also SBProcess and SBFrame.
     |  
     |  Methods defined here:
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetFrameAtIndex(self, *args)
     |      GetFrameAtIndex(self, uint32_t idx) -> SBFrame
     |  
     |  GetIndexID(self)
     |      GetIndexID(self) -> uint32_t
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetNumFrames(self)
     |      GetNumFrames(self) -> uint32_t
     |  
     |  GetProcess(self)
     |      GetProcess(self) -> SBProcess
     |  
     |  GetQueueName(self)
     |      GetQueueName(self) -> str
     |  
     |  GetSelectedFrame(self)
     |      GetSelectedFrame(self) -> SBFrame
     |  
     |  GetStatus(self, *args)
     |      GetStatus(self, SBStream status) -> bool
     |  
     |  GetStopDescription(self, *args)
     |      Pass only an (int)length and expect to get a Python string describing the
     |      stop reason.
     |  
     |  GetStopReason(self)
     |      GetStopReason(self) -> StopReason
     |  
     |  GetStopReasonDataAtIndex(self, *args)
     |      GetStopReasonDataAtIndex(self, uint32_t idx) -> uint64_t
     |      
     |      Get information associated with a stop reason.
     |      
     |      Breakpoint stop reasons will have data that consists of pairs of 
     |      breakpoint IDs followed by the breakpoint location IDs (they always come
     |      in pairs).
     |      
     |      Stop Reason              Count Data Type
     |      ======================== ===== =========================================
     |      eStopReasonNone          0
     |      eStopReasonTrace         0
     |      eStopReasonBreakpoint    N     duple: {breakpoint id, location id}
     |      eStopReasonWatchpoint    1     watchpoint id
     |      eStopReasonSignal        1     unix signal number
     |      eStopReasonException     N     exception data
     |      eStopReasonExec          0
     |      eStopReasonPlanComplete  0
     |  
     |  GetStopReasonDataCount(self)
     |      GetStopReasonDataCount(self) -> size_t
     |      
     |      Get the number of words associated with the stop reason.
     |      See also GetStopReasonDataAtIndex().
     |  
     |  GetStopReturnValue(self)
     |      GetStopReturnValue(self) -> SBValue
     |  
     |  GetThreadID(self)
     |      GetThreadID(self) -> tid_t
     |  
     |  IsSuspended(self)
     |      IsSuspended(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  Resume(self)
     |      Resume(self) -> bool
     |  
     |  ReturnFromFrame(self, *args)
     |      ReturnFromFrame(self, SBFrame frame, SBValue return_value) -> SBError
     |  
     |  RunToAddress(self, *args)
     |      RunToAddress(self, addr_t addr)
     |  
     |  SetSelectedFrame(self, *args)
     |      SetSelectedFrame(self, uint32_t frame_idx) -> SBFrame
     |  
     |  StepInstruction(self, *args)
     |      StepInstruction(self, bool step_over)
     |  
     |  StepInto(self, *args)
     |      StepInto(self, RunMode stop_other_threads = eOnlyDuringStepping)
     |      StepInto(self)
     |  
     |  StepOut(self)
     |      StepOut(self)
     |  
     |  StepOutOfFrame(self, *args)
     |      StepOutOfFrame(self, SBFrame frame)
     |  
     |  StepOver(self, *args)
     |      StepOver(self, RunMode stop_other_threads = eOnlyDuringStepping)
     |      StepOver(self)
     |  
     |  StepOverUntil(self, *args)
     |      StepOverUntil(self, SBFrame frame, SBFileSpec file_spec, uint32_t line) -> SBError
     |  
     |  Suspend(self)
     |      Suspend(self) -> bool
     |      
     |      LLDB currently supports process centric debugging which means when any
     |      thread in a process stops, all other threads are stopped. The Suspend()
     |      call here tells our process to suspend a thread and not let it run when
     |      the other threads in a process are allowed to run. So when 
     |      SBProcess::Continue() is called, any threads that aren't suspended will
     |      be allowed to run. If any of the SBThread functions for stepping are 
     |      called (StepOver, StepInto, StepOut, StepInstruction, RunToAddres), the
     |      thread will now be allowed to run and these funtions will simply return.
     |      
     |      Eventually we plan to add support for thread centric debugging where
     |      each thread is controlled individually and each thread would broadcast
     |      its state, but we haven't implemented this yet.
     |      
     |      Likewise the SBThread::Resume() call will again allow the thread to run
     |      when the process is continued.
     |      
     |      Suspend() and Resume() functions are not currently reference counted, if
     |      anyone has the need for them to be reference counted, please let us
     |      know.
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBThread
     |      __init__(self, SBThread thread) -> SBThread
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_frames_access_object(self)
     |      An accessor function that returns a frames_access() object which allows lazy frame access from a lldb.SBThread object.
     |  
     |  get_thread_frames(self)
     |      An accessor function that returns a list() that contains all frames in a lldb.SBThread object.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  EventIsThreadEvent(*args)
     |      EventIsThreadEvent(SBEvent event) -> bool
     |  
     |  GetStackFrameFromEvent(*args)
     |      GetStackFrameFromEvent(SBEvent event) -> SBFrame
     |  
     |  GetThreadFromEvent(*args)
     |      GetThreadFromEvent(SBEvent event) -> SBThread
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  frame
     |      A read only property that returns an object that can be used to access frames as an array ("frame_12 = lldb.thread.frame[12]").
     |  
     |  frames
     |      A read only property that returns a list() of lldb.SBFrame objects for all frames in this thread.
     |  
     |  id
     |      A read only property that returns the thread ID as an integer.
     |  
     |  idx
     |      A read only property that returns the thread index ID as an integer. Thread index ID values start at 1 and increment as threads come and go and can be used to uniquely identify threads.
     |  
     |  is_suspended
     |      A read only property that returns a boolean value that indicates if this thread is suspended.
     |  
     |  name
     |      A read only property that returns the name of this thread as a string.
     |  
     |  num_frames
     |      A read only property that returns the number of stack frames in this thread as an integer.
     |  
     |  process
     |      A read only property that returns an lldb object that represents the process (lldb.SBProcess) that owns this thread.
     |  
     |  queue
     |      A read only property that returns the dispatch queue name of this thread as a string.
     |  
     |  return_value
     |      A read only property that returns an lldb object that represents the return value from the last stop (lldb.SBValue) if we just stopped due to stepping out of a function.
     |  
     |  stop_reason
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eStopReason") that represents the reason this thread stopped.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBThread>
     |      delete_SBThread(SBThread self)
     |  
     |  __swig_getmethods__ = {'EventIsThreadEvent': <function <lambda>>, 'Get...
     |  
     |  __swig_setmethods__ = {}
     |  
     |  frames_access = <class 'lldb.frames_access'>
     |      A helper object that will lazily hand out frames for a thread when supplied an index.
    
    class SBType(__builtin__.object)
     |      Represents a data type in lldb.  The FindFirstType() method of SBTarget/SBModule
     |      returns a SBType.
     |  
     |      SBType supports the eq/ne operator. For example,
     |  
     |      main.cpp:
     |  
     |      class Task {
     |      public:
     |          int id;
     |          Task *next;
     |          Task(int i, Task *n):
     |              id(i),
     |              next(n)
     |          {}
     |      };
     |  
     |      int main (int argc, char const *argv[])
     |      {
     |          Task *task_head = new Task(-1, NULL);
     |          Task *task1 = new Task(1, NULL);
     |          Task *task2 = new Task(2, NULL);
     |          Task *task3 = new Task(3, NULL); // Orphaned.
     |          Task *task4 = new Task(4, NULL);
     |          Task *task5 = new Task(5, NULL);
     |  
     |          task_head->next = task1;
     |          task1->next = task2;
     |          task2->next = task4;
     |          task4->next = task5;
     |  
     |          int total = 0;
     |          Task *t = task_head;
     |          while (t != NULL) {
     |              if (t->id >= 0)
     |                  ++total;
     |              t = t->next;
     |          }
     |          printf('We have a total number of %d tasks
     |  ', total);
     |  
     |          // This corresponds to an empty task list.
     |          Task *empty_task_head = new Task(-1, NULL);
     |  
     |          return 0; // Break at this line
     |      }
     |  
     |      find_type.py:
     |  
     |              # Get the type 'Task'.
     |              task_type = target.FindFirstType('Task')
     |              self.assertTrue(task_type)
     |  
     |              # Get the variable 'task_head'.
     |              frame0.FindVariable('task_head')
     |              task_head_type = task_head.GetType()
     |              self.assertTrue(task_head_type.IsPointerType())
     |  
     |              # task_head_type is 'Task *'.
     |              task_pointer_type = task_type.GetPointerType()
     |              self.assertTrue(task_head_type == task_pointer_type)
     |  
     |              # Get the child mmember 'id' from 'task_head'.
     |              id = task_head.GetChildMemberWithName('id')
     |              id_type = id.GetType()
     |  
     |              # SBType.GetBasicType() takes an enum 'BasicType' (lldb-enumerations.h).
     |              int_type = id_type.GetBasicType(lldb.eBasicTypeInt)
     |              # id_type and int_type should be the same type!
     |              self.assertTrue(id_type == int_type)
     |  
     |      ...
     |  
     |  Methods defined here:
     |  
     |  GetBasicType(self, *args)
     |      GetBasicType(self) -> BasicType
     |      GetBasicType(self, BasicType type) -> SBType
     |  
     |  GetByteSize(self)
     |      GetByteSize(self) -> size_t
     |  
     |  GetDereferencedType(self)
     |      GetDereferencedType(self) -> SBType
     |  
     |  GetDirectBaseClassAtIndex(self, *args)
     |      GetDirectBaseClassAtIndex(self, uint32_t idx) -> SBTypeMember
     |  
     |  GetFieldAtIndex(self, *args)
     |      GetFieldAtIndex(self, uint32_t idx) -> SBTypeMember
     |  
     |  GetFunctionArgumentTypes(self)
     |      GetFunctionArgumentTypes(self) -> SBTypeList
     |  
     |  GetFunctionReturnType(self)
     |      GetFunctionReturnType(self) -> SBType
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetNumberOfDirectBaseClasses(self)
     |      GetNumberOfDirectBaseClasses(self) -> uint32_t
     |  
     |  GetNumberOfFields(self)
     |      GetNumberOfFields(self) -> uint32_t
     |  
     |  GetNumberOfTemplateArguments(self)
     |      GetNumberOfTemplateArguments(self) -> uint32_t
     |  
     |  GetNumberOfVirtualBaseClasses(self)
     |      GetNumberOfVirtualBaseClasses(self) -> uint32_t
     |  
     |  GetPointeeType(self)
     |      GetPointeeType(self) -> SBType
     |  
     |  GetPointerType(self)
     |      GetPointerType(self) -> SBType
     |  
     |  GetReferenceType(self)
     |      GetReferenceType(self) -> SBType
     |  
     |  GetTemplateArgumentKind(self, *args)
     |      GetTemplateArgumentKind(self, uint32_t idx) -> TemplateArgumentKind
     |  
     |  GetTemplateArgumentType(self, *args)
     |      GetTemplateArgumentType(self, uint32_t idx) -> SBType
     |  
     |  GetTypeClass(self)
     |      GetTypeClass(self) -> TypeClass
     |  
     |  GetUnqualifiedType(self)
     |      GetUnqualifiedType(self) -> SBType
     |  
     |  GetVirtualBaseClassAtIndex(self, *args)
     |      GetVirtualBaseClassAtIndex(self, uint32_t idx) -> SBTypeMember
     |  
     |  IsFunctionType(self)
     |      IsFunctionType(self) -> bool
     |  
     |  IsPointerType(self)
     |      IsPointerType(self) -> bool
     |  
     |  IsReferenceType(self)
     |      IsReferenceType(self) -> bool
     |  
     |  IsTypeComplete(self)
     |      IsTypeComplete(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBType
     |      __init__(self, SBType rhs) -> SBType
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_bases_array(self)
     |      An accessor function that returns a list() that contains all direct base classes in a lldb.SBType object.
     |  
     |  get_fields_array(self)
     |      An accessor function that returns a list() that contains all fields in a lldb.SBType object.
     |  
     |  get_members_array(self)
     |      An accessor function that returns a list() that contains all members (base classes and fields) in a lldb.SBType object in ascending bit offset order.
     |  
     |  get_vbases_array(self)
     |      An accessor function that returns a list() that contains all fields in a lldb.SBType object.
     |  
     |  template_arg_array(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  bases
     |      A read only property that returns a list() of lldb.SBTypeMember objects that represent all of the direct base classes for this type.
     |  
     |  fields
     |      A read only property that returns a list() of lldb.SBTypeMember objects that represent all of the fields for this type.
     |  
     |  is_complete
     |      A read only property that returns a boolean value that indicates if this type is a complete type (True) or a forward declaration (False).
     |  
     |  is_pointer
     |      A read only property that returns a boolean value that indicates if this type is a pointer type.
     |  
     |  is_reference
     |      A read only property that returns a boolean value that indicates if this type is a function type.
     |  
     |  members
     |      A read only property that returns a list() of all lldb.SBTypeMember objects that represent all of the base classes, virtual base classes and fields for this type in ascending bit offset order.
     |  
     |  name
     |      A read only property that returns the name for this type as a string.
     |  
     |  num_bases
     |      A read only property that returns number of direct base classes in this type as an integer.
     |  
     |  num_fields
     |      A read only property that returns number of fields in this type as an integer.
     |  
     |  num_template_args
     |      A read only property that returns number of template arguments in this type as an integer.
     |  
     |  num_vbases
     |      A read only property that returns number of virtual base classes in this type as an integer.
     |  
     |  size
     |      A read only property that returns size in bytes for this type as an integer.
     |  
     |  template_args
     |      A read only property that returns a list() of lldb.SBType objects that represent all template arguments in this type.
     |  
     |  type
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eTypeClass") that represents a classification for this type.
     |  
     |  vbases
     |      A read only property that returns a list() of lldb.SBTypeMember objects that represent all of the virtual base classes for this type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBType>
     |      delete_SBType(SBType self)
     |  
     |  __swig_getmethods__ = {'bases': <function get_bases_array>, 'fields': ...
     |  
     |  __swig_setmethods__ = {}
    
    class SBTypeCategory(__builtin__.object)
     |  Represents a category that can contain formatters for types.
     |  
     |  Methods defined here:
     |  
     |  AddTypeFilter(self, *args)
     |      AddTypeFilter(self, SBTypeNameSpecifier arg0, SBTypeFilter arg1) -> bool
     |  
     |  AddTypeFormat(self, *args)
     |      AddTypeFormat(self, SBTypeNameSpecifier arg0, SBTypeFormat arg1) -> bool
     |  
     |  AddTypeSummary(self, *args)
     |      AddTypeSummary(self, SBTypeNameSpecifier arg0, SBTypeSummary arg1) -> bool
     |  
     |  AddTypeSynthetic(self, *args)
     |      AddTypeSynthetic(self, SBTypeNameSpecifier arg0, SBTypeSynthetic arg1) -> bool
     |  
     |  DeleteTypeFilter(self, *args)
     |      DeleteTypeFilter(self, SBTypeNameSpecifier arg0) -> bool
     |  
     |  DeleteTypeFormat(self, *args)
     |      DeleteTypeFormat(self, SBTypeNameSpecifier arg0) -> bool
     |  
     |  DeleteTypeSummary(self, *args)
     |      DeleteTypeSummary(self, SBTypeNameSpecifier arg0) -> bool
     |  
     |  DeleteTypeSynthetic(self, *args)
     |      DeleteTypeSynthetic(self, SBTypeNameSpecifier arg0) -> bool
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetEnabled(self)
     |      GetEnabled(self) -> bool
     |  
     |  GetFilterAtIndex(self, *args)
     |      GetFilterAtIndex(self, uint32_t arg0) -> SBTypeFilter
     |  
     |  GetFilterForType(self, *args)
     |      GetFilterForType(self, SBTypeNameSpecifier arg0) -> SBTypeFilter
     |  
     |  GetFormatAtIndex(self, *args)
     |      GetFormatAtIndex(self, uint32_t arg0) -> SBTypeFormat
     |  
     |  GetFormatForType(self, *args)
     |      GetFormatForType(self, SBTypeNameSpecifier arg0) -> SBTypeFormat
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetNumFilters(self)
     |      GetNumFilters(self) -> uint32_t
     |  
     |  GetNumFormats(self)
     |      GetNumFormats(self) -> uint32_t
     |  
     |  GetNumSummaries(self)
     |      GetNumSummaries(self) -> uint32_t
     |  
     |  GetNumSynthetics(self)
     |      GetNumSynthetics(self) -> uint32_t
     |  
     |  GetSummaryAtIndex(self, *args)
     |      GetSummaryAtIndex(self, uint32_t arg0) -> SBTypeSummary
     |  
     |  GetSummaryForType(self, *args)
     |      GetSummaryForType(self, SBTypeNameSpecifier arg0) -> SBTypeSummary
     |  
     |  GetSyntheticAtIndex(self, *args)
     |      GetSyntheticAtIndex(self, uint32_t arg0) -> SBTypeSynthetic
     |  
     |  GetSyntheticForType(self, *args)
     |      GetSyntheticForType(self, SBTypeNameSpecifier arg0) -> SBTypeSynthetic
     |  
     |  GetTypeNameSpecifierForFilterAtIndex(self, *args)
     |      GetTypeNameSpecifierForFilterAtIndex(self, uint32_t arg0) -> SBTypeNameSpecifier
     |  
     |  GetTypeNameSpecifierForFormatAtIndex(self, *args)
     |      GetTypeNameSpecifierForFormatAtIndex(self, uint32_t arg0) -> SBTypeNameSpecifier
     |  
     |  GetTypeNameSpecifierForSummaryAtIndex(self, *args)
     |      GetTypeNameSpecifierForSummaryAtIndex(self, uint32_t arg0) -> SBTypeNameSpecifier
     |  
     |  GetTypeNameSpecifierForSyntheticAtIndex(self, *args)
     |      GetTypeNameSpecifierForSyntheticAtIndex(self, uint32_t arg0) -> SBTypeNameSpecifier
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetEnabled(self, *args)
     |      SetEnabled(self, bool arg0)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeCategory
     |      __init__(self, SBTypeCategory rhs) -> SBTypeCategory
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  enabled
     |      GetEnabled(self) -> bool
     |  
     |  name
     |      GetName(self) -> str
     |  
     |  num_filters
     |      GetNumFilters(self) -> uint32_t
     |  
     |  num_formats
     |      GetNumFormats(self) -> uint32_t
     |  
     |  num_summaries
     |      GetNumSummaries(self) -> uint32_t
     |  
     |  num_synthetics
     |      GetNumSynthetics(self) -> uint32_t
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeCategory>
     |      delete_SBTypeCategory(SBTypeCategory self)
     |  
     |  __swig_getmethods__ = {'enabled': <function GetEnabled>, 'name': <func...
     |  
     |  __swig_setmethods__ = {'enabled': <function SetEnabled>}
    
    class SBTypeFilter(__builtin__.object)
     |  Represents a filter that can be associated to one or more types.
     |  
     |  Methods defined here:
     |  
     |  AppendExpressionPath(self, *args)
     |      AppendExpressionPath(self, str item)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetExpressionPathAtIndex(self, *args)
     |      GetExpressionPathAtIndex(self, uint32_t i) -> str
     |  
     |  GetNumberOfExpressionPaths(self)
     |      GetNumberOfExpressionPaths(self) -> uint32_t
     |  
     |  GetOptions(self)
     |      GetOptions(self) -> uint32_t
     |  
     |  IsEqualTo(self, *args)
     |      IsEqualTo(self, SBTypeFilter rhs) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  ReplaceExpressionPathAtIndex(self, *args)
     |      ReplaceExpressionPathAtIndex(self, uint32_t i, str item) -> bool
     |  
     |  SetOptions(self, *args)
     |      SetOptions(self, uint32_t arg0)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeFilter
     |      __init__(self, uint32_t options) -> SBTypeFilter
     |      __init__(self, SBTypeFilter rhs) -> SBTypeFilter
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  count
     |      GetNumberOfExpressionPaths(self) -> uint32_t
     |  
     |  options
     |      GetOptions(self) -> uint32_t
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeFilter>
     |      delete_SBTypeFilter(SBTypeFilter self)
     |  
     |  __swig_getmethods__ = {'count': <function GetNumberOfExpressionPaths>,...
     |  
     |  __swig_setmethods__ = {'options': <function SetOptions>}
    
    class SBTypeFormat(__builtin__.object)
     |  Represents a format that can be associated to one or more types.
     |  
     |  Methods defined here:
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetFormat(self)
     |      GetFormat(self) -> Format
     |  
     |  GetOptions(self)
     |      GetOptions(self) -> uint32_t
     |  
     |  IsEqualTo(self, *args)
     |      IsEqualTo(self, SBTypeFormat rhs) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetFormat(self, *args)
     |      SetFormat(self, Format arg0)
     |  
     |  SetOptions(self, *args)
     |      SetOptions(self, uint32_t arg0)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeFormat
     |      __init__(self, Format format, uint32_t options = 0) -> SBTypeFormat
     |      __init__(self, Format format) -> SBTypeFormat
     |      __init__(self, SBTypeFormat rhs) -> SBTypeFormat
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  format
     |      GetFormat(self) -> Format
     |  
     |  options
     |      GetOptions(self) -> uint32_t
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeFormat>
     |      delete_SBTypeFormat(SBTypeFormat self)
     |  
     |  __swig_getmethods__ = {'format': <function GetFormat>, 'options': <fun...
     |  
     |  __swig_setmethods__ = {'format': <function SetFormat>, 'options': <fun...
    
    class SBTypeList(__builtin__.object)
     |  Represents a list of SBTypes.  The FindTypes() method of SBTarget/SBModule
     |  returns a SBTypeList.
     |  
     |  SBTypeList supports SBType iteration. For example,
     |  
     |  main.cpp:
     |  
     |  class Task {
     |  public:
     |      int id;
     |      Task *next;
     |      Task(int i, Task *n):
     |          id(i),
     |          next(n)
     |      {}
     |  };
     |  
     |  ...
     |  
     |  find_type.py:
     |  
     |          # Get the type 'Task'.
     |          type_list = target.FindTypes('Task')
     |          self.assertTrue(len(type_list) == 1)
     |          # To illustrate the SBType iteration.
     |          for type in type_list:
     |              # do something with type
     |  
     |  ...
     |  
     |  Methods defined here:
     |  
     |  Append(self, *args)
     |      Append(self, SBType type)
     |  
     |  GetSize(self)
     |      GetSize(self) -> uint32_t
     |  
     |  GetTypeAtIndex(self, *args)
     |      GetTypeAtIndex(self, uint32_t index) -> SBType
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self)
     |      __init__(self) -> SBTypeList
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeList>
     |      delete_SBTypeList(SBTypeList self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBTypeMember(__builtin__.object)
     |  Represents a member of a type in lldb.
     |  
     |  Methods defined here:
     |  
     |  GetBitfieldSizeInBits(self)
     |      GetBitfieldSizeInBits(self) -> uint32_t
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetOffsetInBits(self)
     |      GetOffsetInBits(self) -> uint64_t
     |  
     |  GetOffsetInBytes(self)
     |      GetOffsetInBytes(self) -> uint64_t
     |  
     |  GetType(self)
     |      GetType(self) -> SBType
     |  
     |  IsBitfield(self)
     |      IsBitfield(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeMember
     |      __init__(self, SBTypeMember rhs) -> SBTypeMember
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  bit_offset
     |      A read only property that returns offset in bits for this member as an integer.
     |  
     |  bitfield_bit_size
     |      A read only property that returns the bitfield size in bits for this member as an integer, or zero if this member is not a bitfield.
     |  
     |  byte_offset
     |      A read only property that returns offset in bytes for this member as an integer.
     |  
     |  is_bitfield
     |      A read only property that returns true if this member is a bitfield.
     |  
     |  name
     |      A read only property that returns the name for this member as a string.
     |  
     |  type
     |      A read only property that returns an lldb object that represents the type (lldb.SBType) for this member.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeMember>
     |      delete_SBTypeMember(SBTypeMember self)
     |  
     |  __swig_getmethods__ = {'bit_offset': <function GetOffsetInBits>, 'bitf...
     |  
     |  __swig_setmethods__ = {}
    
    class SBTypeNameSpecifier(__builtin__.object)
     |  Represents a general way to provide a type name to LLDB APIs.
     |  
     |  Methods defined here:
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetType(self)
     |      GetType(self) -> SBType
     |  
     |  IsEqualTo(self, *args)
     |      IsEqualTo(self, SBTypeNameSpecifier rhs) -> bool
     |  
     |  IsRegex(self)
     |      IsRegex(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeNameSpecifier
     |      __init__(self, str name, bool is_regex = False) -> SBTypeNameSpecifier
     |      __init__(self, str name) -> SBTypeNameSpecifier
     |      __init__(self, SBType type) -> SBTypeNameSpecifier
     |      __init__(self, SBTypeNameSpecifier rhs) -> SBTypeNameSpecifier
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_regex
     |      IsRegex(self) -> bool
     |  
     |  name
     |      GetName(self) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeNameSpecifier>
     |      delete_SBTypeNameSpecifier(SBTypeNameSpecifier self)
     |  
     |  __swig_getmethods__ = {'is_regex': <function IsRegex>, 'name': <functi...
     |  
     |  __swig_setmethods__ = {}
    
    class SBTypeSummary(__builtin__.object)
     |  Represents a summary that can be associated to one or more types.
     |  
     |  Methods defined here:
     |  
     |  GetData(self)
     |      GetData(self) -> str
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetOptions(self)
     |      GetOptions(self) -> uint32_t
     |  
     |  IsEqualTo(self, *args)
     |      IsEqualTo(self, SBTypeSummary rhs) -> bool
     |  
     |  IsFunctionCode(self)
     |      IsFunctionCode(self) -> bool
     |  
     |  IsFunctionName(self)
     |      IsFunctionName(self) -> bool
     |  
     |  IsSummaryString(self)
     |      IsSummaryString(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetFunctionCode(self, *args)
     |      SetFunctionCode(self, str data)
     |  
     |  SetFunctionName(self, *args)
     |      SetFunctionName(self, str data)
     |  
     |  SetOptions(self, *args)
     |      SetOptions(self, uint32_t arg0)
     |  
     |  SetSummaryString(self, *args)
     |      SetSummaryString(self, str data)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeSummary
     |      __init__(self, SBTypeSummary rhs) -> SBTypeSummary
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  CreateWithFunctionName(*args)
     |      CreateWithFunctionName(str data, uint32_t options = 0) -> SBTypeSummary
     |      CreateWithFunctionName(str data) -> SBTypeSummary
     |  
     |  CreateWithScriptCode(*args)
     |      CreateWithScriptCode(str data, uint32_t options = 0) -> SBTypeSummary
     |      CreateWithScriptCode(str data) -> SBTypeSummary
     |  
     |  CreateWithSummaryString(*args)
     |      CreateWithSummaryString(str data, uint32_t options = 0) -> SBTypeSummary
     |      CreateWithSummaryString(str data) -> SBTypeSummary
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_function_name
     |      IsFunctionCode(self) -> bool
     |  
     |  is_summary_string
     |      IsSummaryString(self) -> bool
     |  
     |  options
     |      GetOptions(self) -> uint32_t
     |  
     |  summary_data
     |      GetData(self) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeSummary>
     |      delete_SBTypeSummary(SBTypeSummary self)
     |  
     |  __swig_getmethods__ = {'CreateWithFunctionName': <function <lambda>>, ...
     |  
     |  __swig_setmethods__ = {'options': <function SetOptions>}
    
    class SBTypeSynthetic(__builtin__.object)
     |  Represents a summary that can be associated to one or more types.
     |  
     |  Methods defined here:
     |  
     |  GetData(self)
     |      GetData(self) -> str
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel description_level) -> bool
     |  
     |  GetOptions(self)
     |      GetOptions(self) -> uint32_t
     |  
     |  IsClassCode(self)
     |      IsClassCode(self) -> bool
     |  
     |  IsEqualTo(self, *args)
     |      IsEqualTo(self, SBTypeSynthetic rhs) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetClassCode(self, *args)
     |      SetClassCode(self, str data)
     |  
     |  SetClassName(self, *args)
     |      SetClassName(self, str data)
     |  
     |  SetOptions(self, *args)
     |      SetOptions(self, uint32_t arg0)
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBTypeSynthetic
     |      __init__(self, SBTypeSynthetic rhs) -> SBTypeSynthetic
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  CreateWithClassName(*args)
     |      CreateWithClassName(str data, uint32_t options = 0) -> SBTypeSynthetic
     |      CreateWithClassName(str data) -> SBTypeSynthetic
     |  
     |  CreateWithScriptCode(*args)
     |      CreateWithScriptCode(str data, uint32_t options = 0) -> SBTypeSynthetic
     |      CreateWithScriptCode(str data) -> SBTypeSynthetic
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  contains_code
     |      IsClassCode(self) -> bool
     |  
     |  options
     |      GetOptions(self) -> uint32_t
     |  
     |  synthetic_data
     |      GetData(self) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBTypeSynthetic>
     |      delete_SBTypeSynthetic(SBTypeSynthetic self)
     |  
     |  __swig_getmethods__ = {'CreateWithClassName': <function <lambda>>, 'Cr...
     |  
     |  __swig_setmethods__ = {'options': <function SetOptions>}
    
    class SBValue(__builtin__.object)
     |  Represents the value of a variable, a register, or an expression.
     |  
     |  SBValue supports iteration through its child, which in turn is represented
     |  as an SBValue.  For example, we can get the general purpose registers of a
     |  frame as an SBValue, and iterate through all the registers,
     |  
     |      registerSet = frame.GetRegisters() # Returns an SBValueList.
     |      for regs in registerSet:
     |          if 'general purpose registers' in regs.getName().lower():
     |              GPRs = regs
     |              break
     |  
     |      print '%s (number of children = %d):' % (GPRs.GetName(), GPRs.GetNumChildren())
     |      for reg in GPRs:
     |          print 'Name: ', reg.GetName(), ' Value: ', reg.GetValue()
     |  
     |  produces the output:
     |  
     |  General Purpose Registers (number of children = 21):
     |  Name:  rax  Value:  0x0000000100000c5c
     |  Name:  rbx  Value:  0x0000000000000000
     |  Name:  rcx  Value:  0x00007fff5fbffec0
     |  Name:  rdx  Value:  0x00007fff5fbffeb8
     |  Name:  rdi  Value:  0x0000000000000001
     |  Name:  rsi  Value:  0x00007fff5fbffea8
     |  Name:  rbp  Value:  0x00007fff5fbffe80
     |  Name:  rsp  Value:  0x00007fff5fbffe60
     |  Name:  r8  Value:  0x0000000008668682
     |  Name:  r9  Value:  0x0000000000000000
     |  Name:  r10  Value:  0x0000000000001200
     |  Name:  r11  Value:  0x0000000000000206
     |  Name:  r12  Value:  0x0000000000000000
     |  Name:  r13  Value:  0x0000000000000000
     |  Name:  r14  Value:  0x0000000000000000
     |  Name:  r15  Value:  0x0000000000000000
     |  Name:  rip  Value:  0x0000000100000dae
     |  Name:  rflags  Value:  0x0000000000000206
     |  Name:  cs  Value:  0x0000000000000027
     |  Name:  fs  Value:  0x0000000000000010
     |  Name:  gs  Value:  0x0000000000000048
     |  
     |  See also linked_list_iter() for another perspective on how to iterate through an
     |  SBValue instance which interprets the value object as representing the head of a
     |  linked list.
     |  
     |  Methods defined here:
     |  
     |  AddressOf(self)
     |      AddressOf(self) -> SBValue
     |  
     |  Cast(self, *args)
     |      Cast(self, SBType type) -> SBValue
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  CreateChildAtOffset(self, *args)
     |      CreateChildAtOffset(self, str name, uint32_t offset, SBType type) -> SBValue
     |  
     |  CreateValueFromAddress(self, *args)
     |      CreateValueFromAddress(self, str name, addr_t address, SBType type) -> SBValue
     |  
     |  CreateValueFromData(self, *args)
     |      CreateValueFromData(self, str name, SBData data, SBType type) -> SBValue
     |  
     |  CreateValueFromExpression(self, *args)
     |      CreateValueFromExpression(self, str name, str expression) -> SBValue
     |      CreateValueFromExpression(self, str name, str expression, SBExpressionOptions options) -> SBValue
     |  
     |  Dereference(self)
     |      Dereference(self) -> SBValue
     |  
     |  GetAddress(self)
     |      GetAddress(self) -> SBAddress
     |  
     |  GetByteSize(self)
     |      GetByteSize(self) -> size_t
     |  
     |  GetChildAtIndex(self, *args)
     |      GetChildAtIndex(self, uint32_t idx) -> SBValue
     |      GetChildAtIndex(self, uint32_t idx, DynamicValueType use_dynamic, bool can_create_synthetic) -> SBValue
     |      
     |      Get a child value by index from a value.
     |      
     |      Structs, unions, classes, arrays and and pointers have child
     |      values that can be access by index. 
     |      
     |      Structs and unions access child members using a zero based index
     |      for each child member. For
     |      
     |      Classes reserve the first indexes for base classes that have 
     |      members (empty base classes are omitted), and all members of the
     |      current class will then follow the base classes. 
     |      
     |      Pointers differ depending on what they point to. If the pointer
     |      points to a simple type, the child at index zero
     |      is the only child value available, unless synthetic_allowed 
     |      is true, in which case the pointer will be used as an array
     |      and can create 'synthetic' child values using positive or 
     |      negative indexes. If the pointer points to an aggregate type 
     |      (an array, class, union, struct), then the pointee is 
     |      transparently skipped and any children are going to be the indexes
     |      of the child values within the aggregate type. For example if
     |      we have a 'Point' type and we have a SBValue that contains a
     |      pointer to a 'Point' type, then the child at index zero will be
     |      the 'x' member, and the child at index 1 will be the 'y' member
     |      (the child at index zero won't be a 'Point' instance).
     |      
     |      Arrays have a preset number of children that can be accessed by
     |      index and will returns invalid child values for indexes that are
     |      out of bounds unless the synthetic_allowed is true. In this
     |      case the array can create 'synthetic' child values for indexes 
     |      that aren't in the array bounds using positive or negative 
     |      indexes.
     |      
     |      @param[in] idx
     |          The index of the child value to get
     |      
     |      @param[in] use_dynamic
     |          An enumeration that specifies wether to get dynamic values,
     |          and also if the target can be run to figure out the dynamic
     |          type of the child value.
     |      
     |      @param[in] synthetic_allowed
     |          If true, then allow child values to be created by index
     |          for pointers and arrays for indexes that normally wouldn't
     |          be allowed.
     |      
     |      @return
     |          A new SBValue object that represents the child member value.
     |  
     |  GetChildMemberWithName(self, *args)
     |      GetChildMemberWithName(self, str name) -> SBValue
     |      GetChildMemberWithName(self, str name, DynamicValueType use_dynamic) -> SBValue
     |      
     |      Returns the child member value.
     |      
     |      Matches child members of this object and child members of any base
     |      classes.
     |      
     |      @param[in] name
     |          The name of the child value to get
     |      
     |      @param[in] use_dynamic
     |          An enumeration that specifies wether to get dynamic values,
     |          and also if the target can be run to figure out the dynamic
     |          type of the child value.
     |      
     |      @return
     |          A new SBValue object that represents the child member value.
     |  
     |  GetData(self)
     |      GetData(self) -> SBData
     |      
     |         Get an SBData wrapping the contents of this SBValue.
     |         
     |         This method will read the contents of this object in memory
     |         and copy them into an SBData for future use. 
     |         
     |         @return
     |             An SBData with the contents of this SBValue, on success.
     |             An empty SBData otherwise.
     |  
     |  GetDeclaration(self)
     |      GetDeclaration(self) -> SBDeclaration
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description) -> bool
     |  
     |  GetDynamicValue(self, *args)
     |      GetDynamicValue(self, DynamicValueType use_dynamic) -> SBValue
     |  
     |  GetError(self)
     |      GetError(self) -> SBError
     |  
     |  GetExpressionPath(self, *args)
     |      GetExpressionPath(self, SBStream description) -> bool
     |      GetExpressionPath(self, SBStream description, bool qualify_cxx_base_classes) -> bool
     |      
     |      Returns an expression path for this value.
     |  
     |  GetFormat(self)
     |      GetFormat(self) -> Format
     |  
     |  GetFrame(self)
     |      GetFrame(self) -> SBFrame
     |  
     |  GetID(self)
     |      GetID(self) -> user_id_t
     |  
     |  GetIndexOfChildWithName(self, *args)
     |      GetIndexOfChildWithName(self, str name) -> uint32_t
     |      
     |      Returns the child member index.
     |      
     |      Matches children of this object only and will match base classes and
     |      member names if this is a clang typed object.
     |      
     |      @param[in] name
     |          The name of the child value to get
     |      
     |      @return
     |          An index to the child member value.
     |  
     |  GetLoadAddress(self)
     |      GetLoadAddress(self) -> addr_t
     |  
     |  GetLocation(self)
     |      GetLocation(self) -> str
     |  
     |  GetName(self)
     |      GetName(self) -> str
     |  
     |  GetNonSyntheticValue(self)
     |      GetNonSyntheticValue(self) -> SBValue
     |  
     |  GetNumChildren(self)
     |      GetNumChildren(self) -> uint32_t
     |  
     |  GetObjectDescription(self)
     |      GetObjectDescription(self) -> str
     |  
     |  GetOpaqueType(self)
     |      GetOpaqueType(self) -> void
     |  
     |  GetPointeeData(self, item_idx=0, item_count=1)
     |      GetPointeeData(self, uint32_t item_idx = 0, uint32_t item_count = 1) -> SBData
     |      GetPointeeData(self, uint32_t item_idx = 0) -> SBData
     |      GetPointeeData(self) -> SBData
     |      
     |         Get an SBData wrapping what this SBValue points to.
     |         
     |         This method will dereference the current SBValue, if its
     |         data type is a T* or T[], and extract item_count elements
     |         of type T from it, copying their contents in an SBData. 
     |         
     |         @param[in] item_idx
     |             The index of the first item to retrieve. For an array
     |             this is equivalent to array[item_idx], for a pointer
     |             to *(pointer + item_idx). In either case, the measurement
     |             unit for item_idx is the sizeof(T) rather than the byte
     |         
     |         @param[in] item_count
     |             How many items should be copied into the output. By default
     |             only one item is copied, but more can be asked for.
     |         
     |         @return
     |             An SBData with the contents of the copied items, on success.
     |             An empty SBData otherwise.
     |  
     |  GetPreferDynamicValue(self)
     |      GetPreferDynamicValue(self) -> DynamicValueType
     |  
     |  GetPreferSyntheticValue(self)
     |      GetPreferSyntheticValue(self) -> bool
     |  
     |  GetProcess(self)
     |      GetProcess(self) -> SBProcess
     |  
     |  GetStaticValue(self)
     |      GetStaticValue(self) -> SBValue
     |  
     |  GetSummary(self)
     |      GetSummary(self) -> str
     |  
     |  GetTarget(self)
     |      GetTarget(self) -> SBTarget
     |  
     |  GetThread(self)
     |      GetThread(self) -> SBThread
     |  
     |  GetType(self)
     |      GetType(self) -> SBType
     |  
     |  GetTypeFilter(self)
     |      GetTypeFilter(self) -> SBTypeFilter
     |  
     |  GetTypeFormat(self)
     |      GetTypeFormat(self) -> SBTypeFormat
     |  
     |  GetTypeName(self)
     |      GetTypeName(self) -> str
     |  
     |  GetTypeSummary(self)
     |      GetTypeSummary(self) -> SBTypeSummary
     |  
     |  GetTypeSynthetic(self)
     |      GetTypeSynthetic(self) -> SBTypeSynthetic
     |  
     |  GetValue(self)
     |      GetValue(self) -> str
     |  
     |  GetValueAsSigned(self, *args)
     |      GetValueAsSigned(self, SBError error, int64_t fail_value = 0) -> int64_t
     |      GetValueAsSigned(self, SBError error) -> int64_t
     |      GetValueAsSigned(self, int64_t fail_value = 0) -> int64_t
     |      GetValueAsSigned(self) -> int64_t
     |  
     |  GetValueAsUnsigned(self, *args)
     |      GetValueAsUnsigned(self, SBError error, uint64_t fail_value = 0) -> uint64_t
     |      GetValueAsUnsigned(self, SBError error) -> uint64_t
     |      GetValueAsUnsigned(self, uint64_t fail_value = 0) -> uint64_t
     |      GetValueAsUnsigned(self) -> uint64_t
     |  
     |  GetValueDidChange(self)
     |      GetValueDidChange(self) -> bool
     |  
     |  GetValueForExpressionPath(self, *args)
     |      GetValueForExpressionPath(self, str expr_path) -> SBValue
     |      
     |      Expands nested expressions like .a->b[0].c[1]->d.
     |  
     |  GetValueType(self)
     |      GetValueType(self) -> ValueType
     |  
     |  IsDynamic(self)
     |      IsDynamic(self) -> bool
     |  
     |  IsInScope(self)
     |      IsInScope(self) -> bool
     |  
     |  IsSynthetic(self)
     |      IsSynthetic(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  MightHaveChildren(self)
     |      MightHaveChildren(self) -> bool
     |  
     |  SetFormat(self, *args)
     |      SetFormat(self, Format format)
     |  
     |  SetPreferDynamicValue(self, *args)
     |      SetPreferDynamicValue(self, DynamicValueType use_dynamic)
     |  
     |  SetPreferSyntheticValue(self, *args)
     |      SetPreferSyntheticValue(self, bool use_synthetic)
     |  
     |  SetValueFromCString(self, *args)
     |      SetValueFromCString(self, str value_str) -> bool
     |      SetValueFromCString(self, str value_str, SBError error) -> bool
     |  
     |  TypeIsPointerType(self)
     |      TypeIsPointerType(self) -> bool
     |  
     |  Watch(self, *args)
     |      Watch(self, bool resolve_location, bool read, bool write, SBError error) -> SBWatchpoint
     |      
     |      Find and watch a variable.
     |      It returns an SBWatchpoint, which may be invalid.
     |  
     |  WatchPointee(self, *args)
     |      WatchPointee(self, bool resolve_location, bool read, bool write, SBError error) -> SBWatchpoint
     |      
     |      Find and watch the location pointed to by a variable.
     |      It returns an SBWatchpoint, which may be invalid.
     |  
     |  __del__ lambda self
     |  
     |  __eol_test__(val)
     |      Default function for end of list test takes an SBValue object.
     |      
     |      Return True if val is invalid or it corresponds to a null pointer.
     |      Otherwise, return False.
     |  
     |  __get_dynamic__(self)
     |      Helper function for the "SBValue.dynamic" property.
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBValue
     |      __init__(self, SBValue rhs) -> SBValue
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  get_expr_path(self)
     |  
     |  linked_list_iter(self, next_item_name, end_of_list_test=<function __eol_test__>)
     |      Generator adaptor to support iteration for SBValue as a linked list.
     |      
     |      linked_list_iter() is a special purpose iterator to treat the SBValue as
     |      the head of a list data structure, where you specify the child member
     |      name which points to the next item on the list and you specify the
     |      end-of-list test function which takes an SBValue for an item and returns
     |      True if EOL is reached and False if not.
     |      
     |      linked_list_iter() also detects infinite loop and bails out early.
     |      
     |      The end_of_list_test arg, if omitted, defaults to the __eol_test__
     |      function above.
     |      
     |      For example,
     |      
     |      # Get Frame #0.
     |      ...
     |      
     |      # Get variable 'task_head'.
     |      task_head = frame0.FindVariable('task_head')
     |      ...
     |      
     |      for t in task_head.linked_list_iter('next'):
     |          print t
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  addr
     |      A read only property that returns an lldb.SBAddress that represents the address of this value if it is in memory.
     |  
     |  address_of
     |      A read only property that returns an lldb.SBValue that represents the address-of this value.
     |  
     |  changed
     |      A read only property that returns a boolean value that indicates if this value has changed since it was last updated.
     |  
     |  data
     |      A read only property that returns an lldb object (lldb.SBData) that represents the bytes that make up the value for this object.
     |  
     |  deref
     |      A read only property that returns an lldb.SBValue that is created by dereferencing this value.
     |  
     |  description
     |      A read only property that returns the language-specific description of this value as a string
     |  
     |  dynamic
     |      A read only property that returns an lldb.SBValue that is created by finding the dynamic type of this value.
     |  
     |  error
     |      A read only property that returns the lldb.SBError that represents the error from the last time the variable value was calculated.
     |  
     |  format
     |      A read/write property that gets/sets the format used for lldb.SBValue().GetValue() for this value. See enumerations that start with "lldb.eFormat".
     |  
     |  frame
     |      A read only property that returns the lldb.SBFrame that this value is associated with, the returned value might be invalid and should be tested.
     |  
     |  is_in_scope
     |      A read only property that returns a boolean value that indicates whether this value is currently lexically in scope.
     |  
     |  load_addr
     |      A read only property that returns the load address of this value as an integer.
     |  
     |  location
     |      A read only property that returns the location of this value as a string.
     |  
     |  name
     |      A read only property that returns the name of this value as a string.
     |  
     |  num_children
     |      A read only property that returns the number of child lldb.SBValues that this value has.
     |  
     |  path
     |      A read only property that returns the expression path that one can use to reach this value in an expression.
     |  
     |  process
     |      A read only property that returns the lldb.SBProcess that this value is associated with, the returned value might be invalid and should be tested.
     |  
     |  signed
     |      A read only property that returns the value of this SBValue as a signed integer.
     |  
     |  size
     |      A read only property that returns the size in bytes of this value.
     |  
     |  summary
     |      A read only property that returns the summary for this value as a string
     |  
     |  target
     |      A read only property that returns the lldb.SBTarget that this value is associated with.
     |  
     |  thread
     |      A read only property that returns the lldb.SBThread that this value is associated with, the returned value might be invalid and should be tested.
     |  
     |  type
     |      A read only property that returns a lldb.SBType object that represents the type for this value.
     |  
     |  unsigned
     |      A read only property that returns the value of this SBValue as an usigned integer.
     |  
     |  value
     |      A read/write property that gets/sets value from a string.
     |  
     |  value_type
     |      A read only property that returns an lldb enumeration value (see enumerations that start with "lldb.eValueType") that represents the type of this value (local, argument, global, register, etc.).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBValue>
     |      delete_SBValue(SBValue self)
     |  
     |  __swig_getmethods__ = {'addr': <function GetAddress>, 'address_of': <f...
     |  
     |  __swig_setmethods__ = {'format': <function SetFormat>, 'value': <funct...
    
    class SBValueList(__builtin__.object)
     |  Represents a collection of SBValues.  Both SBFrame's GetVariables() and
     |  GetRegisters() return a SBValueList.
     |  
     |  SBValueList supports SBValue iteration. For example (from test/lldbutil.py),
     |  
     |  def get_registers(frame, kind):
     |      '''Returns the registers given the frame and the kind of registers desired.
     |  
     |      Returns None if there's no such kind.
     |      '''
     |      registerSet = frame.GetRegisters() # Return type of SBValueList.
     |      for value in registerSet:
     |          if kind.lower() in value.GetName().lower():
     |              return value
     |  
     |      return None
     |  
     |  def get_GPRs(frame):
     |      '''Returns the general purpose registers of the frame as an SBValue.
     |  
     |      The returned SBValue object is iterable.  An example:
     |          ...
     |          from lldbutil import get_GPRs
     |          regs = get_GPRs(frame)
     |          for reg in regs:
     |              print '%s => %s' % (reg.GetName(), reg.GetValue())
     |          ...
     |      '''
     |      return get_registers(frame, 'general purpose')
     |  
     |  def get_FPRs(frame):
     |      '''Returns the floating point registers of the frame as an SBValue.
     |  
     |      The returned SBValue object is iterable.  An example:
     |          ...
     |          from lldbutil import get_FPRs
     |          regs = get_FPRs(frame)
     |          for reg in regs:
     |              print '%s => %s' % (reg.GetName(), reg.GetValue())
     |          ...
     |      '''
     |      return get_registers(frame, 'floating point')
     |  
     |  def get_ESRs(frame):
     |      '''Returns the exception state registers of the frame as an SBValue.
     |  
     |      The returned SBValue object is iterable.  An example:
     |          ...
     |          from lldbutil import get_ESRs
     |          regs = get_ESRs(frame)
     |          for reg in regs:
     |              print '%s => %s' % (reg.GetName(), reg.GetValue())
     |          ...
     |      '''
     |      return get_registers(frame, 'exception state')
     |  
     |  Methods defined here:
     |  
     |  Append(self, *args)
     |      Append(self, SBValue val_obj)
     |      Append(self, SBValueList value_list)
     |  
     |  Clear(self)
     |      Clear(self)
     |  
     |  FindValueObjectByUID(self, *args)
     |      FindValueObjectByUID(self, user_id_t uid) -> SBValue
     |  
     |  GetSize(self)
     |      GetSize(self) -> uint32_t
     |  
     |  GetValueAtIndex(self, *args)
     |      GetValueAtIndex(self, uint32_t idx) -> SBValue
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  __del__ lambda self
     |  
     |  __getattr__ lambda self, name
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBValueList
     |      __init__(self, SBValueList rhs) -> SBValueList
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__(self)
     |      __repr__(self) -> PyObject
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBValueList>
     |      delete_SBValueList(SBValueList self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class SBWatchpoint(__builtin__.object)
     |  Represents an instance of watchpoint for a specific target program.
     |  
     |  A watchpoint is determined by the address and the byte size that resulted in
     |  this particular instantiation.  Each watchpoint has its settable options.
     |  
     |  See also SBTarget.watchpoint_iter() for example usage of iterating through the
     |  watchpoints of the target.
     |  
     |  Methods defined here:
     |  
     |  GetCondition(self)
     |      GetCondition(self) -> str
     |      
     |      Get the condition expression for the watchpoint.
     |  
     |  GetDescription(self, *args)
     |      GetDescription(self, SBStream description, DescriptionLevel level) -> bool
     |  
     |  GetError(self)
     |      GetError(self) -> SBError
     |  
     |  GetHardwareIndex(self)
     |      GetHardwareIndex(self) -> int32_t
     |      
     |      With -1 representing an invalid hardware index.
     |  
     |  GetHitCount(self)
     |      GetHitCount(self) -> uint32_t
     |  
     |  GetID(self)
     |      GetID(self) -> watch_id_t
     |  
     |  GetIgnoreCount(self)
     |      GetIgnoreCount(self) -> uint32_t
     |  
     |  GetWatchAddress(self)
     |      GetWatchAddress(self) -> addr_t
     |  
     |  GetWatchSize(self)
     |      GetWatchSize(self) -> size_t
     |  
     |  IsEnabled(self)
     |      IsEnabled(self) -> bool
     |  
     |  IsValid(self)
     |      IsValid(self) -> bool
     |  
     |  SetCondition(self, *args)
     |      SetCondition(self, str condition)
     |      
     |      The watchpoint stops only if the condition expression evaluates to true.
     |  
     |  SetEnabled(self, *args)
     |      SetEnabled(self, bool enabled)
     |  
     |  SetIgnoreCount(self, *args)
     |      SetIgnoreCount(self, uint32_t n)
     |  
     |  __del__ lambda self
     |  
     |  __eq__(self, other)
     |  
     |  __getattr__ lambda self, name
     |  
     |  __init__(self, *args)
     |      __init__(self) -> SBWatchpoint
     |      __init__(self, SBWatchpoint rhs) -> SBWatchpoint
     |  
     |  __ne__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __repr__ = _swig_repr(self)
     |  
     |  __setattr__ lambda self, name, value
     |  
     |  __str__(self)
     |      __str__(self) -> PyObject
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __swig_destroy__ = <built-in function delete_SBWatchpoint>
     |      delete_SBWatchpoint(SBWatchpoint self)
     |  
     |  __swig_getmethods__ = {}
     |  
     |  __swig_setmethods__ = {}
    
    class declaration(__builtin__.object)
     |  A class that represents a source declaration location with file, line and column.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, file, line, col)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class value(__builtin__.object)
     |  A class designed to wrap lldb.SBValue() objects so the resulting object
     |  can be used as a variable would be in code. So if you have a Point structure
     |  variable in your code in the current frame named "pt", you can initialize an instance
     |  of this class with it:
     |  
     |  pt = lldb.value(lldb.frame.FindVariable("pt"))
     |  print pt
     |  print pt.x
     |  print pt.y
     |  
     |  pt = lldb.value(lldb.frame.FindVariable("rectangle_array"))
     |  print rectangle_array[12]
     |  print rectangle_array[5].origin.x
     |  
     |  Methods defined here:
     |  
     |  __abs__(self)
     |  
     |  __add__(self, other)
     |  
     |  __and__(self, other)
     |  
     |  __complex__(self)
     |  
     |  __div__(self, other)
     |  
     |  __divmod__(self, other)
     |  
     |  __eq__(self, other)
     |  
     |  __float__(self)
     |  
     |  __floordiv__(self, other)
     |  
     |  __getattr__(self, name)
     |  
     |  __getitem__(self, key)
     |  
     |  __hex__(self)
     |  
     |  __iadd__(self, other)
     |  
     |  __iand__(self, other)
     |  
     |  __idiv__(self, other)
     |  
     |  __ifloordiv__(self, other)
     |  
     |  __ilshift__(self, other)
     |  
     |  __imod__(self, other)
     |  
     |  __imul__(self, other)
     |  
     |  __init__(self, sbvalue)
     |  
     |  __int__(self)
     |  
     |  __invert__(self)
     |  
     |  __ior__(self, other)
     |  
     |  __ipow__(self, other, modulo)
     |  
     |  __irshift__(self, other)
     |  
     |  __isub__(self, other)
     |  
     |  __itruediv__(self, other)
     |  
     |  __ixor__(self, other)
     |  
     |  __long__(self)
     |  
     |  __lshift__(self, other)
     |  
     |  __mod__(self, other)
     |  
     |  __mul__(self, other)
     |  
     |  __neg__(self)
     |  
     |  __neq__(self, other)
     |  
     |  __nonzero__(self)
     |  
     |  __oct__(self)
     |  
     |  __or__(self, other)
     |  
     |  __pos__(self)
     |  
     |  __pow__(self, other)
     |  
     |  __rshift__(self, other)
     |  
     |  __str__(self)
     |  
     |  __sub__(self, other)
     |  
     |  __truediv__(self, other)
     |  
     |  __xor__(self, other)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    SBAddress_swigregister(...)
    
    SBAttachInfo_swigregister(...)
    
    SBBlock_swigregister(...)
    
    SBBreakpointLocation_swigregister(...)
    
    SBBreakpoint_EventIsBreakpointEvent(*args)
        SBBreakpoint_EventIsBreakpointEvent(SBEvent event) -> bool
    
    SBBreakpoint_GetBreakpointEventTypeFromEvent(*args)
        SBBreakpoint_GetBreakpointEventTypeFromEvent(SBEvent event) -> BreakpointEventType
    
    SBBreakpoint_GetBreakpointFromEvent(*args)
        SBBreakpoint_GetBreakpointFromEvent(SBEvent event) -> SBBreakpoint
    
    SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(*args)
        SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(SBEvent event, uint32_t loc_idx) -> SBBreakpointLocation
    
    SBBreakpoint_GetNumBreakpointLocationsFromEvent(*args)
        SBBreakpoint_GetNumBreakpointLocationsFromEvent(SBEvent event_sp) -> uint32_t
    
    SBBreakpoint_swigregister(...)
    
    SBBroadcaster_swigregister(...)
    
    SBCommandInterpreter_GetArgumentDescriptionAsCString(*args)
        SBCommandInterpreter_GetArgumentDescriptionAsCString(CommandArgumentType arg_type) -> str
    
    SBCommandInterpreter_GetArgumentTypeAsCString(*args)
        SBCommandInterpreter_GetArgumentTypeAsCString(CommandArgumentType arg_type) -> str
    
    SBCommandInterpreter_GetBroadcasterClass()
        SBCommandInterpreter_GetBroadcasterClass() -> str
    
    SBCommandInterpreter_swigregister(...)
    
    SBCommandReturnObject_swigregister(...)
    
    SBCommunication_GetBroadcasterClass()
        SBCommunication_GetBroadcasterClass() -> str
    
    SBCommunication_swigregister(...)
    
    SBCompileUnit_swigregister(...)
    
    SBData_CreateDataFromCString(*args)
        SBData_CreateDataFromCString(ByteOrder endian, uint32_t addr_byte_size, str data) -> SBData
    
    SBData_CreateDataFromDoubleArray(*args)
        SBData_CreateDataFromDoubleArray(ByteOrder endian, uint32_t addr_byte_size, double array) -> SBData
    
    SBData_CreateDataFromSInt32Array(*args)
        SBData_CreateDataFromSInt32Array(ByteOrder endian, uint32_t addr_byte_size, int32_t array) -> SBData
    
    SBData_CreateDataFromSInt64Array(*args)
        SBData_CreateDataFromSInt64Array(ByteOrder endian, uint32_t addr_byte_size, int64_t array) -> SBData
    
    SBData_CreateDataFromUInt32Array(*args)
        SBData_CreateDataFromUInt32Array(ByteOrder endian, uint32_t addr_byte_size, uint32_t array) -> SBData
    
    SBData_CreateDataFromUInt64Array(*args)
        SBData_CreateDataFromUInt64Array(ByteOrder endian, uint32_t addr_byte_size, uint64_t array) -> SBData
    
    SBData_swigregister(...)
    
    SBDebugger_Create(*args)
        Create() -> SBDebugger
        Create(bool source_init_files) -> SBDebugger
        SBDebugger_Create(bool source_init_files, LogOutputCallback log_callback) -> SBDebugger
    
    SBDebugger_Destroy(*args)
        SBDebugger_Destroy(SBDebugger debugger)
    
    SBDebugger_FindDebuggerWithID(*args)
        SBDebugger_FindDebuggerWithID(int id) -> SBDebugger
    
    SBDebugger_GetDefaultArchitecture(*args)
        SBDebugger_GetDefaultArchitecture(str arch_name, size_t arch_name_len) -> bool
    
    SBDebugger_GetInternalVariableValue(*args)
        SBDebugger_GetInternalVariableValue(str var_name, str debugger_instance_name) -> SBStringList
    
    SBDebugger_GetVersionString()
        SBDebugger_GetVersionString() -> str
    
    SBDebugger_Initialize()
        SBDebugger_Initialize()
    
    SBDebugger_MemoryPressureDetected()
        SBDebugger_MemoryPressureDetected()
    
    SBDebugger_SetDefaultArchitecture(*args)
        SBDebugger_SetDefaultArchitecture(str arch_name) -> bool
    
    SBDebugger_SetInternalVariable(*args)
        SBDebugger_SetInternalVariable(str var_name, str value, str debugger_instance_name) -> SBError
    
    SBDebugger_StateAsCString(*args)
        SBDebugger_StateAsCString(StateType state) -> str
    
    SBDebugger_StateIsRunningState(*args)
        SBDebugger_StateIsRunningState(StateType state) -> bool
    
    SBDebugger_StateIsStoppedState(*args)
        SBDebugger_StateIsStoppedState(StateType state) -> bool
    
    SBDebugger_Terminate()
        SBDebugger_Terminate()
    
    SBDebugger_swigregister(...)
    
    SBDeclaration_swigregister(...)
    
    SBError_swigregister(...)
    
    SBEvent_GetCStringFromEvent(*args)
        SBEvent_GetCStringFromEvent(SBEvent event) -> str
    
    SBEvent_swigregister(...)
    
    SBExpressionOptions_swigregister(...)
    
    SBFileSpecList_swigregister(...)
    
    SBFileSpec_ResolvePath(*args)
        SBFileSpec_ResolvePath(str src_path, str dst_path, size_t dst_len) -> int
    
    SBFileSpec_swigregister(...)
    
    SBFrame_swigregister(...)
    
    SBFunction_swigregister(...)
    
    SBHostOS_GetProgramFileSpec()
        SBHostOS_GetProgramFileSpec() -> SBFileSpec
    
    SBHostOS_ThreadCancel(*args)
        SBHostOS_ThreadCancel(thread_t thread, SBError err) -> bool
    
    SBHostOS_ThreadCreate(*args)
        SBHostOS_ThreadCreate(str name, void thread_function, void thread_arg, SBError err) -> thread_t
    
    SBHostOS_ThreadCreated(*args)
        SBHostOS_ThreadCreated(str name)
    
    SBHostOS_ThreadDetach(*args)
        SBHostOS_ThreadDetach(thread_t thread, SBError err) -> bool
    
    SBHostOS_ThreadJoin(*args)
        SBHostOS_ThreadJoin(thread_t thread, void result, SBError err) -> bool
    
    SBHostOS_swigregister(...)
    
    SBInputReader_swigregister(...)
    
    SBInstructionList_swigregister(...)
    
    SBInstruction_swigregister(...)
    
    SBLaunchInfo_swigregister(...)
    
    SBLineEntry_swigregister(...)
    
    SBListener_swigregister(...)
    
    SBModule_swigregister(...)
    
    SBProcess_EventIsProcessEvent(*args)
        SBProcess_EventIsProcessEvent(SBEvent event) -> bool
    
    SBProcess_GetBroadcasterClassName()
        SBProcess_GetBroadcasterClassName() -> str
    
    SBProcess_GetProcessFromEvent(*args)
        SBProcess_GetProcessFromEvent(SBEvent event) -> SBProcess
    
    SBProcess_GetRestartedFromEvent(*args)
        SBProcess_GetRestartedFromEvent(SBEvent event) -> bool
    
    SBProcess_GetStateFromEvent(*args)
        SBProcess_GetStateFromEvent(SBEvent event) -> StateType
    
    SBProcess_swigregister(...)
    
    SBSection_swigregister(...)
    
    SBSourceManager_swigregister(...)
    
    SBStream_swigregister(...)
    
    SBStringList_swigregister(...)
    
    SBSymbolContextList_swigregister(...)
    
    SBSymbolContext_swigregister(...)
    
    SBSymbol_swigregister(...)
    
    SBTarget_GetBroadcasterClassName()
        SBTarget_GetBroadcasterClassName() -> str
    
    SBTarget_swigregister(...)
    
    SBThread_EventIsThreadEvent(*args)
        SBThread_EventIsThreadEvent(SBEvent event) -> bool
    
    SBThread_GetStackFrameFromEvent(*args)
        SBThread_GetStackFrameFromEvent(SBEvent event) -> SBFrame
    
    SBThread_GetThreadFromEvent(*args)
        SBThread_GetThreadFromEvent(SBEvent event) -> SBThread
    
    SBThread_swigregister(...)
    
    SBTypeCategory_swigregister(...)
    
    SBTypeFilter_swigregister(...)
    
    SBTypeFormat_swigregister(...)
    
    SBTypeList_swigregister(...)
    
    SBTypeMember_swigregister(...)
    
    SBTypeNameSpecifier_swigregister(...)
    
    SBTypeSummary_CreateWithFunctionName(*args)
        CreateWithFunctionName(char data, uint32_t options = 0) -> SBTypeSummary
        SBTypeSummary_CreateWithFunctionName(char data) -> SBTypeSummary
    
    SBTypeSummary_CreateWithScriptCode(*args)
        CreateWithScriptCode(char data, uint32_t options = 0) -> SBTypeSummary
        SBTypeSummary_CreateWithScriptCode(char data) -> SBTypeSummary
    
    SBTypeSummary_CreateWithSummaryString(*args)
        CreateWithSummaryString(char data, uint32_t options = 0) -> SBTypeSummary
        SBTypeSummary_CreateWithSummaryString(char data) -> SBTypeSummary
    
    SBTypeSummary_swigregister(...)
    
    SBTypeSynthetic_CreateWithClassName(*args)
        CreateWithClassName(char data, uint32_t options = 0) -> SBTypeSynthetic
        SBTypeSynthetic_CreateWithClassName(char data) -> SBTypeSynthetic
    
    SBTypeSynthetic_CreateWithScriptCode(*args)
        CreateWithScriptCode(char data, uint32_t options = 0) -> SBTypeSynthetic
        SBTypeSynthetic_CreateWithScriptCode(char data) -> SBTypeSynthetic
    
    SBTypeSynthetic_swigregister(...)
    
    SBType_swigregister(...)
    
    SBValueList_swigregister(...)
    
    SBValue_swigregister(...)
    
    SBWatchpoint_swigregister(...)
    
    in_range(symbol, section)
        Test whether a symbol is within the range of a section.
    
    lldb_iter(obj, getsize, getelem)
        A generator adaptor to support iteration for lldb container objects.

DATA
    LLDB_ARCH_DEFAULT = 'systemArch'
    LLDB_ARCH_DEFAULT_32BIT = 'systemArch32'
    LLDB_ARCH_DEFAULT_64BIT = 'systemArch64'
    LLDB_DEFAULT_BREAK_SIZE = 0
    LLDB_GENERIC_ERROR = 4294967295
    LLDB_INVALID_ADDRESS = 18446744073709551615L
    LLDB_INVALID_BREAK_ID = 0
    LLDB_INVALID_CPUTYPE = 4294967294
    LLDB_INVALID_FRAME_ID = 4294967295
    LLDB_INVALID_IMAGE_TOKEN = 4294967295
    LLDB_INVALID_INDEX32 = 4294967295
    LLDB_INVALID_IVAR_OFFSET = 4294967295
    LLDB_INVALID_PROCESS_ID = 0
    LLDB_INVALID_REGNUM = 4294967295
    LLDB_INVALID_THREAD_ID = 0
    LLDB_INVALID_UID = 18446744073709551615L
    LLDB_INVALID_WATCH_ID = 0
    LLDB_MAX_NUM_OPTION_SETS = 32
    LLDB_OPT_SET_1 = 1
    LLDB_OPT_SET_10 = 512
    LLDB_OPT_SET_2 = 2
    LLDB_OPT_SET_3 = 4
    LLDB_OPT_SET_4 = 8
    LLDB_OPT_SET_5 = 16
    LLDB_OPT_SET_6 = 32
    LLDB_OPT_SET_7 = 64
    LLDB_OPT_SET_8 = 128
    LLDB_OPT_SET_9 = 256
    LLDB_OPT_SET_ALL = 4294967295
    LLDB_REGNUM_GENERIC_ARG1 = 5
    LLDB_REGNUM_GENERIC_ARG2 = 6
    LLDB_REGNUM_GENERIC_ARG3 = 7
    LLDB_REGNUM_GENERIC_ARG4 = 8
    LLDB_REGNUM_GENERIC_ARG5 = 9
    LLDB_REGNUM_GENERIC_ARG6 = 10
    LLDB_REGNUM_GENERIC_ARG7 = 11
    LLDB_REGNUM_GENERIC_ARG8 = 12
    LLDB_REGNUM_GENERIC_FLAGS = 4
    LLDB_REGNUM_GENERIC_FP = 2
    LLDB_REGNUM_GENERIC_PC = 0
    LLDB_REGNUM_GENERIC_RA = 3
    LLDB_REGNUM_GENERIC_SP = 1
    LLDB_WATCH_TYPE_READ = 1
    LLDB_WATCH_TYPE_WRITE = 2
    UINT32_MAX = 4294967295
    UINT64_MAX = 18446744073709551615L
    debugger = <lldb.SBDebugger; proxy of <Swig Object of type 'lldb::SBDe...
    debugger_unique_id = 1
    eAccessNone = 0
    eAccessPackage = 4
    eAccessPrivate = 2
    eAccessProtected = 3
    eAccessPublic = 1
    eAddressClassCode = 2
    eAddressClassCodeAlternateISA = 3
    eAddressClassData = 4
    eAddressClassDebug = 5
    eAddressClassInvalid = 0
    eAddressClassRuntime = 6
    eAddressClassUnknown = 1
    eAllThreads = 1
    eArgTypeAddress = 0
    eArgTypeAliasName = 1
    eArgTypeAliasOptions = 2
    eArgTypeArchitecture = 3
    eArgTypeBoolean = 4
    eArgTypeBreakpointID = 5
    eArgTypeBreakpointIDRange = 6
    eArgTypeByteSize = 7
    eArgTypeClassName = 8
    eArgTypeCommandName = 9
    eArgTypeCount = 10
    eArgTypeDirectoryName = 11
    eArgTypeEndAddress = 12
    eArgTypeExprFormat = 15
    eArgTypeExpression = 13
    eArgTypeExpressionPath = 14
    eArgTypeFilename = 16
    eArgTypeFormat = 17
    eArgTypeFrameIndex = 18
    eArgTypeFullName = 19
    eArgTypeFunctionName = 20
    eArgTypeFunctionOrSymbol = 21
    eArgTypeGDBFormat = 22
    eArgTypeIndex = 23
    eArgTypeLanguage = 24
    eArgTypeLastArg = 74
    eArgTypeLineNum = 25
    eArgTypeLogCategory = 26
    eArgTypeLogChannel = 27
    eArgTypeMethod = 28
    eArgTypeName = 29
    eArgTypeNewPathPrefix = 30
    eArgTypeNone = 69
    eArgTypeNumLines = 31
    eArgTypeNumberPerLine = 32
    eArgTypeOffset = 33
    eArgTypeOldPathPrefix = 34
    eArgTypeOneLiner = 35
    eArgTypePid = 36
    eArgTypePlatform = 70
    eArgTypePlugin = 37
    eArgTypeProcessName = 38
    eArgTypePythonClass = 39
    eArgTypePythonFunction = 40
    eArgTypePythonScript = 41
    eArgTypeQueueName = 42
    eArgTypeRegisterName = 43
    eArgTypeRegularExpression = 44
    eArgTypeRunArgs = 45
    eArgTypeRunMode = 46
    eArgTypeScriptLang = 48
    eArgTypeScriptedCommandSynchronicity = 47
    eArgTypeSearchWord = 49
    eArgTypeSelector = 50
    eArgTypeSettingIndex = 51
    eArgTypeSettingKey = 52
    eArgTypeSettingPrefix = 53
    eArgTypeSettingVariableName = 54
    eArgTypeShlibName = 55
    eArgTypeSortOrder = 57
    eArgTypeSourceFile = 56
    eArgTypeStartAddress = 58
    eArgTypeSummaryString = 59
    eArgTypeSymbol = 60
    eArgTypeThreadID = 61
    eArgTypeThreadIndex = 62
    eArgTypeThreadName = 63
    eArgTypeUnixSignal = 65
    eArgTypeUnsignedInteger = 64
    eArgTypeValue = 67
    eArgTypeVarName = 66
    eArgTypeWatchType = 73
    eArgTypeWatchpointID = 71
    eArgTypeWatchpointIDRange = 72
    eArgTypeWidth = 68
    eBasicTypeBool = 20
    eBasicTypeChar = 2
    eBasicTypeChar16 = 8
    eBasicTypeChar32 = 9
    eBasicTypeDouble = 23
    eBasicTypeDoubleComplex = 26
    eBasicTypeFloat = 22
    eBasicTypeFloatComplex = 25
    eBasicTypeHalf = 21
    eBasicTypeInt = 12
    eBasicTypeInt128 = 18
    eBasicTypeInvalid = 0
    eBasicTypeLong = 14
    eBasicTypeLongDouble = 24
    eBasicTypeLongDoubleComplex = 27
    eBasicTypeLongLong = 16
    eBasicTypeNullPtr = 31
    eBasicTypeObjCClass = 29
    eBasicTypeObjCID = 28
    eBasicTypeObjCSel = 30
    eBasicTypeOther = 32
    eBasicTypeShort = 10
    eBasicTypeSignedChar = 3
    eBasicTypeSignedWChar = 6
    eBasicTypeUnsignedChar = 4
    eBasicTypeUnsignedInt = 13
    eBasicTypeUnsignedInt128 = 19
    eBasicTypeUnsignedLong = 15
    eBasicTypeUnsignedLongLong = 17
    eBasicTypeUnsignedShort = 11
    eBasicTypeUnsignedWChar = 7
    eBasicTypeVoid = 1
    eBasicTypeWChar = 5
    eBreakpointEventTypeAdded = 2
    eBreakpointEventTypeCommandChanged = 256
    eBreakpointEventTypeConditionChanged = 512
    eBreakpointEventTypeDisabled = 128
    eBreakpointEventTypeEnabled = 64
    eBreakpointEventTypeIgnoreChanged = 1024
    eBreakpointEventTypeInvalidType = 1
    eBreakpointEventTypeLocationsAdded = 8
    eBreakpointEventTypeLocationsRemoved = 16
    eBreakpointEventTypeLocationsResolved = 32
    eBreakpointEventTypeRemoved = 4
    eBreakpointEventTypeThreadChanged = 2048
    eByteOrderBig = 1
    eByteOrderInvalid = 0
    eByteOrderLittle = 4
    eByteOrderPDP = 2
    eConnectionStatusEndOfFile = 1
    eConnectionStatusError = 2
    eConnectionStatusLostConnection = 5
    eConnectionStatusNoConnection = 4
    eConnectionStatusSuccess = 0
    eConnectionStatusTimedOut = 3
    eDescriptionLevelBrief = 0
    eDescriptionLevelFull = 1
    eDescriptionLevelInitial = 3
    eDescriptionLevelVerbose = 2
    eDynamicCanRunTarget = 1
    eDynamicDontRunTarget = 2
    eEmulateInstructionOptionAutoAdvancePC = 1
    eEmulateInstructionOptionIgnoreConditions = 2
    eEmulateInstructionOptionNone = 0
    eEncodingIEEE754 = 3
    eEncodingInvalid = 0
    eEncodingSint = 2
    eEncodingUint = 1
    eEncodingVector = 4
    eErrorTypeGeneric = 1
    eErrorTypeInvalid = 0
    eErrorTypeMachKernel = 2
    eErrorTypePOSIX = 3
    eFormatAddressInfo = 34
    eFormatBinary = 2
    eFormatBoolean = 1
    eFormatBytes = 3
    eFormatBytesWithASCII = 4
    eFormatCString = 8
    eFormatChar = 5
    eFormatCharArray = 33
    eFormatCharPrintable = 6
    eFormatComplex = 7
    eFormatComplexFloat = 7
    eFormatComplexInteger = 32
    eFormatDecimal = 9
    eFormatDefault = 0
    eFormatEnum = 10
    eFormatFloat = 13
    eFormatHex = 11
    eFormatHexFloat = 35
    eFormatHexUppercase = 12
    eFormatInstruction = 36
    eFormatInvalid = 0
    eFormatOSType = 15
    eFormatOctal = 14
    eFormatPointer = 19
    eFormatUnicode16 = 16
    eFormatUnicode32 = 17
    eFormatUnsigned = 18
    eFormatVectorOfChar = 20
    eFormatVectorOfFloat32 = 29
    eFormatVectorOfFloat64 = 30
    eFormatVectorOfSInt16 = 23
    eFormatVectorOfSInt32 = 25
    eFormatVectorOfSInt64 = 27
    eFormatVectorOfSInt8 = 21
    eFormatVectorOfUInt128 = 31
    eFormatVectorOfUInt16 = 24
    eFormatVectorOfUInt32 = 26
    eFormatVectorOfUInt64 = 28
    eFormatVectorOfUInt8 = 22
    eFormatVoid = 37
    eFrameCompareEqual = 2
    eFrameCompareInvalid = 0
    eFrameCompareOlder = 4
    eFrameCompareUnknown = 1
    eFrameCompareYounger = 3
    eFunctionNameTypeAny = 60
    eFunctionNameTypeAuto = 2
    eFunctionNameTypeBase = 8
    eFunctionNameTypeFull = 4
    eFunctionNameTypeMethod = 16
    eFunctionNameTypeNone = 0
    eFunctionNameTypeSelector = 32
    eInputReaderActivate = 0
    eInputReaderAsynchronousOutputWritten = 1
    eInputReaderDeactivate = 3
    eInputReaderDone = 7
    eInputReaderEndOfFile = 6
    eInputReaderGotToken = 4
    eInputReaderGranularityAll = 4
    eInputReaderGranularityByte = 1
    eInputReaderGranularityInvalid = 0
    eInputReaderGranularityLine = 3
    eInputReaderGranularityWord = 2
    eInputReaderInterrupt = 5
    eInputReaderReactivate = 2
    eLanguageTypeAda83 = 3
    eLanguageTypeAda95 = 13
    eLanguageTypeC = 2
    eLanguageTypeC89 = 1
    eLanguageTypeC99 = 12
    eLanguageTypeC_plus_plus = 4
    eLanguageTypeCobol74 = 5
    eLanguageTypeCobol85 = 6
    eLanguageTypeD = 19
    eLanguageTypeFortran77 = 7
    eLanguageTypeFortran90 = 8
    eLanguageTypeFortran95 = 14
    eLanguageTypeJava = 11
    eLanguageTypeModula2 = 10
    eLanguageTypeObjC = 16
    eLanguageTypeObjC_plus_plus = 17
    eLanguageTypePLI = 15
    eLanguageTypePascal83 = 9
    eLanguageTypePython = 20
    eLanguageTypeUPC = 18
    eLanguageTypeUnknown = 0
    eLaunchFlagDebug = 2
    eLaunchFlagDisableASLR = 8
    eLaunchFlagDisableSTDIO = 16
    eLaunchFlagExec = 1
    eLaunchFlagLaunchInSeparateProcessGroup = 128
    eLaunchFlagLaunchInShell = 64
    eLaunchFlagLaunchInTTY = 32
    eLaunchFlagNone = 0
    eLaunchFlagStopAtEntry = 4
    eNoDynamicValues = 0
    eNumLanguageTypes = 21
    eOnlyDuringStepping = 2
    eOnlyThisThread = 0
    ePermissionsExecutable = 4
    ePermissionsReadable = 2
    ePermissionsWritable = 1
    eRegisterKindDWARF = 1
    eRegisterKindGCC = 0
    eRegisterKindGDB = 3
    eRegisterKindGeneric = 2
    eRegisterKindLLDB = 4
    eReturnStatusFailed = 6
    eReturnStatusInvalid = 0
    eReturnStatusQuit = 7
    eReturnStatusStarted = 5
    eReturnStatusSuccessContinuingNoResult = 3
    eReturnStatusSuccessContinuingResult = 4
    eReturnStatusSuccessFinishNoResult = 1
    eReturnStatusSuccessFinishResult = 2
    eScriptLanguageDefault = 1
    eScriptLanguageNone = 0
    eScriptLanguagePython = 1
    eSectionTypeCode = 1
    eSectionTypeContainer = 2
    eSectionTypeDWARFAppleNames = 26
    eSectionTypeDWARFAppleNamespaces = 28
    eSectionTypeDWARFAppleObjC = 29
    eSectionTypeDWARFAppleTypes = 27
    eSectionTypeDWARFDebugAbbrev = 15
    eSectionTypeDWARFDebugAranges = 16
    eSectionTypeDWARFDebugFrame = 17
    eSectionTypeDWARFDebugInfo = 18
    eSectionTypeDWARFDebugLine = 19
    eSectionTypeDWARFDebugLoc = 20
    eSectionTypeDWARFDebugMacInfo = 21
    eSectionTypeDWARFDebugPubNames = 22
    eSectionTypeDWARFDebugPubTypes = 23
    eSectionTypeDWARFDebugRanges = 24
    eSectionTypeDWARFDebugStr = 25
    eSectionTypeData = 3
    eSectionTypeData16 = 9
    eSectionTypeData4 = 7
    eSectionTypeData8 = 8
    eSectionTypeDataCString = 4
    eSectionTypeDataCStringPointers = 5
    eSectionTypeDataObjCCFStrings = 14
    eSectionTypeDataObjCMessageRefs = 13
    eSectionTypeDataPointers = 10
    eSectionTypeDataSymbolAddress = 6
    eSectionTypeDebug = 11
    eSectionTypeEHFrame = 30
    eSectionTypeInvalid = 0
    eSectionTypeOther = 31
    eSectionTypeZeroFill = 12
    eStateAttaching = 3
    eStateConnected = 2
    eStateCrashed = 8
    eStateDetached = 9
    eStateExited = 10
    eStateInvalid = 0
    eStateLaunching = 4
    eStateRunning = 6
    eStateStepping = 7
    eStateStopped = 5
    eStateSuspended = 11
    eStateUnloaded = 1
    eStopReasonBreakpoint = 3
    eStopReasonException = 6
    eStopReasonExec = 7
    eStopReasonInvalid = 0
    eStopReasonNone = 1
    eStopReasonPlanComplete = 8
    eStopReasonSignal = 5
    eStopReasonTrace = 2
    eStopReasonWatchpoint = 4
    eSymbolContextBlock = 16
    eSymbolContextCompUnit = 4
    eSymbolContextEverything = 127
    eSymbolContextFunction = 8
    eSymbolContextLineEntry = 32
    eSymbolContextModule = 2
    eSymbolContextSymbol = 64
    eSymbolContextTarget = 1
    eSymbolTypeAbsolute = 1
    eSymbolTypeAdditional = 20
    eSymbolTypeAny = 0
    eSymbolTypeBlock = 11
    eSymbolTypeCode = 2
    eSymbolTypeCommonBlock = 10
    eSymbolTypeCompiler = 21
    eSymbolTypeData = 3
    eSymbolTypeException = 6
    eSymbolTypeHeaderFile = 8
    eSymbolTypeInstrumentation = 22
    eSymbolTypeInvalid = 0
    eSymbolTypeLineEntry = 16
    eSymbolTypeLineHeader = 17
    eSymbolTypeLocal = 12
    eSymbolTypeObjCClass = 24
    eSymbolTypeObjCIVar = 26
    eSymbolTypeObjCMetaClass = 25
    eSymbolTypeObjectFile = 9
    eSymbolTypeParam = 13
    eSymbolTypeRuntime = 5
    eSymbolTypeScopeBegin = 18
    eSymbolTypeScopeEnd = 19
    eSymbolTypeSourceFile = 7
    eSymbolTypeTrampoline = 4
    eSymbolTypeUndefined = 23
    eSymbolTypeVariable = 14
    eSymbolTypeVariableType = 15
    eTemplateArgumentKindDeclaration = 2
    eTemplateArgumentKindExpression = 6
    eTemplateArgumentKindIntegral = 3
    eTemplateArgumentKindNull = 0
    eTemplateArgumentKindPack = 7
    eTemplateArgumentKindTemplate = 4
    eTemplateArgumentKindTemplateExpansion = 5
    eTemplateArgumentKindType = 1
    eTypeClassAny = -1
    eTypeClassArray = 1
    eTypeClassBlockPointer = 2
    eTypeClassBuiltin = 4
    eTypeClassClass = 8
    eTypeClassComplexFloat = 16
    eTypeClassComplexInteger = 32
    eTypeClassEnumeration = 64
    eTypeClassFunction = 128
    eTypeClassInvalid = 0
    eTypeClassMemberPointer = 256
    eTypeClassObjCInterface = 1024
    eTypeClassObjCObject = 512
    eTypeClassObjCObjectPointer = 2048
    eTypeClassOther = -2147483648
    eTypeClassPointer = 4096
    eTypeClassReference = 8192
    eTypeClassStruct = 16384
    eTypeClassTypedef = 32768
    eTypeClassUnion = 65536
    eTypeClassVector = 131072
    eTypeOptionCascade = 1
    eTypeOptionHideChildren = 8
    eTypeOptionHideNames = 64
    eTypeOptionHideValue = 16
    eTypeOptionNone = 0
    eTypeOptionShowOneLiner = 32
    eTypeOptionSkipPointers = 2
    eTypeOptionSkipReferences = 4
    eValueTypeConstResult = 7
    eValueTypeInvalid = 0
    eValueTypeRegister = 5
    eValueTypeRegisterSet = 6
    eValueTypeVariableArgument = 3
    eValueTypeVariableGlobal = 1
    eValueTypeVariableLocal = 4
    eValueTypeVariableStatic = 2
    frame = <lldb.SBFrame; proxy of <Swig Object of type 'lldb::SBFrame *'...
    kNumDescriptionLevels = 4
    kNumFormats = 38
    kNumRegisterKinds = 5
    process = <lldb.SBProcess; proxy of <Swig Object of type 'lldb::SBProc...
    target = <lldb.SBTarget; proxy of <Swig Object of type 'lldb::SBTarget...
    thread = <lldb.SBThread; proxy of <Swig Object of type 'lldb::SBThread...


(lldb) 
